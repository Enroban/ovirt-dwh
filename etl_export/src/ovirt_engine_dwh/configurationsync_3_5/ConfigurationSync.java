// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ovirt_engine_dwh.configurationsync_3_5;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.RoutineHistoryETL;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: ConfigurationSync Purpose: <br>
 * Description:  <br>
 * @author ydary@redhat.com
 * @version 5.4.1.r111943
 * @status 
 */
public class ConfigurationSync implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ovirtEngineDbDriverClass != null) {

				this.setProperty("ovirtEngineDbDriverClass",
						ovirtEngineDbDriverClass.toString());

			}

			if (ovirtEngineDbPassword != null) {

				this.setProperty("ovirtEngineDbPassword",
						ovirtEngineDbPassword.toString());

			}

			if (ovirtEngineDbUser != null) {

				this.setProperty("ovirtEngineDbUser",
						ovirtEngineDbUser.toString());

			}

			if (ovirtEngineDbJdbcConnection != null) {

				this.setProperty("ovirtEngineDbJdbcConnection",
						ovirtEngineDbJdbcConnection.toString());

			}

			if (ovirtEngineHistoryDbJdbcConnection != null) {

				this.setProperty("ovirtEngineHistoryDbJdbcConnection",
						ovirtEngineHistoryDbJdbcConnection.toString());

			}

			if (ovirtEngineHistoryDbDriverClass != null) {

				this.setProperty("ovirtEngineHistoryDbDriverClass",
						ovirtEngineHistoryDbDriverClass.toString());

			}

			if (ovirtEngineHistoryDbPassword != null) {

				this.setProperty("ovirtEngineHistoryDbPassword",
						ovirtEngineHistoryDbPassword.toString());

			}

			if (ovirtEngineHistoryDbUser != null) {

				this.setProperty("ovirtEngineHistoryDbUser",
						ovirtEngineHistoryDbUser.toString());

			}

			if (runTime != null) {

				String pattern_runTime = "yyyy-MM-dd HH:mm:ss";
				String value_runTime = "yyyy-MM-dd HH:mm:ss.SSSSSS;2011-07-03 12:46:47.000000";
				String[] parts_runTime = value_runTime.split(";");
				if (parts_runTime.length > 1) {
					pattern_runTime = parts_runTime[0];
					this.setProperty(
							"runTime",
							pattern_runTime
									+ ";"
									+ FormatterUtils.format_Date(runTime,
											pattern_runTime));
				} else {
					this.setProperty("runTime", FormatterUtils.format_Date(
							runTime, pattern_runTime));
				}

			}

		}

		public String ovirtEngineDbDriverClass;

		public String getOvirtEngineDbDriverClass() {
			return this.ovirtEngineDbDriverClass;
		}

		public java.lang.String ovirtEngineDbPassword;

		public java.lang.String getOvirtEngineDbPassword() {
			return this.ovirtEngineDbPassword;
		}

		public String ovirtEngineDbUser;

		public String getOvirtEngineDbUser() {
			return this.ovirtEngineDbUser;
		}

		public String ovirtEngineDbJdbcConnection;

		public String getOvirtEngineDbJdbcConnection() {
			return this.ovirtEngineDbJdbcConnection;
		}

		public String ovirtEngineHistoryDbJdbcConnection;

		public String getOvirtEngineHistoryDbJdbcConnection() {
			return this.ovirtEngineHistoryDbJdbcConnection;
		}

		public String ovirtEngineHistoryDbDriverClass;

		public String getOvirtEngineHistoryDbDriverClass() {
			return this.ovirtEngineHistoryDbDriverClass;
		}

		public java.lang.String ovirtEngineHistoryDbPassword;

		public java.lang.String getOvirtEngineHistoryDbPassword() {
			return this.ovirtEngineHistoryDbPassword;
		}

		public String ovirtEngineHistoryDbUser;

		public String getOvirtEngineHistoryDbUser() {
			return this.ovirtEngineHistoryDbUser;
		}

		public java.util.Date runTime;

		public java.util.Date getRunTime() {
			return this.runTime;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "3.5";
	private final String jobName = "ConfigurationSync";
	private final String projectName = "OVIRT_ENGINE_DWH";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ConfigurationSync.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ConfigurationSync.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tPrejob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPrejob_1", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCConnection_2", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_9", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_9", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_9", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_11", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_10", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_10", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_15", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_14", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_14", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_18", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_15", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_15", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_20", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_16", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_16", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_33_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_33", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_23", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_23", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_34_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_34", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_34_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_22", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_34_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_24_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_24", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_34_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_4", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_4", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_22", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_17", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_17", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_5", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_5", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_5", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_24_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_24", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_18", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_18", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_6", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_6", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_6", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_26", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_19", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_19", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_7", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_7", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_7", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_28_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_28", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_20", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_20", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_61_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_61", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_61_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_33_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_33", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_61_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_35_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_35", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_61_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_62_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_62", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_62_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_34_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_34", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_62_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_36_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_36", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_62_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_8", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_8", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_8", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_30_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_30", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_30_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_21", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_30_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_21", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_30_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_53_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_53", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_53_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_31", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_53_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_31", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_53_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_56_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_56", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_56_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_32", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_56_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_32", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_56_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_45_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_45", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_45_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_26", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_45_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_26", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_45_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_48_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_48", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_48_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_27", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_48_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_27", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_48_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_46_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_46", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_46_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCSP_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCSP_1", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_46_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_28_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_28", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_46_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_28_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_28", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_46_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_50_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_50", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_50_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_29", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_50_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_29", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_50_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCRow_1", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_52_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_52", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_52_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_30_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_30", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_52_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_30_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_30", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_52_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_33_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCOutput_33", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_52_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_39_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_39", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_39_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_40_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_40", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_40_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_41_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_41", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_41_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_43_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_43", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_43_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_42_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_42", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_42_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_44_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_44", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_44_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_14", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_17", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_19", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_21", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_23", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_25", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_27", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_29", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_35_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_35", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_32", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_58_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_58", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_58_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_47_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_47", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_47_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_59_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_59", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_59_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_49_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_49", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_49_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_55_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_55", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_55_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_63_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_63", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_63_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_64_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_64", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_64_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_54_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_54", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_54_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_65_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_65", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_65_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_66_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_66", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_66_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tJDBCInput_12", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row35_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_39_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row36_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_40_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row37_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row37", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_41_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row38_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_43_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row39_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_42_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row40_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_44_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row24_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row28_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row33_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row32_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_32_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row34_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_58_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_47_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row43_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row43", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_59_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_49_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row47_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row47", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_55_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row51_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row51", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_63_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row52_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row52", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_64_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row46_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row46", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_54_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row53_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row53", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_65_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row54_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row54", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_66_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row58_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row58", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tJDBCInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_CONSOLE_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCConnection_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_15_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_18_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_20_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_33_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_34_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_22_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_24_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_26_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_28_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_61_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_62_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_30_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_53_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_56_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_45_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_48_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_46_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_50_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_52_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_39_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_40_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_41_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_43_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_42_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_44_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_17_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_19_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_21_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_23_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_25_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_27_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_29_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_35_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_32_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_58_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_47_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_59_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_49_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_55_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_63_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_64_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_54_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_65_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_66_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */
				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */
				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tJDBCConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				String url_tJDBCConnection_1 = context.ovirtEngineDbJdbcConnection;

				String userName_tJDBCConnection_1 = context.ovirtEngineDbUser;
				String password_tJDBCConnection_1 = context.ovirtEngineDbPassword;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				String sharedConnectionName_tJDBCConnection_1 = "engine";
				conn_tJDBCConnection_1 = SharedDBConnection.getDBConnection(
						context.ovirtEngineDbDriverClass,
						url_tJDBCConnection_1, userName_tJDBCConnection_1,
						password_tJDBCConnection_1,
						sharedConnectionName_tJDBCConnection_1);
				if (null != conn_tJDBCConnection_1) {

					conn_tJDBCConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// userName_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// password_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */
				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */
				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				tJDBCConnection_2Process(globalMap);

				/**
				 * [tJDBCConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCConnection_1 finally ] start
				 */

				currentComponent = "tJDBCConnection_1";

				/**
				 * [tJDBCConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJDBCConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCConnection_2 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_2", false);
				start_Hash.put("tJDBCConnection_2", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_2";

				int tos_count_tJDBCConnection_2 = 0;

				String url_tJDBCConnection_2 = context.ovirtEngineHistoryDbJdbcConnection;

				String userName_tJDBCConnection_2 = context.ovirtEngineHistoryDbUser;
				String password_tJDBCConnection_2 = context.ovirtEngineHistoryDbPassword;

				java.sql.Connection conn_tJDBCConnection_2 = null;

				String sharedConnectionName_tJDBCConnection_2 = "sample_ovirt_engine_history";
				conn_tJDBCConnection_2 = SharedDBConnection.getDBConnection(
						context.ovirtEngineHistoryDbDriverClass,
						url_tJDBCConnection_2, userName_tJDBCConnection_2,
						password_tJDBCConnection_2,
						sharedConnectionName_tJDBCConnection_2);
				if (null != conn_tJDBCConnection_2) {

					conn_tJDBCConnection_2.setAutoCommit(false);
				}

				globalMap.put("conn_tJDBCConnection_2", conn_tJDBCConnection_2);
				globalMap.put("url_tJDBCConnection_2", url_tJDBCConnection_2);
				// globalMap.put("user_tJDBCConnection_2",
				// userName_tJDBCConnection_2);
				// globalMap.put("pass_tJDBCConnection_2",
				// password_tJDBCConnection_2);

				/**
				 * [tJDBCConnection_2 begin ] stop
				 */
				/**
				 * [tJDBCConnection_2 main ] start
				 */

				currentComponent = "tJDBCConnection_2";

				tos_count_tJDBCConnection_2++;

				/**
				 * [tJDBCConnection_2 main ] stop
				 */
				/**
				 * [tJDBCConnection_2 end ] start
				 */

				currentComponent = "tJDBCConnection_2";

				ok_Hash.put("tJDBCConnection_2", true);
				end_Hash.put("tJDBCConnection_2", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCConnection_2 finally ] start
				 */

				currentComponent = "tJDBCConnection_2";

				/**
				 * [tJDBCConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCConnection_2_SUBPROCESS_STATE", 1);
	}

	public static class insert_new_usersStruct implements
			routines.system.IPersistableRow<insert_new_usersStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Object user_id;

		public Object getUser_id() {
			return this.user_id;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String department;

		public String getDepartment() {
			return this.department;
		}

		public String user_role_title;

		public String getUser_role_title() {
			return this.user_role_title;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String external_id;

		public String getExternal_id() {
			return this.external_id;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.user_id == null) ? 0 : this.user_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final insert_new_usersStruct other = (insert_new_usersStruct) obj;

			if (this.user_id == null) {
				if (other.user_id != null)
					return false;

			} else if (!this.user_id.equals(other.user_id))

				return false;

			return true;
		}

		public void copyDataTo(insert_new_usersStruct other) {

			other.user_id = this.user_id;
			other.first_name = this.first_name;
			other.last_name = this.last_name;
			other.domain = this.domain;
			other.username = this.username;
			other.department = this.department;
			other.user_role_title = this.user_role_title;
			other.email = this.email;
			other.external_id = this.external_id;
			other.active = this.active;
			other.create_date = this.create_date;
			other.update_date = this.update_date;

		}

		public void copyKeysDataTo(insert_new_usersStruct other) {

			other.user_id = this.user_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.user_id = (Object) dis.readObject();

					this.first_name = readString(dis);

					this.last_name = readString(dis);

					this.domain = readString(dis);

					this.username = readString(dis);

					this.department = readString(dis);

					this.user_role_title = readString(dis);

					this.email = readString(dis);

					this.external_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.user_id);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.domain, dos);

				// String

				writeString(this.username, dos);

				// String

				writeString(this.department, dos);

				// String

				writeString(this.user_role_title, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.external_id, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("user_id=" + String.valueOf(user_id));
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",domain=" + domain);
			sb.append(",username=" + username);
			sb.append(",department=" + department);
			sb.append(",user_role_title=" + user_role_title);
			sb.append(",email=" + email);
			sb.append(",external_id=" + external_id);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_new_usersStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.user_id, other.user_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row55Struct implements
			routines.system.IPersistableRow<row55Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object user_id;

		public Object getUser_id() {
			return this.user_id;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String department;

		public String getDepartment() {
			return this.department;
		}

		public String user_role_title;

		public String getUser_role_title() {
			return this.user_role_title;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String external_id;

		public String getExternal_id() {
			return this.external_id;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.user_id = (Object) dis.readObject();

					this.first_name = readString(dis);

					this.last_name = readString(dis);

					this.domain = readString(dis);

					this.username = readString(dis);

					this.department = readString(dis);

					this.user_role_title = readString(dis);

					this.email = readString(dis);

					this.external_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.user_id);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.domain, dos);

				// String

				writeString(this.username, dos);

				// String

				writeString(this.department, dos);

				// String

				writeString(this.user_role_title, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.external_id, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("user_id=" + String.valueOf(user_id));
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",domain=" + domain);
			sb.append(",username=" + username);
			sb.append(",department=" + department);
			sb.append(",user_role_title=" + user_role_title);
			sb.append(",email=" + email);
			sb.append(",external_id=" + external_id);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row55Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row55Struct row55 = new row55Struct();
				insert_new_usersStruct insert_new_users = new insert_new_usersStruct();

				/**
				 * [tJDBCOutput_9 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_9", false);
				start_Hash.put("tJDBCOutput_9", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_9";

				int tos_count_tJDBCOutput_9 = 0;

				int updateKeyCount_tJDBCOutput_9 = 1;
				if (updateKeyCount_tJDBCOutput_9 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_9 = 0;
				int nb_line_update_tJDBCOutput_9 = 0;
				int nb_line_inserted_tJDBCOutput_9 = 0;
				int nb_line_deleted_tJDBCOutput_9 = 0;
				int nb_line_rejected_tJDBCOutput_9 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_9 = 0;

				int deletedCount_tJDBCOutput_9 = 0;
				int updatedCount_tJDBCOutput_9 = 0;
				int insertedCount_tJDBCOutput_9 = 0;
				int rejectedCount_tJDBCOutput_9 = 0;

				boolean whetherReject_tJDBCOutput_9 = false;

				java.sql.Connection connection_tJDBCOutput_9 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_9 = 10000;
				int batchSizeCounter_tJDBCOutput_9 = 0;

				java.sql.PreparedStatement pstmt_tJDBCOutput_9 = connection_tJDBCOutput_9
						.prepareStatement("SELECT COUNT(1) FROM "
								+ "users_details_history"
								+ " WHERE user_id = ?");
				String insert_tJDBCOutput_9 = "INSERT INTO "
						+ "users_details_history"
						+ " (user_id,first_name,last_name,domain,username,department,user_role_title,email,external_id,active,create_date,update_date) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tJDBCOutput_9 = connection_tJDBCOutput_9
						.prepareStatement(insert_tJDBCOutput_9);
				String update_tJDBCOutput_9 = "UPDATE "
						+ "users_details_history"
						+ " SET first_name = ?,last_name = ?,domain = ?,username = ?,department = ?,user_role_title = ?,email = ?,external_id = ?,active = ?,create_date = ?,update_date = ? WHERE user_id = ?";
				java.sql.PreparedStatement pstmtUpdate_tJDBCOutput_9 = connection_tJDBCOutput_9
						.prepareStatement(update_tJDBCOutput_9);

				/**
				 * [tJDBCOutput_9 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				int tos_count_tMap_9 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				insert_new_usersStruct insert_new_users_tmp = new insert_new_usersStruct();
				// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tJDBCInput_9 begin ] start
				 */

				ok_Hash.put("tJDBCInput_9", false);
				start_Hash.put("tJDBCInput_9", System.currentTimeMillis());

				currentComponent = "tJDBCInput_9";

				int tos_count_tJDBCInput_9 = 0;

				int nb_line_tJDBCInput_9 = 0;
				java.sql.Connection conn_tJDBCInput_9 = null;
				conn_tJDBCInput_9 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_9 = conn_tJDBCInput_9
						.createStatement();

				String dbquery_tJDBCInput_9 = "SELECT     user_id,     first_name,     last_name,     domain,     username,     department,     user_role_title,     email,     external_id,     active,     create_date,     update_date FROM dwh_users_history_view";

				globalMap.put("tJDBCInput_9_QUERY", dbquery_tJDBCInput_9);
				java.sql.ResultSet rs_tJDBCInput_9 = null;
				try {
					rs_tJDBCInput_9 = stmt_tJDBCInput_9
							.executeQuery(dbquery_tJDBCInput_9);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_9 = rs_tJDBCInput_9
							.getMetaData();
					int colQtyInRs_tJDBCInput_9 = rsmd_tJDBCInput_9
							.getColumnCount();

					String tmpContent_tJDBCInput_9 = null;
					int column_index_tJDBCInput_9 = 1;

					while (rs_tJDBCInput_9.next()) {
						nb_line_tJDBCInput_9++;

						column_index_tJDBCInput_9 = 1;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.user_id = null;
						} else {

							if (rs_tJDBCInput_9
									.getObject(column_index_tJDBCInput_9) != null) {
								row55.user_id = rs_tJDBCInput_9
										.getObject(column_index_tJDBCInput_9);
							} else {
								row55.user_id = null;
							}

						}

						column_index_tJDBCInput_9 = 2;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.first_name = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row55.first_name = tmpContent_tJDBCInput_9;
							} else {
								row55.first_name = null;
							}

						}

						column_index_tJDBCInput_9 = 3;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.last_name = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row55.last_name = tmpContent_tJDBCInput_9;
							} else {
								row55.last_name = null;
							}

						}

						column_index_tJDBCInput_9 = 4;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.domain = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row55.domain = tmpContent_tJDBCInput_9;
							} else {
								row55.domain = null;
							}

						}

						column_index_tJDBCInput_9 = 5;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.username = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row55.username = tmpContent_tJDBCInput_9;
							} else {
								row55.username = null;
							}

						}

						column_index_tJDBCInput_9 = 6;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.department = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row55.department = tmpContent_tJDBCInput_9;
							} else {
								row55.department = null;
							}

						}

						column_index_tJDBCInput_9 = 7;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.user_role_title = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row55.user_role_title = tmpContent_tJDBCInput_9;
							} else {
								row55.user_role_title = null;
							}

						}

						column_index_tJDBCInput_9 = 8;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.email = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row55.email = tmpContent_tJDBCInput_9;
							} else {
								row55.email = null;
							}

						}

						column_index_tJDBCInput_9 = 9;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.external_id = null;
						} else {

							tmpContent_tJDBCInput_9 = rs_tJDBCInput_9
									.getString(column_index_tJDBCInput_9);
							if (tmpContent_tJDBCInput_9 != null) {
								row55.external_id = tmpContent_tJDBCInput_9;
							} else {
								row55.external_id = null;
							}

						}

						column_index_tJDBCInput_9 = 10;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.active = null;
						} else {

							if (rs_tJDBCInput_9
									.getObject(column_index_tJDBCInput_9) != null) {
								row55.active = rs_tJDBCInput_9
										.getBoolean(column_index_tJDBCInput_9);
							} else {
								row55.active = null;
							}

						}

						column_index_tJDBCInput_9 = 11;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_9 = null;
							try {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getTimestamp(column_index_tJDBCInput_9);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getDate(column_index_tJDBCInput_9);
							}
							row55.create_date = date_tJDBCInput_9;

						}

						column_index_tJDBCInput_9 = 12;

						if (colQtyInRs_tJDBCInput_9 < column_index_tJDBCInput_9) {
							row55.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_9 = null;
							try {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getTimestamp(column_index_tJDBCInput_9);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_9 = rs_tJDBCInput_9
										.getDate(column_index_tJDBCInput_9);
							}
							row55.update_date = date_tJDBCInput_9;

						}

						/**
						 * [tJDBCInput_9 begin ] stop
						 */
						/**
						 * [tJDBCInput_9 main ] start
						 */

						currentComponent = "tJDBCInput_9";

						tos_count_tJDBCInput_9++;

						/**
						 * [tJDBCInput_9 main ] stop
						 */

						/**
						 * [tMap_9 main ] start
						 */

						currentComponent = "tMap_9";

						boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_9 = false;
						boolean mainRowRejected_tMap_9 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
							// ###############################
							// # Output tables

							insert_new_users = null;

							// # Output table : 'insert_new_users'
							insert_new_users_tmp.user_id = row55.user_id;
							insert_new_users_tmp.first_name = row55.first_name;
							insert_new_users_tmp.last_name = row55.last_name;
							insert_new_users_tmp.domain = row55.domain;
							insert_new_users_tmp.username = row55.username;
							insert_new_users_tmp.department = row55.department;
							insert_new_users_tmp.user_role_title = row55.user_role_title;
							insert_new_users_tmp.email = row55.email;
							insert_new_users_tmp.external_id = row55.external_id;
							insert_new_users_tmp.active = row55.active;
							insert_new_users_tmp.create_date = row55.create_date;
							insert_new_users_tmp.update_date = row55.update_date;
							insert_new_users = insert_new_users_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_9 = false;

						tos_count_tMap_9++;

						/**
						 * [tMap_9 main ] stop
						 */
						// Start of branch "insert_new_users"
						if (insert_new_users != null) {

							/**
							 * [tJDBCOutput_9 main ] start
							 */

							currentComponent = "tJDBCOutput_9";

							whetherReject_tJDBCOutput_9 = false;
							if (insert_new_users.user_id == null) {
								pstmt_tJDBCOutput_9.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_9.setObject(1,
										insert_new_users.user_id);
							}

							java.sql.ResultSet rs_tJDBCOutput_9 = pstmt_tJDBCOutput_9
									.executeQuery();
							int checkCount_tJDBCOutput_9 = -1;
							while (rs_tJDBCOutput_9.next()) {
								checkCount_tJDBCOutput_9 = rs_tJDBCOutput_9
										.getInt(1);
							}
							if (checkCount_tJDBCOutput_9 > 0) {
								if (insert_new_users.first_name == null) {
									pstmtUpdate_tJDBCOutput_9.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_9.setString(1,
											insert_new_users.first_name);
								}

								if (insert_new_users.last_name == null) {
									pstmtUpdate_tJDBCOutput_9.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_9.setString(2,
											insert_new_users.last_name);
								}

								if (insert_new_users.domain == null) {
									pstmtUpdate_tJDBCOutput_9.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_9.setString(3,
											insert_new_users.domain);
								}

								if (insert_new_users.username == null) {
									pstmtUpdate_tJDBCOutput_9.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_9.setString(4,
											insert_new_users.username);
								}

								if (insert_new_users.department == null) {
									pstmtUpdate_tJDBCOutput_9.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_9.setString(5,
											insert_new_users.department);
								}

								if (insert_new_users.user_role_title == null) {
									pstmtUpdate_tJDBCOutput_9.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_9.setString(6,
											insert_new_users.user_role_title);
								}

								if (insert_new_users.email == null) {
									pstmtUpdate_tJDBCOutput_9.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_9.setString(7,
											insert_new_users.email);
								}

								if (insert_new_users.external_id == null) {
									pstmtUpdate_tJDBCOutput_9.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tJDBCOutput_9.setString(8,
											insert_new_users.external_id);
								}

								if (insert_new_users.active == null) {
									pstmtUpdate_tJDBCOutput_9.setNull(9,
											java.sql.Types.BOOLEAN);
								} else {
									pstmtUpdate_tJDBCOutput_9.setBoolean(9,
											insert_new_users.active);
								}

								if (insert_new_users.create_date != null) {
									pstmtUpdate_tJDBCOutput_9
											.setTimestamp(
													10,
													new java.sql.Timestamp(
															insert_new_users.create_date
																	.getTime()));
								} else {
									pstmtUpdate_tJDBCOutput_9.setNull(10,
											java.sql.Types.DATE);
								}

								if (insert_new_users.update_date != null) {
									pstmtUpdate_tJDBCOutput_9
											.setTimestamp(
													11,
													new java.sql.Timestamp(
															insert_new_users.update_date
																	.getTime()));
								} else {
									pstmtUpdate_tJDBCOutput_9.setNull(11,
											java.sql.Types.DATE);
								}

								if (insert_new_users.user_id == null) {
									pstmtUpdate_tJDBCOutput_9.setNull(12,
											java.sql.Types.OTHER);
								} else {
									pstmtUpdate_tJDBCOutput_9.setObject(12,
											insert_new_users.user_id);
								}

								try {
									updatedCount_tJDBCOutput_9 = updatedCount_tJDBCOutput_9
											+ pstmtUpdate_tJDBCOutput_9
													.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_9 = true;
									throw (e);
								}
							} else {
								if (insert_new_users.user_id == null) {
									pstmtInsert_tJDBCOutput_9.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmtInsert_tJDBCOutput_9.setObject(1,
											insert_new_users.user_id);
								}

								if (insert_new_users.first_name == null) {
									pstmtInsert_tJDBCOutput_9.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_9.setString(2,
											insert_new_users.first_name);
								}

								if (insert_new_users.last_name == null) {
									pstmtInsert_tJDBCOutput_9.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_9.setString(3,
											insert_new_users.last_name);
								}

								if (insert_new_users.domain == null) {
									pstmtInsert_tJDBCOutput_9.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_9.setString(4,
											insert_new_users.domain);
								}

								if (insert_new_users.username == null) {
									pstmtInsert_tJDBCOutput_9.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_9.setString(5,
											insert_new_users.username);
								}

								if (insert_new_users.department == null) {
									pstmtInsert_tJDBCOutput_9.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_9.setString(6,
											insert_new_users.department);
								}

								if (insert_new_users.user_role_title == null) {
									pstmtInsert_tJDBCOutput_9.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_9.setString(7,
											insert_new_users.user_role_title);
								}

								if (insert_new_users.email == null) {
									pstmtInsert_tJDBCOutput_9.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_9.setString(8,
											insert_new_users.email);
								}

								if (insert_new_users.external_id == null) {
									pstmtInsert_tJDBCOutput_9.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tJDBCOutput_9.setString(9,
											insert_new_users.external_id);
								}

								if (insert_new_users.active == null) {
									pstmtInsert_tJDBCOutput_9.setNull(10,
											java.sql.Types.BOOLEAN);
								} else {
									pstmtInsert_tJDBCOutput_9.setBoolean(10,
											insert_new_users.active);
								}

								if (insert_new_users.create_date != null) {
									pstmtInsert_tJDBCOutput_9
											.setTimestamp(
													11,
													new java.sql.Timestamp(
															insert_new_users.create_date
																	.getTime()));
								} else {
									pstmtInsert_tJDBCOutput_9.setNull(11,
											java.sql.Types.DATE);
								}

								if (insert_new_users.update_date != null) {
									pstmtInsert_tJDBCOutput_9
											.setTimestamp(
													12,
													new java.sql.Timestamp(
															insert_new_users.update_date
																	.getTime()));
								} else {
									pstmtInsert_tJDBCOutput_9.setNull(12,
											java.sql.Types.DATE);
								}

								try {
									insertedCount_tJDBCOutput_9 = insertedCount_tJDBCOutput_9
											+ pstmtInsert_tJDBCOutput_9
													.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_9 = true;
									throw (e);
								}
							}
							nb_line_tJDBCOutput_9++;

							tos_count_tJDBCOutput_9++;

							/**
							 * [tJDBCOutput_9 main ] stop
							 */

						} // End of branch "insert_new_users"

						/**
						 * [tJDBCInput_9 end ] start
						 */

						currentComponent = "tJDBCInput_9";

					}
				} finally {
					rs_tJDBCInput_9.close();
					stmt_tJDBCInput_9.close();

				}
				globalMap.put("tJDBCInput_9_NB_LINE", nb_line_tJDBCInput_9);

				ok_Hash.put("tJDBCInput_9", true);
				end_Hash.put("tJDBCInput_9", System.currentTimeMillis());

				/**
				 * [tJDBCInput_9 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tJDBCOutput_9 end ] start
				 */

				currentComponent = "tJDBCOutput_9";

				if (pstmtUpdate_tJDBCOutput_9 != null) {

					pstmtUpdate_tJDBCOutput_9.close();

				}
				if (pstmtInsert_tJDBCOutput_9 != null) {

					pstmtInsert_tJDBCOutput_9.close();

				}
				if (pstmt_tJDBCOutput_9 != null) {

					pstmt_tJDBCOutput_9.close();

				}

				nb_line_deleted_tJDBCOutput_9 = nb_line_deleted_tJDBCOutput_9
						+ deletedCount_tJDBCOutput_9;
				nb_line_update_tJDBCOutput_9 = nb_line_update_tJDBCOutput_9
						+ updatedCount_tJDBCOutput_9;
				nb_line_inserted_tJDBCOutput_9 = nb_line_inserted_tJDBCOutput_9
						+ insertedCount_tJDBCOutput_9;
				nb_line_rejected_tJDBCOutput_9 = nb_line_rejected_tJDBCOutput_9
						+ rejectedCount_tJDBCOutput_9;

				globalMap.put("tJDBCOutput_9_NB_LINE", nb_line_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_9);
				globalMap.put("tJDBCOutput_9_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_9);

				ok_Hash.put("tJDBCOutput_9", true);
				end_Hash.put("tJDBCOutput_9", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_9:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_11Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_9 finally ] start
				 */

				currentComponent = "tJDBCInput_9";

				/**
				 * [tJDBCInput_9 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tJDBCOutput_9 finally ] start
				 */

				currentComponent = "tJDBCOutput_9";

				/**
				 * [tJDBCOutput_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_9_SUBPROCESS_STATE", 1);
	}

	public static class delete_usersStruct implements
			routines.system.IPersistableRow<delete_usersStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Object user_id;

		public Object getUser_id() {
			return this.user_id;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String department;

		public String getDepartment() {
			return this.department;
		}

		public String user_role_title;

		public String getUser_role_title() {
			return this.user_role_title;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String external_id;

		public String getExternal_id() {
			return this.external_id;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.user_id == null) ? 0 : this.user_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final delete_usersStruct other = (delete_usersStruct) obj;

			if (this.user_id == null) {
				if (other.user_id != null)
					return false;

			} else if (!this.user_id.equals(other.user_id))

				return false;

			return true;
		}

		public void copyDataTo(delete_usersStruct other) {

			other.user_id = this.user_id;
			other.first_name = this.first_name;
			other.last_name = this.last_name;
			other.domain = this.domain;
			other.username = this.username;
			other.department = this.department;
			other.user_role_title = this.user_role_title;
			other.email = this.email;
			other.external_id = this.external_id;
			other.active = this.active;
			other.create_date = this.create_date;
			other.update_date = this.update_date;
			other.delete_date = this.delete_date;

		}

		public void copyKeysDataTo(delete_usersStruct other) {

			other.user_id = this.user_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.user_id = (Object) dis.readObject();

					this.first_name = readString(dis);

					this.last_name = readString(dis);

					this.domain = readString(dis);

					this.username = readString(dis);

					this.department = readString(dis);

					this.user_role_title = readString(dis);

					this.email = readString(dis);

					this.external_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.user_id);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.domain, dos);

				// String

				writeString(this.username, dos);

				// String

				writeString(this.department, dos);

				// String

				writeString(this.user_role_title, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.external_id, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("user_id=" + String.valueOf(user_id));
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",domain=" + domain);
			sb.append(",username=" + username);
			sb.append(",department=" + department);
			sb.append(",user_role_title=" + user_role_title);
			sb.append(",email=" + email);
			sb.append(",external_id=" + external_id);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_usersStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.user_id, other.user_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row57Struct implements
			routines.system.IPersistableRow<row57Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object user_id;

		public Object getUser_id() {
			return this.user_id;
		}

		public String user_join_id;

		public String getUser_join_id() {
			return this.user_join_id;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String department;

		public String getDepartment() {
			return this.department;
		}

		public String user_role_title;

		public String getUser_role_title() {
			return this.user_role_title;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String external_id;

		public String getExternal_id() {
			return this.external_id;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.user_id = (Object) dis.readObject();

					this.user_join_id = readString(dis);

					this.first_name = readString(dis);

					this.last_name = readString(dis);

					this.domain = readString(dis);

					this.username = readString(dis);

					this.department = readString(dis);

					this.user_role_title = readString(dis);

					this.email = readString(dis);

					this.external_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.user_id);

				// String

				writeString(this.user_join_id, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.domain, dos);

				// String

				writeString(this.username, dos);

				// String

				writeString(this.department, dos);

				// String

				writeString(this.user_role_title, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.external_id, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("user_id=" + String.valueOf(user_id));
			sb.append(",user_join_id=" + user_join_id);
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",domain=" + domain);
			sb.append(",username=" + username);
			sb.append(",department=" + department);
			sb.append(",user_role_title=" + user_role_title);
			sb.append(",email=" + email);
			sb.append(",external_id=" + external_id);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row57Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_11Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_11Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Object user_id;

		public Object getUser_id() {
			return this.user_id;
		}

		public String user_join_id;

		public String getUser_join_id() {
			return this.user_join_id;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String department;

		public String getDepartment() {
			return this.department;
		}

		public String user_role_title;

		public String getUser_role_title() {
			return this.user_role_title;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String external_id;

		public String getExternal_id() {
			return this.external_id;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.user_join_id == null) ? 0 : this.user_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tJDBCInput_11Struct other = (after_tJDBCInput_11Struct) obj;

			if (this.user_join_id == null) {
				if (other.user_join_id != null)
					return false;

			} else if (!this.user_join_id.equals(other.user_join_id))

				return false;

			return true;
		}

		public void copyDataTo(after_tJDBCInput_11Struct other) {

			other.user_id = this.user_id;
			other.user_join_id = this.user_join_id;
			other.first_name = this.first_name;
			other.last_name = this.last_name;
			other.domain = this.domain;
			other.username = this.username;
			other.department = this.department;
			other.user_role_title = this.user_role_title;
			other.email = this.email;
			other.external_id = this.external_id;
			other.active = this.active;
			other.create_date = this.create_date;
			other.update_date = this.update_date;

		}

		public void copyKeysDataTo(after_tJDBCInput_11Struct other) {

			other.user_join_id = this.user_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.user_id = (Object) dis.readObject();

					this.user_join_id = readString(dis);

					this.first_name = readString(dis);

					this.last_name = readString(dis);

					this.domain = readString(dis);

					this.username = readString(dis);

					this.department = readString(dis);

					this.user_role_title = readString(dis);

					this.email = readString(dis);

					this.external_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.active = null;
					} else {
						this.active = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.user_id);

				// String

				writeString(this.user_join_id, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.domain, dos);

				// String

				writeString(this.username, dos);

				// String

				writeString(this.department, dos);

				// String

				writeString(this.user_role_title, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.external_id, dos);

				// Boolean

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("user_id=" + String.valueOf(user_id));
			sb.append(",user_join_id=" + user_join_id);
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",domain=" + domain);
			sb.append(",username=" + username);
			sb.append(",department=" + department);
			sb.append(",user_role_title=" + user_role_title);
			sb.append(",email=" + email);
			sb.append(",external_id=" + external_id);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.user_join_id,
					other.user_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_12Process(globalMap);

				row57Struct row57 = new row57Struct();
				delete_usersStruct delete_users = new delete_usersStruct();

				/**
				 * [tJDBCOutput_10 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_10", false);
				start_Hash.put("tJDBCOutput_10", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_10";

				int tos_count_tJDBCOutput_10 = 0;

				int updateKeyCount_tJDBCOutput_10 = 1;
				if (updateKeyCount_tJDBCOutput_10 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_10 = 0;
				int nb_line_update_tJDBCOutput_10 = 0;
				int nb_line_inserted_tJDBCOutput_10 = 0;
				int nb_line_deleted_tJDBCOutput_10 = 0;
				int nb_line_rejected_tJDBCOutput_10 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_10 = 0;

				int deletedCount_tJDBCOutput_10 = 0;
				int updatedCount_tJDBCOutput_10 = 0;
				int insertedCount_tJDBCOutput_10 = 0;
				int rejectedCount_tJDBCOutput_10 = 0;

				boolean whetherReject_tJDBCOutput_10 = false;

				java.sql.Connection connection_tJDBCOutput_10 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_10 = 10000;
				int batchSizeCounter_tJDBCOutput_10 = 0;

				String update_tJDBCOutput_10 = "UPDATE "
						+ "users_details_history"
						+ " SET first_name = ?,last_name = ?,domain = ?,username = ?,department = ?,user_role_title = ?,email = ?,external_id = ?,active = ?,create_date = ?,update_date = ?,delete_date = ? WHERE user_id = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_10 = connection_tJDBCOutput_10
						.prepareStatement(update_tJDBCOutput_10);

				/**
				 * [tJDBCOutput_10 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				int tos_count_tMap_10 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct> tHash_Lookup_row58 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct>) globalMap
						.get("tHash_Lookup_row58"));

				row58Struct row58HashKey = new row58Struct();
				row58Struct row58Default = new row58Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_usersStruct delete_users_tmp = new delete_usersStruct();
				// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tJDBCInput_11 begin ] start
				 */

				ok_Hash.put("tJDBCInput_11", false);
				start_Hash.put("tJDBCInput_11", System.currentTimeMillis());

				currentComponent = "tJDBCInput_11";

				int tos_count_tJDBCInput_11 = 0;

				int nb_line_tJDBCInput_11 = 0;
				java.sql.Connection conn_tJDBCInput_11 = null;
				conn_tJDBCInput_11 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_11 = conn_tJDBCInput_11
						.createStatement();

				String dbquery_tJDBCInput_11 = "SELECT     user_id,     upper(cast(user_id as char(36))) as user_join_id,     first_name,     last_name,     domain,     username,     department,     user_role_title,     email,     external_id,     active,     create_date,     update_date FROM v3_5_latest_users_details";

				globalMap.put("tJDBCInput_11_QUERY", dbquery_tJDBCInput_11);
				java.sql.ResultSet rs_tJDBCInput_11 = null;
				try {
					rs_tJDBCInput_11 = stmt_tJDBCInput_11
							.executeQuery(dbquery_tJDBCInput_11);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_11 = rs_tJDBCInput_11
							.getMetaData();
					int colQtyInRs_tJDBCInput_11 = rsmd_tJDBCInput_11
							.getColumnCount();

					String tmpContent_tJDBCInput_11 = null;
					int column_index_tJDBCInput_11 = 1;

					while (rs_tJDBCInput_11.next()) {
						nb_line_tJDBCInput_11++;

						column_index_tJDBCInput_11 = 1;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.user_id = null;
						} else {

							if (rs_tJDBCInput_11
									.getObject(column_index_tJDBCInput_11) != null) {
								row57.user_id = rs_tJDBCInput_11
										.getObject(column_index_tJDBCInput_11);
							} else {
								row57.user_id = null;
							}

						}

						column_index_tJDBCInput_11 = 2;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.user_join_id = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(column_index_tJDBCInput_11);
							if (tmpContent_tJDBCInput_11 != null) {
								row57.user_join_id = tmpContent_tJDBCInput_11;
							} else {
								row57.user_join_id = null;
							}

						}

						column_index_tJDBCInput_11 = 3;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.first_name = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(column_index_tJDBCInput_11);
							if (tmpContent_tJDBCInput_11 != null) {
								row57.first_name = tmpContent_tJDBCInput_11;
							} else {
								row57.first_name = null;
							}

						}

						column_index_tJDBCInput_11 = 4;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.last_name = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(column_index_tJDBCInput_11);
							if (tmpContent_tJDBCInput_11 != null) {
								row57.last_name = tmpContent_tJDBCInput_11;
							} else {
								row57.last_name = null;
							}

						}

						column_index_tJDBCInput_11 = 5;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.domain = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(column_index_tJDBCInput_11);
							if (tmpContent_tJDBCInput_11 != null) {
								row57.domain = tmpContent_tJDBCInput_11;
							} else {
								row57.domain = null;
							}

						}

						column_index_tJDBCInput_11 = 6;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.username = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(column_index_tJDBCInput_11);
							if (tmpContent_tJDBCInput_11 != null) {
								row57.username = tmpContent_tJDBCInput_11;
							} else {
								row57.username = null;
							}

						}

						column_index_tJDBCInput_11 = 7;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.department = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(column_index_tJDBCInput_11);
							if (tmpContent_tJDBCInput_11 != null) {
								row57.department = tmpContent_tJDBCInput_11;
							} else {
								row57.department = null;
							}

						}

						column_index_tJDBCInput_11 = 8;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.user_role_title = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(column_index_tJDBCInput_11);
							if (tmpContent_tJDBCInput_11 != null) {
								row57.user_role_title = tmpContent_tJDBCInput_11;
							} else {
								row57.user_role_title = null;
							}

						}

						column_index_tJDBCInput_11 = 9;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.email = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(column_index_tJDBCInput_11);
							if (tmpContent_tJDBCInput_11 != null) {
								row57.email = tmpContent_tJDBCInput_11;
							} else {
								row57.email = null;
							}

						}

						column_index_tJDBCInput_11 = 10;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.external_id = null;
						} else {

							tmpContent_tJDBCInput_11 = rs_tJDBCInput_11
									.getString(column_index_tJDBCInput_11);
							if (tmpContent_tJDBCInput_11 != null) {
								row57.external_id = tmpContent_tJDBCInput_11;
							} else {
								row57.external_id = null;
							}

						}

						column_index_tJDBCInput_11 = 11;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.active = null;
						} else {

							if (rs_tJDBCInput_11
									.getObject(column_index_tJDBCInput_11) != null) {
								row57.active = rs_tJDBCInput_11
										.getBoolean(column_index_tJDBCInput_11);
							} else {
								row57.active = null;
							}

						}

						column_index_tJDBCInput_11 = 12;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_11 = null;
							try {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getTimestamp(column_index_tJDBCInput_11);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getDate(column_index_tJDBCInput_11);
							}
							row57.create_date = date_tJDBCInput_11;

						}

						column_index_tJDBCInput_11 = 13;

						if (colQtyInRs_tJDBCInput_11 < column_index_tJDBCInput_11) {
							row57.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_11 = null;
							try {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getTimestamp(column_index_tJDBCInput_11);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_11 = rs_tJDBCInput_11
										.getDate(column_index_tJDBCInput_11);
							}
							row57.update_date = date_tJDBCInput_11;

						}

						/**
						 * [tJDBCInput_11 begin ] stop
						 */
						/**
						 * [tJDBCInput_11 main ] start
						 */

						currentComponent = "tJDBCInput_11";

						tos_count_tJDBCInput_11++;

						/**
						 * [tJDBCInput_11 main ] stop
						 */

						/**
						 * [tMap_10 main ] start
						 */

						currentComponent = "tMap_10";

						boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_10 = false;
						boolean mainRowRejected_tMap_10 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row58"
						// /////////////////////////////////////////////

						boolean forceLooprow58 = false;

						row58Struct row58ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_10 = false;

							row58HashKey.user_join_id = row57.user_join_id;

							row58HashKey.hashCodeDirty = true;

							tHash_Lookup_row58.lookup(row58HashKey);

							if (!tHash_Lookup_row58.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_10 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row58 != null
								&& tHash_Lookup_row58.getCount(row58HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row58' and it contains more one result from keys :  row58.user_join_id = '"
							// + row58HashKey.user_join_id + "'");
						} // G 071

						row58Struct row58 = null;

						row58Struct fromLookup_row58 = null;
						row58 = row58Default;

						if (tHash_Lookup_row58 != null
								&& tHash_Lookup_row58.hasNext()) { // G 099

							fromLookup_row58 = tHash_Lookup_row58.next();

						} // G 099

						if (fromLookup_row58 != null) {
							row58 = fromLookup_row58;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
							// ###############################
							// # Output tables

							delete_users = null;

							if (!rejectedInnerJoin_tMap_10) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'delete_users'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_10) {
								delete_users_tmp.user_id = row57.user_id;
								delete_users_tmp.first_name = row57.first_name;
								delete_users_tmp.last_name = row57.last_name;
								delete_users_tmp.domain = row57.domain;
								delete_users_tmp.username = row57.username;
								delete_users_tmp.department = row57.department;
								delete_users_tmp.user_role_title = row57.user_role_title;
								delete_users_tmp.email = row57.email;
								delete_users_tmp.external_id = row57.external_id;
								delete_users_tmp.active = row57.active;
								delete_users_tmp.create_date = row57.create_date;
								delete_users_tmp.update_date = context.runTime;
								delete_users_tmp.delete_date = context.runTime;
								delete_users = delete_users_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_10 = false;

						tos_count_tMap_10++;

						/**
						 * [tMap_10 main ] stop
						 */
						// Start of branch "delete_users"
						if (delete_users != null) {

							/**
							 * [tJDBCOutput_10 main ] start
							 */

							currentComponent = "tJDBCOutput_10";

							whetherReject_tJDBCOutput_10 = false;
							if (delete_users.first_name == null) {
								pstmt_tJDBCOutput_10.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_10.setString(1,
										delete_users.first_name);
							}

							if (delete_users.last_name == null) {
								pstmt_tJDBCOutput_10.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_10.setString(2,
										delete_users.last_name);
							}

							if (delete_users.domain == null) {
								pstmt_tJDBCOutput_10.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_10.setString(3,
										delete_users.domain);
							}

							if (delete_users.username == null) {
								pstmt_tJDBCOutput_10.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_10.setString(4,
										delete_users.username);
							}

							if (delete_users.department == null) {
								pstmt_tJDBCOutput_10.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_10.setString(5,
										delete_users.department);
							}

							if (delete_users.user_role_title == null) {
								pstmt_tJDBCOutput_10.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_10.setString(6,
										delete_users.user_role_title);
							}

							if (delete_users.email == null) {
								pstmt_tJDBCOutput_10.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_10.setString(7,
										delete_users.email);
							}

							if (delete_users.external_id == null) {
								pstmt_tJDBCOutput_10.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_10.setString(8,
										delete_users.external_id);
							}

							if (delete_users.active == null) {
								pstmt_tJDBCOutput_10.setNull(9,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tJDBCOutput_10.setBoolean(9,
										delete_users.active);
							}

							if (delete_users.create_date != null) {
								pstmt_tJDBCOutput_10.setTimestamp(
										10,
										new java.sql.Timestamp(
												delete_users.create_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_10.setNull(10,
										java.sql.Types.DATE);
							}

							if (delete_users.update_date != null) {
								pstmt_tJDBCOutput_10.setTimestamp(
										11,
										new java.sql.Timestamp(
												delete_users.update_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_10.setNull(11,
										java.sql.Types.DATE);
							}

							if (delete_users.delete_date != null) {
								pstmt_tJDBCOutput_10.setTimestamp(
										12,
										new java.sql.Timestamp(
												delete_users.delete_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_10.setNull(12,
										java.sql.Types.DATE);
							}

							if (delete_users.user_id == null) {
								pstmt_tJDBCOutput_10.setNull(13,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_10.setObject(13,
										delete_users.user_id);
							}

							try {
								updatedCount_tJDBCOutput_10 = updatedCount_tJDBCOutput_10
										+ pstmt_tJDBCOutput_10.executeUpdate();
								nb_line_tJDBCOutput_10++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_10 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_10++;

							/**
							 * [tJDBCOutput_10 main ] stop
							 */

						} // End of branch "delete_users"

						/**
						 * [tJDBCInput_11 end ] start
						 */

						currentComponent = "tJDBCInput_11";

					}
				} finally {
					rs_tJDBCInput_11.close();
					stmt_tJDBCInput_11.close();

				}
				globalMap.put("tJDBCInput_11_NB_LINE", nb_line_tJDBCInput_11);

				ok_Hash.put("tJDBCInput_11", true);
				end_Hash.put("tJDBCInput_11", System.currentTimeMillis());

				/**
				 * [tJDBCInput_11 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row58 != null) {
					tHash_Lookup_row58.endGet();
				}
				globalMap.remove("tHash_Lookup_row58");

				// ###############################

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tJDBCOutput_10 end ] start
				 */

				currentComponent = "tJDBCOutput_10";

				if (pstmt_tJDBCOutput_10 != null) {

					pstmt_tJDBCOutput_10.close();

				}

				nb_line_deleted_tJDBCOutput_10 = nb_line_deleted_tJDBCOutput_10
						+ deletedCount_tJDBCOutput_10;
				nb_line_update_tJDBCOutput_10 = nb_line_update_tJDBCOutput_10
						+ updatedCount_tJDBCOutput_10;
				nb_line_inserted_tJDBCOutput_10 = nb_line_inserted_tJDBCOutput_10
						+ insertedCount_tJDBCOutput_10;
				nb_line_rejected_tJDBCOutput_10 = nb_line_rejected_tJDBCOutput_10
						+ rejectedCount_tJDBCOutput_10;

				globalMap.put("tJDBCOutput_10_NB_LINE", nb_line_tJDBCOutput_10);
				globalMap.put("tJDBCOutput_10_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_10);
				globalMap.put("tJDBCOutput_10_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_10);
				globalMap.put("tJDBCOutput_10_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_10);
				globalMap.put("tJDBCOutput_10_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_10);

				ok_Hash.put("tJDBCOutput_10", true);
				end_Hash.put("tJDBCOutput_10", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_10 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_11:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_10"
			globalMap.remove("tHash_Lookup_row58");

			try {

				/**
				 * [tJDBCInput_11 finally ] start
				 */

				currentComponent = "tJDBCInput_11";

				/**
				 * [tJDBCInput_11 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tJDBCOutput_10 finally ] start
				 */

				currentComponent = "tJDBCOutput_10";

				/**
				 * [tJDBCOutput_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_11_SUBPROCESS_STATE", 1);
	}

	public static class datacenter_configurationStruct implements
			routines.system.IPersistableRow<datacenter_configurationStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String datacenter_name;

		public String getDatacenter_name() {
			return this.datacenter_name;
		}

		public String datacenter_description;

		public String getDatacenter_description() {
			return this.datacenter_description;
		}

		public Boolean is_local_storage;

		public Boolean getIs_local_storage() {
			return this.is_local_storage;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_name = readString(dis);

					this.datacenter_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_local_storage = null;
					} else {
						this.is_local_storage = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.datacenter_name, dos);

				// String

				writeString(this.datacenter_description, dos);

				// Boolean

				if (this.is_local_storage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_local_storage);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_name=" + datacenter_name);
			sb.append(",datacenter_description=" + datacenter_description);
			sb.append(",is_local_storage=" + String.valueOf(is_local_storage));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(datacenter_configurationStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String datacenter_name;

		public String getDatacenter_name() {
			return this.datacenter_name;
		}

		public String datacenter_description;

		public String getDatacenter_description() {
			return this.datacenter_description;
		}

		public Boolean is_local_storage;

		public Boolean getIs_local_storage() {
			return this.is_local_storage;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_name = readString(dis);

					this.datacenter_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_local_storage = null;
					} else {
						this.is_local_storage = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.datacenter_name, dos);

				// String

				writeString(this.datacenter_description, dos);

				// Boolean

				if (this.is_local_storage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_local_storage);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_name=" + datacenter_name);
			sb.append(",datacenter_description=" + datacenter_description);
			sb.append(",is_local_storage=" + String.valueOf(is_local_storage));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				datacenter_configurationStruct datacenter_configuration = new datacenter_configurationStruct();

				/**
				 * [tJDBCOutput_2 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_2", false);
				start_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_2";

				int tos_count_tJDBCOutput_2 = 0;

				int nb_line_tJDBCOutput_2 = 0;
				int nb_line_update_tJDBCOutput_2 = 0;
				int nb_line_inserted_tJDBCOutput_2 = 0;
				int nb_line_deleted_tJDBCOutput_2 = 0;
				int nb_line_rejected_tJDBCOutput_2 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_2 = 0;

				int deletedCount_tJDBCOutput_2 = 0;
				int updatedCount_tJDBCOutput_2 = 0;
				int insertedCount_tJDBCOutput_2 = 0;
				int rejectedCount_tJDBCOutput_2 = 0;

				boolean whetherReject_tJDBCOutput_2 = false;

				java.sql.Connection connection_tJDBCOutput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_2 = 10000;
				int batchSizeCounter_tJDBCOutput_2 = 0;

				String insert_tJDBCOutput_2 = "INSERT INTO "
						+ "datacenter_configuration"
						+ " (datacenter_id,datacenter_name,datacenter_description,is_local_storage,create_date,update_date) VALUES (?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_2 = connection_tJDBCOutput_2
						.prepareStatement(insert_tJDBCOutput_2);

				/**
				 * [tJDBCOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				datacenter_configurationStruct datacenter_configuration_tmp = new datacenter_configurationStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tJDBCInput_2 begin ] start
				 */

				ok_Hash.put("tJDBCInput_2", false);
				start_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				currentComponent = "tJDBCInput_2";

				int tos_count_tJDBCInput_2 = 0;

				int nb_line_tJDBCInput_2 = 0;
				java.sql.Connection conn_tJDBCInput_2 = null;
				conn_tJDBCInput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_2 = conn_tJDBCInput_2
						.createStatement();

				String dbquery_tJDBCInput_2 = "SELECT     datacenter_id,     datacenter_name,     datacenter_description,     is_local_storage,     create_date,     update_date  FROM dwh_datacenter_configuration_history_view";

				globalMap.put("tJDBCInput_2_QUERY", dbquery_tJDBCInput_2);
				java.sql.ResultSet rs_tJDBCInput_2 = null;
				try {
					rs_tJDBCInput_2 = stmt_tJDBCInput_2
							.executeQuery(dbquery_tJDBCInput_2);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_2 = rs_tJDBCInput_2
							.getMetaData();
					int colQtyInRs_tJDBCInput_2 = rsmd_tJDBCInput_2
							.getColumnCount();

					String tmpContent_tJDBCInput_2 = null;
					int column_index_tJDBCInput_2 = 1;

					while (rs_tJDBCInput_2.next()) {
						nb_line_tJDBCInput_2++;

						column_index_tJDBCInput_2 = 1;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row3.datacenter_id = null;
						} else {

							if (rs_tJDBCInput_2
									.getObject(column_index_tJDBCInput_2) != null) {
								row3.datacenter_id = rs_tJDBCInput_2
										.getObject(column_index_tJDBCInput_2);
							} else {
								row3.datacenter_id = null;
							}

						}

						column_index_tJDBCInput_2 = 2;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row3.datacenter_name = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row3.datacenter_name = tmpContent_tJDBCInput_2;
							} else {
								row3.datacenter_name = null;
							}

						}

						column_index_tJDBCInput_2 = 3;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row3.datacenter_description = null;
						} else {

							tmpContent_tJDBCInput_2 = rs_tJDBCInput_2
									.getString(column_index_tJDBCInput_2);
							if (tmpContent_tJDBCInput_2 != null) {
								row3.datacenter_description = tmpContent_tJDBCInput_2;
							} else {
								row3.datacenter_description = null;
							}

						}

						column_index_tJDBCInput_2 = 4;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row3.is_local_storage = null;
						} else {

							if (rs_tJDBCInput_2
									.getObject(column_index_tJDBCInput_2) != null) {
								row3.is_local_storage = rs_tJDBCInput_2
										.getBoolean(column_index_tJDBCInput_2);
							} else {
								row3.is_local_storage = null;
							}

						}

						column_index_tJDBCInput_2 = 5;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row3.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(column_index_tJDBCInput_2);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getDate(column_index_tJDBCInput_2);
							}
							row3.create_date = date_tJDBCInput_2;

						}

						column_index_tJDBCInput_2 = 6;

						if (colQtyInRs_tJDBCInput_2 < column_index_tJDBCInput_2) {
							row3.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_2 = null;
							try {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getTimestamp(column_index_tJDBCInput_2);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_2 = rs_tJDBCInput_2
										.getDate(column_index_tJDBCInput_2);
							}
							row3.update_date = date_tJDBCInput_2;

						}

						/**
						 * [tJDBCInput_2 begin ] stop
						 */
						/**
						 * [tJDBCInput_2 main ] start
						 */

						currentComponent = "tJDBCInput_2";

						tos_count_tJDBCInput_2++;

						/**
						 * [tJDBCInput_2 main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						if (

						(

						row3.update_date == null ? TalendDate.compareDate(
								row3.create_date, context.runTime) <= 0
								: TalendDate.compareDate(row3.update_date,
										context.runTime) <= 0

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row3'
							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								datacenter_configuration = null;

								// # Output table : 'datacenter_configuration'
								datacenter_configuration_tmp.datacenter_id = row3.datacenter_id;
								datacenter_configuration_tmp.datacenter_name = StringHandling
										.TRIM(row3.datacenter_name);
								datacenter_configuration_tmp.datacenter_description = StringHandling
										.TRIM(row3.datacenter_description);
								datacenter_configuration_tmp.is_local_storage = row3.is_local_storage;
								datacenter_configuration_tmp.create_date = row3.create_date;
								datacenter_configuration_tmp.update_date = row3.update_date;
								datacenter_configuration = datacenter_configuration_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */
							// Start of branch "datacenter_configuration"
							if (datacenter_configuration != null) {

								/**
								 * [tJDBCOutput_2 main ] start
								 */

								currentComponent = "tJDBCOutput_2";

								whetherReject_tJDBCOutput_2 = false;
								if (datacenter_configuration.datacenter_id == null) {
									pstmt_tJDBCOutput_2.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_2
											.setObject(
													1,
													datacenter_configuration.datacenter_id);
								}

								if (datacenter_configuration.datacenter_name == null) {
									pstmt_tJDBCOutput_2.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_2
											.setString(
													2,
													datacenter_configuration.datacenter_name);
								}

								if (datacenter_configuration.datacenter_description == null) {
									pstmt_tJDBCOutput_2.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_2
											.setString(
													3,
													datacenter_configuration.datacenter_description);
								}

								if (datacenter_configuration.is_local_storage == null) {
									pstmt_tJDBCOutput_2.setNull(4,
											java.sql.Types.BOOLEAN);
								} else {
									pstmt_tJDBCOutput_2
											.setBoolean(
													4,
													datacenter_configuration.is_local_storage);
								}

								if (datacenter_configuration.create_date != null) {
									pstmt_tJDBCOutput_2
											.setTimestamp(
													5,
													new java.sql.Timestamp(
															datacenter_configuration.create_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_2.setNull(5,
											java.sql.Types.DATE);
								}

								if (datacenter_configuration.update_date != null) {
									pstmt_tJDBCOutput_2
											.setTimestamp(
													6,
													new java.sql.Timestamp(
															datacenter_configuration.update_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_2.setNull(6,
											java.sql.Types.DATE);
								}

								try {
									insertedCount_tJDBCOutput_2 = insertedCount_tJDBCOutput_2
											+ pstmt_tJDBCOutput_2
													.executeUpdate();
									nb_line_tJDBCOutput_2++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_2 = true;
									throw (e);
								}

								tos_count_tJDBCOutput_2++;

								/**
								 * [tJDBCOutput_2 main ] stop
								 */

							} // End of branch "datacenter_configuration"

						} // G_TM_M_280 close main tMap filter for table 'row3'

						/**
						 * [tJDBCInput_2 end ] start
						 */

						currentComponent = "tJDBCInput_2";

					}
				} finally {
					rs_tJDBCInput_2.close();
					stmt_tJDBCInput_2.close();

				}
				globalMap.put("tJDBCInput_2_NB_LINE", nb_line_tJDBCInput_2);

				ok_Hash.put("tJDBCInput_2", true);
				end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				/**
				 * [tJDBCInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tJDBCOutput_2 end ] start
				 */

				currentComponent = "tJDBCOutput_2";

				if (pstmt_tJDBCOutput_2 != null) {

					pstmt_tJDBCOutput_2.close();

				}

				nb_line_deleted_tJDBCOutput_2 = nb_line_deleted_tJDBCOutput_2
						+ deletedCount_tJDBCOutput_2;
				nb_line_update_tJDBCOutput_2 = nb_line_update_tJDBCOutput_2
						+ updatedCount_tJDBCOutput_2;
				nb_line_inserted_tJDBCOutput_2 = nb_line_inserted_tJDBCOutput_2
						+ insertedCount_tJDBCOutput_2;
				nb_line_rejected_tJDBCOutput_2 = nb_line_rejected_tJDBCOutput_2
						+ rejectedCount_tJDBCOutput_2;

				globalMap.put("tJDBCOutput_2_NB_LINE", nb_line_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_2);

				ok_Hash.put("tJDBCOutput_2", true);
				end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_15Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_2 finally ] start
				 */

				currentComponent = "tJDBCInput_2";

				/**
				 * [tJDBCInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tJDBCOutput_2 finally ] start
				 */

				currentComponent = "tJDBCOutput_2";

				/**
				 * [tJDBCOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 1);
	}

	public static class delete_datacentersStruct implements
			routines.system.IPersistableRow<delete_datacentersStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String datacenter_name;

		public String getDatacenter_name() {
			return this.datacenter_name;
		}

		public String datacenter_description;

		public String getDatacenter_description() {
			return this.datacenter_description;
		}

		public Boolean is_local_storage;

		public Boolean getIs_local_storage() {
			return this.is_local_storage;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_name = readString(dis);

					this.datacenter_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_local_storage = null;
					} else {
						this.is_local_storage = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.datacenter_name, dos);

				// String

				writeString(this.datacenter_description, dos);

				// Boolean

				if (this.is_local_storage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_local_storage);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_name=" + datacenter_name);
			sb.append(",datacenter_description=" + datacenter_description);
			sb.append(",is_local_storage=" + String.valueOf(is_local_storage));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_datacentersStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		public String datacenter_name;

		public String getDatacenter_name() {
			return this.datacenter_name;
		}

		public String datacenter_description;

		public String getDatacenter_description() {
			return this.datacenter_description;
		}

		public Boolean is_local_storage;

		public Boolean getIs_local_storage() {
			return this.is_local_storage;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_join_id = readString(dis);

					this.datacenter_name = readString(dis);

					this.datacenter_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_local_storage = null;
					} else {
						this.is_local_storage = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.datacenter_join_id, dos);

				// String

				writeString(this.datacenter_name, dos);

				// String

				writeString(this.datacenter_description, dos);

				// Boolean

				if (this.is_local_storage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_local_storage);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_join_id=" + datacenter_join_id);
			sb.append(",datacenter_name=" + datacenter_name);
			sb.append(",datacenter_description=" + datacenter_description);
			sb.append(",is_local_storage=" + String.valueOf(is_local_storage));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_15Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_15Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		public String datacenter_name;

		public String getDatacenter_name() {
			return this.datacenter_name;
		}

		public String datacenter_description;

		public String getDatacenter_description() {
			return this.datacenter_description;
		}

		public Boolean is_local_storage;

		public Boolean getIs_local_storage() {
			return this.is_local_storage;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_join_id = readString(dis);

					this.datacenter_name = readString(dis);

					this.datacenter_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_local_storage = null;
					} else {
						this.is_local_storage = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.datacenter_join_id, dos);

				// String

				writeString(this.datacenter_name, dos);

				// String

				writeString(this.datacenter_description, dos);

				// Boolean

				if (this.is_local_storage == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_local_storage);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_join_id=" + datacenter_join_id);
			sb.append(",datacenter_name=" + datacenter_name);
			sb.append(",datacenter_description=" + datacenter_description);
			sb.append(",is_local_storage=" + String.valueOf(is_local_storage));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_14Process(globalMap);

				row14Struct row14 = new row14Struct();
				delete_datacentersStruct delete_datacenters = new delete_datacentersStruct();

				/**
				 * [tJDBCOutput_14 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_14", false);
				start_Hash.put("tJDBCOutput_14", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_14";

				int tos_count_tJDBCOutput_14 = 0;

				int nb_line_tJDBCOutput_14 = 0;
				int nb_line_update_tJDBCOutput_14 = 0;
				int nb_line_inserted_tJDBCOutput_14 = 0;
				int nb_line_deleted_tJDBCOutput_14 = 0;
				int nb_line_rejected_tJDBCOutput_14 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_14 = 0;

				int deletedCount_tJDBCOutput_14 = 0;
				int updatedCount_tJDBCOutput_14 = 0;
				int insertedCount_tJDBCOutput_14 = 0;
				int rejectedCount_tJDBCOutput_14 = 0;

				boolean whetherReject_tJDBCOutput_14 = false;

				java.sql.Connection connection_tJDBCOutput_14 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_14 = 10000;
				int batchSizeCounter_tJDBCOutput_14 = 0;

				String insert_tJDBCOutput_14 = "INSERT INTO "
						+ "datacenter_configuration"
						+ " (datacenter_id,datacenter_name,datacenter_description,is_local_storage,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_14 = connection_tJDBCOutput_14
						.prepareStatement(insert_tJDBCOutput_14);

				/**
				 * [tJDBCOutput_14 begin ] stop
				 */

				/**
				 * [tMap_14 begin ] start
				 */

				ok_Hash.put("tMap_14", false);
				start_Hash.put("tMap_14", System.currentTimeMillis());

				currentComponent = "tMap_14";

				int tos_count_tMap_14 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_14__Struct {
				}
				Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_datacentersStruct delete_datacenters_tmp = new delete_datacentersStruct();
				// ###############################

				/**
				 * [tMap_14 begin ] stop
				 */

				/**
				 * [tJDBCInput_15 begin ] start
				 */

				ok_Hash.put("tJDBCInput_15", false);
				start_Hash.put("tJDBCInput_15", System.currentTimeMillis());

				currentComponent = "tJDBCInput_15";

				int tos_count_tJDBCInput_15 = 0;

				int nb_line_tJDBCInput_15 = 0;
				java.sql.Connection conn_tJDBCInput_15 = null;
				conn_tJDBCInput_15 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_15 = conn_tJDBCInput_15
						.createStatement();

				String dbquery_tJDBCInput_15 = "SELECT history_id,   		datacenter_id,   		upper(cast(datacenter_id as char(36))) as datacenter_join_id,  		datacenter_name,   		datacenter_description,          	is_local_storage,   		create_date,   		update_date  FROM  v3_5_latest_configuration_datacenters";

				globalMap.put("tJDBCInput_15_QUERY", dbquery_tJDBCInput_15);
				java.sql.ResultSet rs_tJDBCInput_15 = null;
				try {
					rs_tJDBCInput_15 = stmt_tJDBCInput_15
							.executeQuery(dbquery_tJDBCInput_15);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_15 = rs_tJDBCInput_15
							.getMetaData();
					int colQtyInRs_tJDBCInput_15 = rsmd_tJDBCInput_15
							.getColumnCount();

					String tmpContent_tJDBCInput_15 = null;
					int column_index_tJDBCInput_15 = 1;

					while (rs_tJDBCInput_15.next()) {
						nb_line_tJDBCInput_15++;

						column_index_tJDBCInput_15 = 1;

						if (colQtyInRs_tJDBCInput_15 < column_index_tJDBCInput_15) {
							row14.history_id = null;
						} else {

							if (rs_tJDBCInput_15
									.getObject(column_index_tJDBCInput_15) != null) {
								row14.history_id = rs_tJDBCInput_15
										.getInt(column_index_tJDBCInput_15);
							} else {
								row14.history_id = null;
							}

						}

						column_index_tJDBCInput_15 = 2;

						if (colQtyInRs_tJDBCInput_15 < column_index_tJDBCInput_15) {
							row14.datacenter_id = null;
						} else {

							if (rs_tJDBCInput_15
									.getObject(column_index_tJDBCInput_15) != null) {
								row14.datacenter_id = rs_tJDBCInput_15
										.getObject(column_index_tJDBCInput_15);
							} else {
								row14.datacenter_id = null;
							}

						}

						column_index_tJDBCInput_15 = 3;

						if (colQtyInRs_tJDBCInput_15 < column_index_tJDBCInput_15) {
							row14.datacenter_join_id = null;
						} else {

							tmpContent_tJDBCInput_15 = rs_tJDBCInput_15
									.getString(column_index_tJDBCInput_15);
							if (tmpContent_tJDBCInput_15 != null) {
								row14.datacenter_join_id = tmpContent_tJDBCInput_15;
							} else {
								row14.datacenter_join_id = null;
							}

						}

						column_index_tJDBCInput_15 = 4;

						if (colQtyInRs_tJDBCInput_15 < column_index_tJDBCInput_15) {
							row14.datacenter_name = null;
						} else {

							tmpContent_tJDBCInput_15 = rs_tJDBCInput_15
									.getString(column_index_tJDBCInput_15);
							if (tmpContent_tJDBCInput_15 != null) {
								row14.datacenter_name = tmpContent_tJDBCInput_15;
							} else {
								row14.datacenter_name = null;
							}

						}

						column_index_tJDBCInput_15 = 5;

						if (colQtyInRs_tJDBCInput_15 < column_index_tJDBCInput_15) {
							row14.datacenter_description = null;
						} else {

							tmpContent_tJDBCInput_15 = rs_tJDBCInput_15
									.getString(column_index_tJDBCInput_15);
							if (tmpContent_tJDBCInput_15 != null) {
								row14.datacenter_description = tmpContent_tJDBCInput_15;
							} else {
								row14.datacenter_description = null;
							}

						}

						column_index_tJDBCInput_15 = 6;

						if (colQtyInRs_tJDBCInput_15 < column_index_tJDBCInput_15) {
							row14.is_local_storage = null;
						} else {

							if (rs_tJDBCInput_15
									.getObject(column_index_tJDBCInput_15) != null) {
								row14.is_local_storage = rs_tJDBCInput_15
										.getBoolean(column_index_tJDBCInput_15);
							} else {
								row14.is_local_storage = null;
							}

						}

						column_index_tJDBCInput_15 = 7;

						if (colQtyInRs_tJDBCInput_15 < column_index_tJDBCInput_15) {
							row14.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_15 = null;
							try {
								date_tJDBCInput_15 = rs_tJDBCInput_15
										.getTimestamp(column_index_tJDBCInput_15);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_15 = rs_tJDBCInput_15
										.getDate(column_index_tJDBCInput_15);
							}
							row14.create_date = date_tJDBCInput_15;

						}

						column_index_tJDBCInput_15 = 8;

						if (colQtyInRs_tJDBCInput_15 < column_index_tJDBCInput_15) {
							row14.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_15 = null;
							try {
								date_tJDBCInput_15 = rs_tJDBCInput_15
										.getTimestamp(column_index_tJDBCInput_15);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_15 = rs_tJDBCInput_15
										.getDate(column_index_tJDBCInput_15);
							}
							row14.update_date = date_tJDBCInput_15;

						}

						/**
						 * [tJDBCInput_15 begin ] stop
						 */
						/**
						 * [tJDBCInput_15 main ] start
						 */

						currentComponent = "tJDBCInput_15";

						tos_count_tJDBCInput_15++;

						/**
						 * [tJDBCInput_15 main ] stop
						 */

						/**
						 * [tMap_14 main ] start
						 */

						currentComponent = "tMap_14";

						boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_14 = false;
						boolean mainRowRejected_tMap_14 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row15"
						// /////////////////////////////////////////////

						boolean forceLooprow15 = false;

						row15Struct row15ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_14) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_14 = false;

							row15HashKey.datacenter_join_id = row14.datacenter_join_id;

							row15HashKey.hashCodeDirty = true;

							tHash_Lookup_row15.lookup(row15HashKey);

							if (!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_14 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row15 != null
								&& tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.datacenter_join_id = '"
							// + row15HashKey.datacenter_join_id + "'");
						} // G 071

						row15Struct row15 = null;

						row15Struct fromLookup_row15 = null;
						row15 = row15Default;

						if (tHash_Lookup_row15 != null
								&& tHash_Lookup_row15.hasNext()) { // G 099

							fromLookup_row15 = tHash_Lookup_row15.next();

						} // G 099

						if (fromLookup_row15 != null) {
							row15 = fromLookup_row15;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
							// ###############################
							// # Output tables

							delete_datacenters = null;

							if (!rejectedInnerJoin_tMap_14) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'delete_datacenters'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_14) {
								delete_datacenters_tmp.datacenter_id = row14.datacenter_id;
								delete_datacenters_tmp.datacenter_name = row14.datacenter_name;
								delete_datacenters_tmp.datacenter_description = row14.datacenter_description;
								delete_datacenters_tmp.is_local_storage = row14.is_local_storage;
								delete_datacenters_tmp.create_date = row14.create_date;
								delete_datacenters_tmp.update_date = context.runTime;
								delete_datacenters_tmp.delete_date = context.runTime;
								delete_datacenters = delete_datacenters_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_14 = false;

						tos_count_tMap_14++;

						/**
						 * [tMap_14 main ] stop
						 */
						// Start of branch "delete_datacenters"
						if (delete_datacenters != null) {

							/**
							 * [tJDBCOutput_14 main ] start
							 */

							currentComponent = "tJDBCOutput_14";

							whetherReject_tJDBCOutput_14 = false;
							if (delete_datacenters.datacenter_id == null) {
								pstmt_tJDBCOutput_14.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_14.setObject(1,
										delete_datacenters.datacenter_id);
							}

							if (delete_datacenters.datacenter_name == null) {
								pstmt_tJDBCOutput_14.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_14.setString(2,
										delete_datacenters.datacenter_name);
							}

							if (delete_datacenters.datacenter_description == null) {
								pstmt_tJDBCOutput_14.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_14
										.setString(
												3,
												delete_datacenters.datacenter_description);
							}

							if (delete_datacenters.is_local_storage == null) {
								pstmt_tJDBCOutput_14.setNull(4,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tJDBCOutput_14.setBoolean(4,
										delete_datacenters.is_local_storage);
							}

							if (delete_datacenters.create_date != null) {
								pstmt_tJDBCOutput_14.setTimestamp(
										5,
										new java.sql.Timestamp(
												delete_datacenters.create_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_14.setNull(5,
										java.sql.Types.DATE);
							}

							if (delete_datacenters.update_date != null) {
								pstmt_tJDBCOutput_14.setTimestamp(
										6,
										new java.sql.Timestamp(
												delete_datacenters.update_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_14.setNull(6,
										java.sql.Types.DATE);
							}

							if (delete_datacenters.delete_date != null) {
								pstmt_tJDBCOutput_14.setTimestamp(
										7,
										new java.sql.Timestamp(
												delete_datacenters.delete_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_14.setNull(7,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tJDBCOutput_14 = insertedCount_tJDBCOutput_14
										+ pstmt_tJDBCOutput_14.executeUpdate();
								nb_line_tJDBCOutput_14++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_14 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_14++;

							/**
							 * [tJDBCOutput_14 main ] stop
							 */

						} // End of branch "delete_datacenters"

						/**
						 * [tJDBCInput_15 end ] start
						 */

						currentComponent = "tJDBCInput_15";

					}
				} finally {
					rs_tJDBCInput_15.close();
					stmt_tJDBCInput_15.close();

				}
				globalMap.put("tJDBCInput_15_NB_LINE", nb_line_tJDBCInput_15);

				ok_Hash.put("tJDBCInput_15", true);
				end_Hash.put("tJDBCInput_15", System.currentTimeMillis());

				/**
				 * [tJDBCInput_15 end ] stop
				 */

				/**
				 * [tMap_14 end ] start
				 */

				currentComponent = "tMap_14";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

				// ###############################

				ok_Hash.put("tMap_14", true);
				end_Hash.put("tMap_14", System.currentTimeMillis());

				/**
				 * [tMap_14 end ] stop
				 */

				/**
				 * [tJDBCOutput_14 end ] start
				 */

				currentComponent = "tJDBCOutput_14";

				if (pstmt_tJDBCOutput_14 != null) {

					pstmt_tJDBCOutput_14.close();

				}

				nb_line_deleted_tJDBCOutput_14 = nb_line_deleted_tJDBCOutput_14
						+ deletedCount_tJDBCOutput_14;
				nb_line_update_tJDBCOutput_14 = nb_line_update_tJDBCOutput_14
						+ updatedCount_tJDBCOutput_14;
				nb_line_inserted_tJDBCOutput_14 = nb_line_inserted_tJDBCOutput_14
						+ insertedCount_tJDBCOutput_14;
				nb_line_rejected_tJDBCOutput_14 = nb_line_rejected_tJDBCOutput_14
						+ rejectedCount_tJDBCOutput_14;

				globalMap.put("tJDBCOutput_14_NB_LINE", nb_line_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_14);
				globalMap.put("tJDBCOutput_14_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_14);

				ok_Hash.put("tJDBCOutput_14", true);
				end_Hash.put("tJDBCOutput_14", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_14 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_15:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_14"
			globalMap.remove("tHash_Lookup_row15");

			try {

				/**
				 * [tJDBCInput_15 finally ] start
				 */

				currentComponent = "tJDBCInput_15";

				/**
				 * [tJDBCInput_15 finally ] stop
				 */

				/**
				 * [tMap_14 finally ] start
				 */

				currentComponent = "tMap_14";

				/**
				 * [tMap_14 finally ] stop
				 */

				/**
				 * [tJDBCOutput_14 finally ] start
				 */

				currentComponent = "tJDBCOutput_14";

				/**
				 * [tJDBCOutput_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_15_SUBPROCESS_STATE", 1);
	}

	public static class cluster_configurationStruct implements
			routines.system.IPersistableRow<cluster_configurationStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public String cluster_name;

		public String getCluster_name() {
			return this.cluster_name;
		}

		public String cluster_description;

		public String getCluster_description() {
			return this.cluster_description;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String cpu_name;

		public String getCpu_name() {
			return this.cpu_name;
		}

		public String compatibility_version;

		public String getCompatibility_version() {
			return this.compatibility_version;
		}

		public Integer datacenter_configuration_version;

		public Integer getDatacenter_configuration_version() {
			return this.datacenter_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.cluster_id = (Object) dis.readObject();

					this.cluster_name = readString(dis);

					this.cluster_description = readString(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.cpu_name = readString(dis);

					this.compatibility_version = readString(dis);

					this.datacenter_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.cluster_id);

				// String

				writeString(this.cluster_name, dos);

				// String

				writeString(this.cluster_description, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.cpu_name, dos);

				// String

				writeString(this.compatibility_version, dos);

				// Integer

				writeInteger(this.datacenter_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cluster_id=" + String.valueOf(cluster_id));
			sb.append(",cluster_name=" + cluster_name);
			sb.append(",cluster_description=" + cluster_description);
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",cpu_name=" + cpu_name);
			sb.append(",compatibility_version=" + compatibility_version);
			sb.append(",datacenter_configuration_version="
					+ String.valueOf(datacenter_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(cluster_configurationStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public String cluster_name;

		public String getCluster_name() {
			return this.cluster_name;
		}

		public String cluster_description;

		public String getCluster_description() {
			return this.cluster_description;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		public String cpu_name;

		public String getCpu_name() {
			return this.cpu_name;
		}

		public String compatibility_version;

		public String getCompatibility_version() {
			return this.compatibility_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.cluster_id = (Object) dis.readObject();

					this.cluster_name = readString(dis);

					this.cluster_description = readString(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_join_id = readString(dis);

					this.cpu_name = readString(dis);

					this.compatibility_version = readString(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.cluster_id);

				// String

				writeString(this.cluster_name, dos);

				// String

				writeString(this.cluster_description, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.datacenter_join_id, dos);

				// String

				writeString(this.cpu_name, dos);

				// String

				writeString(this.compatibility_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cluster_id=" + String.valueOf(cluster_id));
			sb.append(",cluster_name=" + cluster_name);
			sb.append(",cluster_description=" + cluster_description);
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_join_id=" + datacenter_join_id);
			sb.append(",cpu_name=" + cpu_name);
			sb.append(",compatibility_version=" + compatibility_version);
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_1Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_1Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public String cluster_name;

		public String getCluster_name() {
			return this.cluster_name;
		}

		public String cluster_description;

		public String getCluster_description() {
			return this.cluster_description;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		public String cpu_name;

		public String getCpu_name() {
			return this.cpu_name;
		}

		public String compatibility_version;

		public String getCompatibility_version() {
			return this.compatibility_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.cluster_id = (Object) dis.readObject();

					this.cluster_name = readString(dis);

					this.cluster_description = readString(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_join_id = readString(dis);

					this.cpu_name = readString(dis);

					this.compatibility_version = readString(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.cluster_id);

				// String

				writeString(this.cluster_name, dos);

				// String

				writeString(this.cluster_description, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.datacenter_join_id, dos);

				// String

				writeString(this.cpu_name, dos);

				// String

				writeString(this.compatibility_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cluster_id=" + String.valueOf(cluster_id));
			sb.append(",cluster_name=" + cluster_name);
			sb.append(",cluster_description=" + cluster_description);
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_join_id=" + datacenter_join_id);
			sb.append(",cpu_name=" + cpu_name);
			sb.append(",compatibility_version=" + compatibility_version);
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_39Process(globalMap);

				row1Struct row1 = new row1Struct();
				cluster_configurationStruct cluster_configuration = new cluster_configurationStruct();

				/**
				 * [tJDBCOutput_1 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_1", false);
				start_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_1";

				int tos_count_tJDBCOutput_1 = 0;

				int nb_line_tJDBCOutput_1 = 0;
				int nb_line_update_tJDBCOutput_1 = 0;
				int nb_line_inserted_tJDBCOutput_1 = 0;
				int nb_line_deleted_tJDBCOutput_1 = 0;
				int nb_line_rejected_tJDBCOutput_1 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_1 = 0;

				int deletedCount_tJDBCOutput_1 = 0;
				int updatedCount_tJDBCOutput_1 = 0;
				int insertedCount_tJDBCOutput_1 = 0;
				int rejectedCount_tJDBCOutput_1 = 0;

				boolean whetherReject_tJDBCOutput_1 = false;

				java.sql.Connection connection_tJDBCOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_1 = 10000;
				int batchSizeCounter_tJDBCOutput_1 = 0;

				String insert_tJDBCOutput_1 = "INSERT INTO "
						+ "cluster_configuration"
						+ " (cluster_id,cluster_name,cluster_description,datacenter_id,cpu_name,compatibility_version,datacenter_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement(insert_tJDBCOutput_1);

				/**
				 * [tJDBCOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) globalMap
						.get("tHash_Lookup_row35"));

				row35Struct row35HashKey = new row35Struct();
				row35Struct row35Default = new row35Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				cluster_configurationStruct cluster_configuration_tmp = new cluster_configurationStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				conn_tJDBCInput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();

				String dbquery_tJDBCInput_1 = "SELECT     cluster_id,     cluster_name,     cluster_description,     datacenter_id,     upper(cast(datacenter_id as char(36))) as datacenter_join_id,    cpu_name,     compatibility_version,     create_date,     update_date  FROM dwh_cluster_configuration_history_view";

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);
				java.sql.ResultSet rs_tJDBCInput_1 = null;
				try {
					rs_tJDBCInput_1 = stmt_tJDBCInput_1
							.executeQuery(dbquery_tJDBCInput_1);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
							.getMetaData();
					int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
							.getColumnCount();

					String tmpContent_tJDBCInput_1 = null;
					int column_index_tJDBCInput_1 = 1;

					while (rs_tJDBCInput_1.next()) {
						nb_line_tJDBCInput_1++;

						column_index_tJDBCInput_1 = 1;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.cluster_id = null;
						} else {

							if (rs_tJDBCInput_1
									.getObject(column_index_tJDBCInput_1) != null) {
								row1.cluster_id = rs_tJDBCInput_1
										.getObject(column_index_tJDBCInput_1);
							} else {
								row1.cluster_id = null;
							}

						}

						column_index_tJDBCInput_1 = 2;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.cluster_name = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.cluster_name = tmpContent_tJDBCInput_1;
							} else {
								row1.cluster_name = null;
							}

						}

						column_index_tJDBCInput_1 = 3;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.cluster_description = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.cluster_description = tmpContent_tJDBCInput_1;
							} else {
								row1.cluster_description = null;
							}

						}

						column_index_tJDBCInput_1 = 4;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.datacenter_id = null;
						} else {

							if (rs_tJDBCInput_1
									.getObject(column_index_tJDBCInput_1) != null) {
								row1.datacenter_id = rs_tJDBCInput_1
										.getObject(column_index_tJDBCInput_1);
							} else {
								row1.datacenter_id = null;
							}

						}

						column_index_tJDBCInput_1 = 5;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.datacenter_join_id = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.datacenter_join_id = tmpContent_tJDBCInput_1;
							} else {
								row1.datacenter_join_id = null;
							}

						}

						column_index_tJDBCInput_1 = 6;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.cpu_name = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.cpu_name = tmpContent_tJDBCInput_1;
							} else {
								row1.cpu_name = null;
							}

						}

						column_index_tJDBCInput_1 = 7;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.compatibility_version = null;
						} else {

							tmpContent_tJDBCInput_1 = rs_tJDBCInput_1
									.getString(column_index_tJDBCInput_1);
							if (tmpContent_tJDBCInput_1 != null) {
								row1.compatibility_version = tmpContent_tJDBCInput_1;
							} else {
								row1.compatibility_version = null;
							}

						}

						column_index_tJDBCInput_1 = 8;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_1 = null;
							try {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getTimestamp(column_index_tJDBCInput_1);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getDate(column_index_tJDBCInput_1);
							}
							row1.create_date = date_tJDBCInput_1;

						}

						column_index_tJDBCInput_1 = 9;

						if (colQtyInRs_tJDBCInput_1 < column_index_tJDBCInput_1) {
							row1.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_1 = null;
							try {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getTimestamp(column_index_tJDBCInput_1);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_1 = rs_tJDBCInput_1
										.getDate(column_index_tJDBCInput_1);
							}
							row1.update_date = date_tJDBCInput_1;

						}

						/**
						 * [tJDBCInput_1 begin ] stop
						 */
						/**
						 * [tJDBCInput_1 main ] start
						 */

						currentComponent = "tJDBCInput_1";

						tos_count_tJDBCInput_1++;

						/**
						 * [tJDBCInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						if (

						(

						row1.update_date == null ? TalendDate.compareDate(
								row1.create_date, context.runTime) <= 0
								: TalendDate.compareDate(row1.update_date,
										context.runTime) <= 0

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row1'

							// /////////////////////////////////////////////
							// Starting Lookup Table "row35"
							// /////////////////////////////////////////////

							boolean forceLooprow35 = false;

							row35Struct row35ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row35HashKey.datacenter_join_id = row1.datacenter_join_id;

								row35HashKey.hashCodeDirty = true;

								tHash_Lookup_row35.lookup(row35HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row35 != null
									&& tHash_Lookup_row35
											.getCount(row35HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row35' and it contains more one result from keys :  row35.datacenter_join_id = '"
								// + row35HashKey.datacenter_join_id + "'");
							} // G 071

							row35Struct row35 = null;

							row35Struct fromLookup_row35 = null;
							row35 = row35Default;

							if (tHash_Lookup_row35 != null
									&& tHash_Lookup_row35.hasNext()) { // G 099

								fromLookup_row35 = tHash_Lookup_row35.next();

							} // G 099

							if (fromLookup_row35 != null) {
								row35 = fromLookup_row35;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								cluster_configuration = null;

								// # Output table : 'cluster_configuration'
								cluster_configuration_tmp.cluster_id = row1.cluster_id;
								cluster_configuration_tmp.cluster_name = StringHandling
										.TRIM(row1.cluster_name);
								cluster_configuration_tmp.cluster_description = StringHandling
										.TRIM(row1.cluster_description);
								cluster_configuration_tmp.datacenter_id = row1.datacenter_id;
								cluster_configuration_tmp.cpu_name = StringHandling
										.TRIM(row1.cpu_name);
								cluster_configuration_tmp.compatibility_version = StringHandling
										.TRIM(row1.compatibility_version);
								cluster_configuration_tmp.datacenter_configuration_version = row35.history_id;
								cluster_configuration_tmp.create_date = row1.create_date;
								cluster_configuration_tmp.update_date = row1.update_date;
								cluster_configuration_tmp.delete_date = null;
								cluster_configuration = cluster_configuration_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "cluster_configuration"
							if (cluster_configuration != null) {

								/**
								 * [tJDBCOutput_1 main ] start
								 */

								currentComponent = "tJDBCOutput_1";

								whetherReject_tJDBCOutput_1 = false;
								if (cluster_configuration.cluster_id == null) {
									pstmt_tJDBCOutput_1.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_1.setObject(1,
											cluster_configuration.cluster_id);
								}

								if (cluster_configuration.cluster_name == null) {
									pstmt_tJDBCOutput_1.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_1.setString(2,
											cluster_configuration.cluster_name);
								}

								if (cluster_configuration.cluster_description == null) {
									pstmt_tJDBCOutput_1.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_1
											.setString(
													3,
													cluster_configuration.cluster_description);
								}

								if (cluster_configuration.datacenter_id == null) {
									pstmt_tJDBCOutput_1.setNull(4,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_1
											.setObject(
													4,
													cluster_configuration.datacenter_id);
								}

								if (cluster_configuration.cpu_name == null) {
									pstmt_tJDBCOutput_1.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_1.setString(5,
											cluster_configuration.cpu_name);
								}

								if (cluster_configuration.compatibility_version == null) {
									pstmt_tJDBCOutput_1.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_1
											.setString(
													6,
													cluster_configuration.compatibility_version);
								}

								if (cluster_configuration.datacenter_configuration_version == null) {
									pstmt_tJDBCOutput_1.setNull(7,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_1
											.setInt(7,
													cluster_configuration.datacenter_configuration_version);
								}

								if (cluster_configuration.create_date != null) {
									pstmt_tJDBCOutput_1
											.setTimestamp(
													8,
													new java.sql.Timestamp(
															cluster_configuration.create_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_1.setNull(8,
											java.sql.Types.DATE);
								}

								if (cluster_configuration.update_date != null) {
									pstmt_tJDBCOutput_1
											.setTimestamp(
													9,
													new java.sql.Timestamp(
															cluster_configuration.update_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_1.setNull(9,
											java.sql.Types.DATE);
								}

								if (cluster_configuration.delete_date != null) {
									pstmt_tJDBCOutput_1
											.setTimestamp(
													10,
													new java.sql.Timestamp(
															cluster_configuration.delete_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_1.setNull(10,
											java.sql.Types.DATE);
								}

								try {
									insertedCount_tJDBCOutput_1 = insertedCount_tJDBCOutput_1
											+ pstmt_tJDBCOutput_1
													.executeUpdate();
									nb_line_tJDBCOutput_1++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_1 = true;
									throw (e);
								}

								tos_count_tJDBCOutput_1++;

								/**
								 * [tJDBCOutput_1 main ] stop
								 */

							} // End of branch "cluster_configuration"

						} // G_TM_M_280 close main tMap filter for table 'row1'

						/**
						 * [tJDBCInput_1 end ] start
						 */

						currentComponent = "tJDBCInput_1";

					}
				} finally {
					rs_tJDBCInput_1.close();
					stmt_tJDBCInput_1.close();

				}
				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row35 != null) {
					tHash_Lookup_row35.endGet();
				}
				globalMap.remove("tHash_Lookup_row35");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tJDBCOutput_1 end ] start
				 */

				currentComponent = "tJDBCOutput_1";

				if (pstmt_tJDBCOutput_1 != null) {

					pstmt_tJDBCOutput_1.close();

				}

				nb_line_deleted_tJDBCOutput_1 = nb_line_deleted_tJDBCOutput_1
						+ deletedCount_tJDBCOutput_1;
				nb_line_update_tJDBCOutput_1 = nb_line_update_tJDBCOutput_1
						+ updatedCount_tJDBCOutput_1;
				nb_line_inserted_tJDBCOutput_1 = nb_line_inserted_tJDBCOutput_1
						+ insertedCount_tJDBCOutput_1;
				nb_line_rejected_tJDBCOutput_1 = nb_line_rejected_tJDBCOutput_1
						+ rejectedCount_tJDBCOutput_1;

				globalMap.put("tJDBCOutput_1_NB_LINE", nb_line_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_1);

				ok_Hash.put("tJDBCOutput_1", true);
				end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_18Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row35");

			try {

				/**
				 * [tJDBCInput_1 finally ] start
				 */

				currentComponent = "tJDBCInput_1";

				/**
				 * [tJDBCInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tJDBCOutput_1 finally ] start
				 */

				currentComponent = "tJDBCOutput_1";

				/**
				 * [tJDBCOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public static class delete_clusterStruct implements
			routines.system.IPersistableRow<delete_clusterStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public String cluster_name;

		public String getCluster_name() {
			return this.cluster_name;
		}

		public String cluster_description;

		public String getCluster_description() {
			return this.cluster_description;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String cpu_name;

		public String getCpu_name() {
			return this.cpu_name;
		}

		public String compatibility_version;

		public String getCompatibility_version() {
			return this.compatibility_version;
		}

		public Integer datacenter_configuration_version;

		public Integer getDatacenter_configuration_version() {
			return this.datacenter_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.cluster_id = (Object) dis.readObject();

					this.cluster_name = readString(dis);

					this.cluster_description = readString(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.cpu_name = readString(dis);

					this.compatibility_version = readString(dis);

					this.datacenter_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.cluster_id);

				// String

				writeString(this.cluster_name, dos);

				// String

				writeString(this.cluster_description, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.cpu_name, dos);

				// String

				writeString(this.compatibility_version, dos);

				// Integer

				writeInteger(this.datacenter_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cluster_id=" + String.valueOf(cluster_id));
			sb.append(",cluster_name=" + cluster_name);
			sb.append(",cluster_description=" + cluster_description);
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",cpu_name=" + cpu_name);
			sb.append(",compatibility_version=" + compatibility_version);
			sb.append(",datacenter_configuration_version="
					+ String.valueOf(datacenter_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_clusterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public String cluster_join_id;

		public String getCluster_join_id() {
			return this.cluster_join_id;
		}

		public String cluster_name;

		public String getCluster_name() {
			return this.cluster_name;
		}

		public String cluster_description;

		public String getCluster_description() {
			return this.cluster_description;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String cpu_name;

		public String getCpu_name() {
			return this.cpu_name;
		}

		public String compatibility_version;

		public String getCompatibility_version() {
			return this.compatibility_version;
		}

		public Integer datacenter_configuration_version;

		public Integer getDatacenter_configuration_version() {
			return this.datacenter_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.cluster_id = (Object) dis.readObject();

					this.cluster_join_id = readString(dis);

					this.cluster_name = readString(dis);

					this.cluster_description = readString(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.cpu_name = readString(dis);

					this.compatibility_version = readString(dis);

					this.datacenter_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.cluster_id);

				// String

				writeString(this.cluster_join_id, dos);

				// String

				writeString(this.cluster_name, dos);

				// String

				writeString(this.cluster_description, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.cpu_name, dos);

				// String

				writeString(this.compatibility_version, dos);

				// Integer

				writeInteger(this.datacenter_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",cluster_join_id=" + cluster_join_id);
			sb.append(",cluster_name=" + cluster_name);
			sb.append(",cluster_description=" + cluster_description);
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",cpu_name=" + cpu_name);
			sb.append(",compatibility_version=" + compatibility_version);
			sb.append(",datacenter_configuration_version="
					+ String.valueOf(datacenter_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_18Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_18Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public String cluster_join_id;

		public String getCluster_join_id() {
			return this.cluster_join_id;
		}

		public String cluster_name;

		public String getCluster_name() {
			return this.cluster_name;
		}

		public String cluster_description;

		public String getCluster_description() {
			return this.cluster_description;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String cpu_name;

		public String getCpu_name() {
			return this.cpu_name;
		}

		public String compatibility_version;

		public String getCompatibility_version() {
			return this.compatibility_version;
		}

		public Integer datacenter_configuration_version;

		public Integer getDatacenter_configuration_version() {
			return this.datacenter_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.cluster_id = (Object) dis.readObject();

					this.cluster_join_id = readString(dis);

					this.cluster_name = readString(dis);

					this.cluster_description = readString(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.cpu_name = readString(dis);

					this.compatibility_version = readString(dis);

					this.datacenter_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.cluster_id);

				// String

				writeString(this.cluster_join_id, dos);

				// String

				writeString(this.cluster_name, dos);

				// String

				writeString(this.cluster_description, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.cpu_name, dos);

				// String

				writeString(this.compatibility_version, dos);

				// Integer

				writeInteger(this.datacenter_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",cluster_join_id=" + cluster_join_id);
			sb.append(",cluster_name=" + cluster_name);
			sb.append(",cluster_description=" + cluster_description);
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",cpu_name=" + cpu_name);
			sb.append(",compatibility_version=" + compatibility_version);
			sb.append(",datacenter_configuration_version="
					+ String.valueOf(datacenter_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_18Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_17Process(globalMap);

				row17Struct row17 = new row17Struct();
				delete_clusterStruct delete_cluster = new delete_clusterStruct();

				/**
				 * [tJDBCOutput_15 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_15", false);
				start_Hash.put("tJDBCOutput_15", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_15";

				int tos_count_tJDBCOutput_15 = 0;

				int nb_line_tJDBCOutput_15 = 0;
				int nb_line_update_tJDBCOutput_15 = 0;
				int nb_line_inserted_tJDBCOutput_15 = 0;
				int nb_line_deleted_tJDBCOutput_15 = 0;
				int nb_line_rejected_tJDBCOutput_15 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_15 = 0;

				int deletedCount_tJDBCOutput_15 = 0;
				int updatedCount_tJDBCOutput_15 = 0;
				int insertedCount_tJDBCOutput_15 = 0;
				int rejectedCount_tJDBCOutput_15 = 0;

				boolean whetherReject_tJDBCOutput_15 = false;

				java.sql.Connection connection_tJDBCOutput_15 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_15 = 10000;
				int batchSizeCounter_tJDBCOutput_15 = 0;

				String insert_tJDBCOutput_15 = "INSERT INTO "
						+ "cluster_configuration"
						+ " (cluster_id,cluster_name,cluster_description,datacenter_id,cpu_name,compatibility_version,datacenter_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_15 = connection_tJDBCOutput_15
						.prepareStatement(insert_tJDBCOutput_15);

				/**
				 * [tJDBCOutput_15 begin ] stop
				 */

				/**
				 * [tMap_15 begin ] start
				 */

				ok_Hash.put("tMap_15", false);
				start_Hash.put("tMap_15", System.currentTimeMillis());

				currentComponent = "tMap_15";

				int tos_count_tMap_15 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_15__Struct {
				}
				Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_clusterStruct delete_cluster_tmp = new delete_clusterStruct();
				// ###############################

				/**
				 * [tMap_15 begin ] stop
				 */

				/**
				 * [tJDBCInput_18 begin ] start
				 */

				ok_Hash.put("tJDBCInput_18", false);
				start_Hash.put("tJDBCInput_18", System.currentTimeMillis());

				currentComponent = "tJDBCInput_18";

				int tos_count_tJDBCInput_18 = 0;

				int nb_line_tJDBCInput_18 = 0;
				java.sql.Connection conn_tJDBCInput_18 = null;
				conn_tJDBCInput_18 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_18 = conn_tJDBCInput_18
						.createStatement();

				String dbquery_tJDBCInput_18 = "SELECT history_id,    		cluster_id,     		upper(cast(cluster_id as char(36))) as cluster_join_id,   		cluster_name,    		cluster_description,    		datacenter_id,    		cpu_name,    		compatibility_version,    		datacenter_configuration_version,    		create_date,    		update_date FROM v3_5_latest_configuration_clusters";

				globalMap.put("tJDBCInput_18_QUERY", dbquery_tJDBCInput_18);
				java.sql.ResultSet rs_tJDBCInput_18 = null;
				try {
					rs_tJDBCInput_18 = stmt_tJDBCInput_18
							.executeQuery(dbquery_tJDBCInput_18);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_18 = rs_tJDBCInput_18
							.getMetaData();
					int colQtyInRs_tJDBCInput_18 = rsmd_tJDBCInput_18
							.getColumnCount();

					String tmpContent_tJDBCInput_18 = null;
					int column_index_tJDBCInput_18 = 1;

					while (rs_tJDBCInput_18.next()) {
						nb_line_tJDBCInput_18++;

						column_index_tJDBCInput_18 = 1;

						if (colQtyInRs_tJDBCInput_18 < column_index_tJDBCInput_18) {
							row17.history_id = null;
						} else {

							if (rs_tJDBCInput_18
									.getObject(column_index_tJDBCInput_18) != null) {
								row17.history_id = rs_tJDBCInput_18
										.getInt(column_index_tJDBCInput_18);
							} else {
								row17.history_id = null;
							}

						}

						column_index_tJDBCInput_18 = 2;

						if (colQtyInRs_tJDBCInput_18 < column_index_tJDBCInput_18) {
							row17.cluster_id = null;
						} else {

							if (rs_tJDBCInput_18
									.getObject(column_index_tJDBCInput_18) != null) {
								row17.cluster_id = rs_tJDBCInput_18
										.getObject(column_index_tJDBCInput_18);
							} else {
								row17.cluster_id = null;
							}

						}

						column_index_tJDBCInput_18 = 3;

						if (colQtyInRs_tJDBCInput_18 < column_index_tJDBCInput_18) {
							row17.cluster_join_id = null;
						} else {

							tmpContent_tJDBCInput_18 = rs_tJDBCInput_18
									.getString(column_index_tJDBCInput_18);
							if (tmpContent_tJDBCInput_18 != null) {
								row17.cluster_join_id = tmpContent_tJDBCInput_18;
							} else {
								row17.cluster_join_id = null;
							}

						}

						column_index_tJDBCInput_18 = 4;

						if (colQtyInRs_tJDBCInput_18 < column_index_tJDBCInput_18) {
							row17.cluster_name = null;
						} else {

							tmpContent_tJDBCInput_18 = rs_tJDBCInput_18
									.getString(column_index_tJDBCInput_18);
							if (tmpContent_tJDBCInput_18 != null) {
								row17.cluster_name = tmpContent_tJDBCInput_18;
							} else {
								row17.cluster_name = null;
							}

						}

						column_index_tJDBCInput_18 = 5;

						if (colQtyInRs_tJDBCInput_18 < column_index_tJDBCInput_18) {
							row17.cluster_description = null;
						} else {

							tmpContent_tJDBCInput_18 = rs_tJDBCInput_18
									.getString(column_index_tJDBCInput_18);
							if (tmpContent_tJDBCInput_18 != null) {
								row17.cluster_description = tmpContent_tJDBCInput_18;
							} else {
								row17.cluster_description = null;
							}

						}

						column_index_tJDBCInput_18 = 6;

						if (colQtyInRs_tJDBCInput_18 < column_index_tJDBCInput_18) {
							row17.datacenter_id = null;
						} else {

							if (rs_tJDBCInput_18
									.getObject(column_index_tJDBCInput_18) != null) {
								row17.datacenter_id = rs_tJDBCInput_18
										.getObject(column_index_tJDBCInput_18);
							} else {
								row17.datacenter_id = null;
							}

						}

						column_index_tJDBCInput_18 = 7;

						if (colQtyInRs_tJDBCInput_18 < column_index_tJDBCInput_18) {
							row17.cpu_name = null;
						} else {

							tmpContent_tJDBCInput_18 = rs_tJDBCInput_18
									.getString(column_index_tJDBCInput_18);
							if (tmpContent_tJDBCInput_18 != null) {
								row17.cpu_name = tmpContent_tJDBCInput_18;
							} else {
								row17.cpu_name = null;
							}

						}

						column_index_tJDBCInput_18 = 8;

						if (colQtyInRs_tJDBCInput_18 < column_index_tJDBCInput_18) {
							row17.compatibility_version = null;
						} else {

							tmpContent_tJDBCInput_18 = rs_tJDBCInput_18
									.getString(column_index_tJDBCInput_18);
							if (tmpContent_tJDBCInput_18 != null) {
								row17.compatibility_version = tmpContent_tJDBCInput_18;
							} else {
								row17.compatibility_version = null;
							}

						}

						column_index_tJDBCInput_18 = 9;

						if (colQtyInRs_tJDBCInput_18 < column_index_tJDBCInput_18) {
							row17.datacenter_configuration_version = null;
						} else {

							if (rs_tJDBCInput_18
									.getObject(column_index_tJDBCInput_18) != null) {
								row17.datacenter_configuration_version = rs_tJDBCInput_18
										.getInt(column_index_tJDBCInput_18);
							} else {
								row17.datacenter_configuration_version = null;
							}

						}

						column_index_tJDBCInput_18 = 10;

						if (colQtyInRs_tJDBCInput_18 < column_index_tJDBCInput_18) {
							row17.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_18 = null;
							try {
								date_tJDBCInput_18 = rs_tJDBCInput_18
										.getTimestamp(column_index_tJDBCInput_18);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_18 = rs_tJDBCInput_18
										.getDate(column_index_tJDBCInput_18);
							}
							row17.create_date = date_tJDBCInput_18;

						}

						column_index_tJDBCInput_18 = 11;

						if (colQtyInRs_tJDBCInput_18 < column_index_tJDBCInput_18) {
							row17.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_18 = null;
							try {
								date_tJDBCInput_18 = rs_tJDBCInput_18
										.getTimestamp(column_index_tJDBCInput_18);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_18 = rs_tJDBCInput_18
										.getDate(column_index_tJDBCInput_18);
							}
							row17.update_date = date_tJDBCInput_18;

						}

						/**
						 * [tJDBCInput_18 begin ] stop
						 */
						/**
						 * [tJDBCInput_18 main ] start
						 */

						currentComponent = "tJDBCInput_18";

						tos_count_tJDBCInput_18++;

						/**
						 * [tJDBCInput_18 main ] stop
						 */

						/**
						 * [tMap_15 main ] start
						 */

						currentComponent = "tMap_15";

						boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_15 = false;
						boolean mainRowRejected_tMap_15 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row16"
						// /////////////////////////////////////////////

						boolean forceLooprow16 = false;

						row16Struct row16ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_15) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_15 = false;

							row16HashKey.cluster_join_id = row17.cluster_join_id;

							row16HashKey.hashCodeDirty = true;

							tHash_Lookup_row16.lookup(row16HashKey);

							if (!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_15 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row16 != null
								&& tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.cluster_join_id = '"
							// + row16HashKey.cluster_join_id + "'");
						} // G 071

						row16Struct row16 = null;

						row16Struct fromLookup_row16 = null;
						row16 = row16Default;

						if (tHash_Lookup_row16 != null
								&& tHash_Lookup_row16.hasNext()) { // G 099

							fromLookup_row16 = tHash_Lookup_row16.next();

						} // G 099

						if (fromLookup_row16 != null) {
							row16 = fromLookup_row16;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
							// ###############################
							// # Output tables

							delete_cluster = null;

							if (!rejectedInnerJoin_tMap_15) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'delete_cluster'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_15) {
								delete_cluster_tmp.cluster_id = row17.cluster_id;
								delete_cluster_tmp.cluster_name = row17.cluster_name;
								delete_cluster_tmp.cluster_description = row17.cluster_description;
								delete_cluster_tmp.datacenter_id = row17.datacenter_id;
								delete_cluster_tmp.cpu_name = row17.cpu_name;
								delete_cluster_tmp.compatibility_version = row17.compatibility_version;
								delete_cluster_tmp.datacenter_configuration_version = row17.datacenter_configuration_version;
								delete_cluster_tmp.create_date = row17.create_date;
								delete_cluster_tmp.update_date = context.runTime;
								delete_cluster_tmp.delete_date = context.runTime;
								delete_cluster = delete_cluster_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_15 = false;

						tos_count_tMap_15++;

						/**
						 * [tMap_15 main ] stop
						 */
						// Start of branch "delete_cluster"
						if (delete_cluster != null) {

							/**
							 * [tJDBCOutput_15 main ] start
							 */

							currentComponent = "tJDBCOutput_15";

							whetherReject_tJDBCOutput_15 = false;
							if (delete_cluster.cluster_id == null) {
								pstmt_tJDBCOutput_15.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_15.setObject(1,
										delete_cluster.cluster_id);
							}

							if (delete_cluster.cluster_name == null) {
								pstmt_tJDBCOutput_15.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_15.setString(2,
										delete_cluster.cluster_name);
							}

							if (delete_cluster.cluster_description == null) {
								pstmt_tJDBCOutput_15.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_15.setString(3,
										delete_cluster.cluster_description);
							}

							if (delete_cluster.datacenter_id == null) {
								pstmt_tJDBCOutput_15.setNull(4,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_15.setObject(4,
										delete_cluster.datacenter_id);
							}

							if (delete_cluster.cpu_name == null) {
								pstmt_tJDBCOutput_15.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_15.setString(5,
										delete_cluster.cpu_name);
							}

							if (delete_cluster.compatibility_version == null) {
								pstmt_tJDBCOutput_15.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_15.setString(6,
										delete_cluster.compatibility_version);
							}

							if (delete_cluster.datacenter_configuration_version == null) {
								pstmt_tJDBCOutput_15.setNull(7,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_15
										.setInt(7,
												delete_cluster.datacenter_configuration_version);
							}

							if (delete_cluster.create_date != null) {
								pstmt_tJDBCOutput_15.setTimestamp(
										8,
										new java.sql.Timestamp(
												delete_cluster.create_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_15.setNull(8,
										java.sql.Types.DATE);
							}

							if (delete_cluster.update_date != null) {
								pstmt_tJDBCOutput_15.setTimestamp(
										9,
										new java.sql.Timestamp(
												delete_cluster.update_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_15.setNull(9,
										java.sql.Types.DATE);
							}

							if (delete_cluster.delete_date != null) {
								pstmt_tJDBCOutput_15.setTimestamp(
										10,
										new java.sql.Timestamp(
												delete_cluster.delete_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_15.setNull(10,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tJDBCOutput_15 = insertedCount_tJDBCOutput_15
										+ pstmt_tJDBCOutput_15.executeUpdate();
								nb_line_tJDBCOutput_15++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_15 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_15++;

							/**
							 * [tJDBCOutput_15 main ] stop
							 */

						} // End of branch "delete_cluster"

						/**
						 * [tJDBCInput_18 end ] start
						 */

						currentComponent = "tJDBCInput_18";

					}
				} finally {
					rs_tJDBCInput_18.close();
					stmt_tJDBCInput_18.close();

				}
				globalMap.put("tJDBCInput_18_NB_LINE", nb_line_tJDBCInput_18);

				ok_Hash.put("tJDBCInput_18", true);
				end_Hash.put("tJDBCInput_18", System.currentTimeMillis());

				/**
				 * [tJDBCInput_18 end ] stop
				 */

				/**
				 * [tMap_15 end ] start
				 */

				currentComponent = "tMap_15";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

				// ###############################

				ok_Hash.put("tMap_15", true);
				end_Hash.put("tMap_15", System.currentTimeMillis());

				/**
				 * [tMap_15 end ] stop
				 */

				/**
				 * [tJDBCOutput_15 end ] start
				 */

				currentComponent = "tJDBCOutput_15";

				if (pstmt_tJDBCOutput_15 != null) {

					pstmt_tJDBCOutput_15.close();

				}

				nb_line_deleted_tJDBCOutput_15 = nb_line_deleted_tJDBCOutput_15
						+ deletedCount_tJDBCOutput_15;
				nb_line_update_tJDBCOutput_15 = nb_line_update_tJDBCOutput_15
						+ updatedCount_tJDBCOutput_15;
				nb_line_inserted_tJDBCOutput_15 = nb_line_inserted_tJDBCOutput_15
						+ insertedCount_tJDBCOutput_15;
				nb_line_rejected_tJDBCOutput_15 = nb_line_rejected_tJDBCOutput_15
						+ rejectedCount_tJDBCOutput_15;

				globalMap.put("tJDBCOutput_15_NB_LINE", nb_line_tJDBCOutput_15);
				globalMap.put("tJDBCOutput_15_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_15);
				globalMap.put("tJDBCOutput_15_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_15);
				globalMap.put("tJDBCOutput_15_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_15);
				globalMap.put("tJDBCOutput_15_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_15);

				ok_Hash.put("tJDBCOutput_15", true);
				end_Hash.put("tJDBCOutput_15", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_15 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_18:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_15"
			globalMap.remove("tHash_Lookup_row16");

			try {

				/**
				 * [tJDBCInput_18 finally ] start
				 */

				currentComponent = "tJDBCInput_18";

				/**
				 * [tJDBCInput_18 finally ] stop
				 */

				/**
				 * [tMap_15 finally ] start
				 */

				currentComponent = "tMap_15";

				/**
				 * [tMap_15 finally ] stop
				 */

				/**
				 * [tJDBCOutput_15 finally ] start
				 */

				currentComponent = "tJDBCOutput_15";

				/**
				 * [tJDBCOutput_15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_18_SUBPROCESS_STATE", 1);
	}

	public static class storage_configurationStruct implements
			routines.system.IPersistableRow<storage_configurationStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public String storage_domain_name;

		public String getStorage_domain_name() {
			return this.storage_domain_name;
		}

		public short storage_domain_type;

		public short getStorage_domain_type() {
			return this.storage_domain_type;
		}

		public short storage_type;

		public short getStorage_type() {
			return this.storage_type;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_domain_id = (Object) dis.readObject();

					this.storage_domain_name = readString(dis);

					this.storage_domain_type = dis.readShort();

					this.storage_type = dis.readShort();

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.storage_domain_id);

				// String

				writeString(this.storage_domain_name, dos);

				// short

				dos.writeShort(this.storage_domain_type);

				// short

				dos.writeShort(this.storage_type);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",storage_domain_name=" + storage_domain_name);
			sb.append(",storage_domain_type="
					+ String.valueOf(storage_domain_type));
			sb.append(",storage_type=" + String.valueOf(storage_type));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(storage_configurationStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public String storage_domain_name;

		public String getStorage_domain_name() {
			return this.storage_domain_name;
		}

		public Short storage_domain_type;

		public Short getStorage_domain_type() {
			return this.storage_domain_type;
		}

		public Short storage_type;

		public Short getStorage_type() {
			return this.storage_type;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_domain_id = (Object) dis.readObject();

					this.storage_domain_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.storage_domain_type = null;
					} else {
						this.storage_domain_type = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.storage_type = null;
					} else {
						this.storage_type = dis.readShort();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.storage_domain_id);

				// String

				writeString(this.storage_domain_name, dos);

				// Short

				if (this.storage_domain_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.storage_domain_type);
				}

				// Short

				if (this.storage_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.storage_type);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",storage_domain_name=" + storage_domain_name);
			sb.append(",storage_domain_type="
					+ String.valueOf(storage_domain_type));
			sb.append(",storage_type=" + String.valueOf(storage_type));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				storage_configurationStruct storage_configuration = new storage_configurationStruct();

				/**
				 * [tJDBCOutput_3 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_3", false);
				start_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_3";

				int tos_count_tJDBCOutput_3 = 0;

				int nb_line_tJDBCOutput_3 = 0;
				int nb_line_update_tJDBCOutput_3 = 0;
				int nb_line_inserted_tJDBCOutput_3 = 0;
				int nb_line_deleted_tJDBCOutput_3 = 0;
				int nb_line_rejected_tJDBCOutput_3 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_3 = 0;

				int deletedCount_tJDBCOutput_3 = 0;
				int updatedCount_tJDBCOutput_3 = 0;
				int insertedCount_tJDBCOutput_3 = 0;
				int rejectedCount_tJDBCOutput_3 = 0;

				boolean whetherReject_tJDBCOutput_3 = false;

				java.sql.Connection connection_tJDBCOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_3 = 10000;
				int batchSizeCounter_tJDBCOutput_3 = 0;

				String insert_tJDBCOutput_3 = "INSERT INTO "
						+ "storage_domain_configuration"
						+ " (storage_domain_id,storage_domain_name,storage_domain_type,storage_type,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_3 = connection_tJDBCOutput_3
						.prepareStatement(insert_tJDBCOutput_3);

				/**
				 * [tJDBCOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				storage_configurationStruct storage_configuration_tmp = new storage_configurationStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tJDBCInput_3 begin ] start
				 */

				ok_Hash.put("tJDBCInput_3", false);
				start_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				currentComponent = "tJDBCInput_3";

				int tos_count_tJDBCInput_3 = 0;

				int nb_line_tJDBCInput_3 = 0;
				java.sql.Connection conn_tJDBCInput_3 = null;
				conn_tJDBCInput_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_3 = conn_tJDBCInput_3
						.createStatement();

				String dbquery_tJDBCInput_3 = "SELECT    storage_domain_id,    storage_domain_name,    storage_domain_type,    storage_type,    create_date,    update_date FROM dwh_storage_domain_configuration_history_view";

				globalMap.put("tJDBCInput_3_QUERY", dbquery_tJDBCInput_3);
				java.sql.ResultSet rs_tJDBCInput_3 = null;
				try {
					rs_tJDBCInput_3 = stmt_tJDBCInput_3
							.executeQuery(dbquery_tJDBCInput_3);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_3 = rs_tJDBCInput_3
							.getMetaData();
					int colQtyInRs_tJDBCInput_3 = rsmd_tJDBCInput_3
							.getColumnCount();

					String tmpContent_tJDBCInput_3 = null;
					int column_index_tJDBCInput_3 = 1;

					while (rs_tJDBCInput_3.next()) {
						nb_line_tJDBCInput_3++;

						column_index_tJDBCInput_3 = 1;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row5.storage_domain_id = null;
						} else {

							if (rs_tJDBCInput_3
									.getObject(column_index_tJDBCInput_3) != null) {
								row5.storage_domain_id = rs_tJDBCInput_3
										.getObject(column_index_tJDBCInput_3);
							} else {
								row5.storage_domain_id = null;
							}

						}

						column_index_tJDBCInput_3 = 2;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row5.storage_domain_name = null;
						} else {

							tmpContent_tJDBCInput_3 = rs_tJDBCInput_3
									.getString(column_index_tJDBCInput_3);
							if (tmpContent_tJDBCInput_3 != null) {
								row5.storage_domain_name = tmpContent_tJDBCInput_3;
							} else {
								row5.storage_domain_name = null;
							}

						}

						column_index_tJDBCInput_3 = 3;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row5.storage_domain_type = null;
						} else {

							if (rs_tJDBCInput_3
									.getObject(column_index_tJDBCInput_3) != null) {
								row5.storage_domain_type = rs_tJDBCInput_3
										.getShort(column_index_tJDBCInput_3);
							} else {
								row5.storage_domain_type = null;
							}

						}

						column_index_tJDBCInput_3 = 4;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row5.storage_type = null;
						} else {

							if (rs_tJDBCInput_3
									.getObject(column_index_tJDBCInput_3) != null) {
								row5.storage_type = rs_tJDBCInput_3
										.getShort(column_index_tJDBCInput_3);
							} else {
								row5.storage_type = null;
							}

						}

						column_index_tJDBCInput_3 = 5;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row5.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(column_index_tJDBCInput_3);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getDate(column_index_tJDBCInput_3);
							}
							row5.create_date = date_tJDBCInput_3;

						}

						column_index_tJDBCInput_3 = 6;

						if (colQtyInRs_tJDBCInput_3 < column_index_tJDBCInput_3) {
							row5.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_3 = null;
							try {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getTimestamp(column_index_tJDBCInput_3);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_3 = rs_tJDBCInput_3
										.getDate(column_index_tJDBCInput_3);
							}
							row5.update_date = date_tJDBCInput_3;

						}

						/**
						 * [tJDBCInput_3 begin ] stop
						 */
						/**
						 * [tJDBCInput_3 main ] start
						 */

						currentComponent = "tJDBCInput_3";

						tos_count_tJDBCInput_3++;

						/**
						 * [tJDBCInput_3 main ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						if (

						(

						row5.update_date == null ? TalendDate.compareDate(
								row5.create_date, context.runTime) <= 0
								: TalendDate.compareDate(row5.update_date,
										context.runTime) <= 0

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row5'
							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								storage_configuration = null;

								// # Output table : 'storage_configuration'
								storage_configuration_tmp.storage_domain_id = row5.storage_domain_id;
								storage_configuration_tmp.storage_domain_name = StringHandling
										.TRIM(row5.storage_domain_name);
								storage_configuration_tmp.storage_domain_type = row5.storage_domain_type;
								storage_configuration_tmp.storage_type = row5.storage_type;
								storage_configuration_tmp.create_date = row5.create_date;
								storage_configuration_tmp.update_date = row5.update_date;
								storage_configuration_tmp.delete_date = null;
								storage_configuration = storage_configuration_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */
							// Start of branch "storage_configuration"
							if (storage_configuration != null) {

								/**
								 * [tJDBCOutput_3 main ] start
								 */

								currentComponent = "tJDBCOutput_3";

								whetherReject_tJDBCOutput_3 = false;
								if (storage_configuration.storage_domain_id == null) {
									pstmt_tJDBCOutput_3.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_3
											.setObject(
													1,
													storage_configuration.storage_domain_id);
								}

								if (storage_configuration.storage_domain_name == null) {
									pstmt_tJDBCOutput_3.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_3
											.setString(
													2,
													storage_configuration.storage_domain_name);
								}

								pstmt_tJDBCOutput_3
										.setShort(
												3,
												storage_configuration.storage_domain_type);

								pstmt_tJDBCOutput_3.setShort(4,
										storage_configuration.storage_type);

								if (storage_configuration.create_date != null) {
									pstmt_tJDBCOutput_3
											.setTimestamp(
													5,
													new java.sql.Timestamp(
															storage_configuration.create_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_3.setNull(5,
											java.sql.Types.DATE);
								}

								if (storage_configuration.update_date != null) {
									pstmt_tJDBCOutput_3
											.setTimestamp(
													6,
													new java.sql.Timestamp(
															storage_configuration.update_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_3.setNull(6,
											java.sql.Types.DATE);
								}

								if (storage_configuration.delete_date != null) {
									pstmt_tJDBCOutput_3
											.setTimestamp(
													7,
													new java.sql.Timestamp(
															storage_configuration.delete_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_3.setNull(7,
											java.sql.Types.DATE);
								}

								try {
									insertedCount_tJDBCOutput_3 = insertedCount_tJDBCOutput_3
											+ pstmt_tJDBCOutput_3
													.executeUpdate();
									nb_line_tJDBCOutput_3++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_3 = true;
									throw (e);
								}

								tos_count_tJDBCOutput_3++;

								/**
								 * [tJDBCOutput_3 main ] stop
								 */

							} // End of branch "storage_configuration"

						} // G_TM_M_280 close main tMap filter for table 'row5'

						/**
						 * [tJDBCInput_3 end ] start
						 */

						currentComponent = "tJDBCInput_3";

					}
				} finally {
					rs_tJDBCInput_3.close();
					stmt_tJDBCInput_3.close();

				}
				globalMap.put("tJDBCInput_3_NB_LINE", nb_line_tJDBCInput_3);

				ok_Hash.put("tJDBCInput_3", true);
				end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				/**
				 * [tJDBCInput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tJDBCOutput_3 end ] start
				 */

				currentComponent = "tJDBCOutput_3";

				if (pstmt_tJDBCOutput_3 != null) {

					pstmt_tJDBCOutput_3.close();

				}

				nb_line_deleted_tJDBCOutput_3 = nb_line_deleted_tJDBCOutput_3
						+ deletedCount_tJDBCOutput_3;
				nb_line_update_tJDBCOutput_3 = nb_line_update_tJDBCOutput_3
						+ updatedCount_tJDBCOutput_3;
				nb_line_inserted_tJDBCOutput_3 = nb_line_inserted_tJDBCOutput_3
						+ insertedCount_tJDBCOutput_3;
				nb_line_rejected_tJDBCOutput_3 = nb_line_rejected_tJDBCOutput_3
						+ rejectedCount_tJDBCOutput_3;

				globalMap.put("tJDBCOutput_3_NB_LINE", nb_line_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_3);

				ok_Hash.put("tJDBCOutput_3", true);
				end_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_20Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_3 finally ] start
				 */

				currentComponent = "tJDBCInput_3";

				/**
				 * [tJDBCInput_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tJDBCOutput_3 finally ] start
				 */

				currentComponent = "tJDBCOutput_3";

				/**
				 * [tJDBCOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 1);
	}

	public static class delete_storageStruct implements
			routines.system.IPersistableRow<delete_storageStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public String storage_domain_name;

		public String getStorage_domain_name() {
			return this.storage_domain_name;
		}

		public short storage_domain_type;

		public short getStorage_domain_type() {
			return this.storage_domain_type;
		}

		public short storage_type;

		public short getStorage_type() {
			return this.storage_type;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_domain_id = (Object) dis.readObject();

					this.storage_domain_name = readString(dis);

					this.storage_domain_type = dis.readShort();

					this.storage_type = dis.readShort();

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.storage_domain_id);

				// String

				writeString(this.storage_domain_name, dos);

				// short

				dos.writeShort(this.storage_domain_type);

				// short

				dos.writeShort(this.storage_type);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",storage_domain_name=" + storage_domain_name);
			sb.append(",storage_domain_type="
					+ String.valueOf(storage_domain_type));
			sb.append(",storage_type=" + String.valueOf(storage_type));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_storageStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public String storage_domain_join_id;

		public String getStorage_domain_join_id() {
			return this.storage_domain_join_id;
		}

		public String storage_domain_name;

		public String getStorage_domain_name() {
			return this.storage_domain_name;
		}

		public Short storage_domain_type;

		public Short getStorage_domain_type() {
			return this.storage_domain_type;
		}

		public Short storage_type;

		public Short getStorage_type() {
			return this.storage_type;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.storage_domain_id = (Object) dis.readObject();

					this.storage_domain_join_id = readString(dis);

					this.storage_domain_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.storage_domain_type = null;
					} else {
						this.storage_domain_type = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.storage_type = null;
					} else {
						this.storage_type = dis.readShort();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.storage_domain_id);

				// String

				writeString(this.storage_domain_join_id, dos);

				// String

				writeString(this.storage_domain_name, dos);

				// Short

				if (this.storage_domain_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.storage_domain_type);
				}

				// Short

				if (this.storage_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.storage_type);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",storage_domain_join_id=" + storage_domain_join_id);
			sb.append(",storage_domain_name=" + storage_domain_name);
			sb.append(",storage_domain_type="
					+ String.valueOf(storage_domain_type));
			sb.append(",storage_type=" + String.valueOf(storage_type));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_20Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_20Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public String storage_domain_join_id;

		public String getStorage_domain_join_id() {
			return this.storage_domain_join_id;
		}

		public String storage_domain_name;

		public String getStorage_domain_name() {
			return this.storage_domain_name;
		}

		public Short storage_domain_type;

		public Short getStorage_domain_type() {
			return this.storage_domain_type;
		}

		public Short storage_type;

		public Short getStorage_type() {
			return this.storage_type;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.storage_domain_id = (Object) dis.readObject();

					this.storage_domain_join_id = readString(dis);

					this.storage_domain_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.storage_domain_type = null;
					} else {
						this.storage_domain_type = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.storage_type = null;
					} else {
						this.storage_type = dis.readShort();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.storage_domain_id);

				// String

				writeString(this.storage_domain_join_id, dos);

				// String

				writeString(this.storage_domain_name, dos);

				// Short

				if (this.storage_domain_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.storage_domain_type);
				}

				// Short

				if (this.storage_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.storage_type);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",storage_domain_join_id=" + storage_domain_join_id);
			sb.append(",storage_domain_name=" + storage_domain_name);
			sb.append(",storage_domain_type="
					+ String.valueOf(storage_domain_type));
			sb.append(",storage_type=" + String.valueOf(storage_type));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_20Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_19Process(globalMap);

				row19Struct row19 = new row19Struct();
				delete_storageStruct delete_storage = new delete_storageStruct();

				/**
				 * [tJDBCOutput_16 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_16", false);
				start_Hash.put("tJDBCOutput_16", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_16";

				int tos_count_tJDBCOutput_16 = 0;

				int nb_line_tJDBCOutput_16 = 0;
				int nb_line_update_tJDBCOutput_16 = 0;
				int nb_line_inserted_tJDBCOutput_16 = 0;
				int nb_line_deleted_tJDBCOutput_16 = 0;
				int nb_line_rejected_tJDBCOutput_16 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_16 = 0;

				int deletedCount_tJDBCOutput_16 = 0;
				int updatedCount_tJDBCOutput_16 = 0;
				int insertedCount_tJDBCOutput_16 = 0;
				int rejectedCount_tJDBCOutput_16 = 0;

				boolean whetherReject_tJDBCOutput_16 = false;

				java.sql.Connection connection_tJDBCOutput_16 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_16 = 10000;
				int batchSizeCounter_tJDBCOutput_16 = 0;

				String insert_tJDBCOutput_16 = "INSERT INTO "
						+ "storage_domain_configuration"
						+ " (storage_domain_id,storage_domain_name,storage_domain_type,storage_type,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_16 = connection_tJDBCOutput_16
						.prepareStatement(insert_tJDBCOutput_16);

				/**
				 * [tJDBCOutput_16 begin ] stop
				 */

				/**
				 * [tMap_16 begin ] start
				 */

				ok_Hash.put("tMap_16", false);
				start_Hash.put("tMap_16", System.currentTimeMillis());

				currentComponent = "tMap_16";

				int tos_count_tMap_16 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_16__Struct {
				}
				Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_storageStruct delete_storage_tmp = new delete_storageStruct();
				// ###############################

				/**
				 * [tMap_16 begin ] stop
				 */

				/**
				 * [tJDBCInput_20 begin ] start
				 */

				ok_Hash.put("tJDBCInput_20", false);
				start_Hash.put("tJDBCInput_20", System.currentTimeMillis());

				currentComponent = "tJDBCInput_20";

				int tos_count_tJDBCInput_20 = 0;

				int nb_line_tJDBCInput_20 = 0;
				java.sql.Connection conn_tJDBCInput_20 = null;
				conn_tJDBCInput_20 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_20 = conn_tJDBCInput_20
						.createStatement();

				String dbquery_tJDBCInput_20 = "SELECT history_id,    		storage_domain_id,   		upper(cast(storage_domain_id as char(36))) as storage_domain_join_id,  		storage_domain_name,   		storage_domain_type,    		storage_type,    		create_date,    		update_date FROM v3_5_latest_configuration_storage_domains";

				globalMap.put("tJDBCInput_20_QUERY", dbquery_tJDBCInput_20);
				java.sql.ResultSet rs_tJDBCInput_20 = null;
				try {
					rs_tJDBCInput_20 = stmt_tJDBCInput_20
							.executeQuery(dbquery_tJDBCInput_20);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_20 = rs_tJDBCInput_20
							.getMetaData();
					int colQtyInRs_tJDBCInput_20 = rsmd_tJDBCInput_20
							.getColumnCount();

					String tmpContent_tJDBCInput_20 = null;
					int column_index_tJDBCInput_20 = 1;

					while (rs_tJDBCInput_20.next()) {
						nb_line_tJDBCInput_20++;

						column_index_tJDBCInput_20 = 1;

						if (colQtyInRs_tJDBCInput_20 < column_index_tJDBCInput_20) {
							row19.history_id = null;
						} else {

							if (rs_tJDBCInput_20
									.getObject(column_index_tJDBCInput_20) != null) {
								row19.history_id = rs_tJDBCInput_20
										.getInt(column_index_tJDBCInput_20);
							} else {
								row19.history_id = null;
							}

						}

						column_index_tJDBCInput_20 = 2;

						if (colQtyInRs_tJDBCInput_20 < column_index_tJDBCInput_20) {
							row19.storage_domain_id = null;
						} else {

							if (rs_tJDBCInput_20
									.getObject(column_index_tJDBCInput_20) != null) {
								row19.storage_domain_id = rs_tJDBCInput_20
										.getObject(column_index_tJDBCInput_20);
							} else {
								row19.storage_domain_id = null;
							}

						}

						column_index_tJDBCInput_20 = 3;

						if (colQtyInRs_tJDBCInput_20 < column_index_tJDBCInput_20) {
							row19.storage_domain_join_id = null;
						} else {

							tmpContent_tJDBCInput_20 = rs_tJDBCInput_20
									.getString(column_index_tJDBCInput_20);
							if (tmpContent_tJDBCInput_20 != null) {
								row19.storage_domain_join_id = tmpContent_tJDBCInput_20;
							} else {
								row19.storage_domain_join_id = null;
							}

						}

						column_index_tJDBCInput_20 = 4;

						if (colQtyInRs_tJDBCInput_20 < column_index_tJDBCInput_20) {
							row19.storage_domain_name = null;
						} else {

							tmpContent_tJDBCInput_20 = rs_tJDBCInput_20
									.getString(column_index_tJDBCInput_20);
							if (tmpContent_tJDBCInput_20 != null) {
								row19.storage_domain_name = tmpContent_tJDBCInput_20;
							} else {
								row19.storage_domain_name = null;
							}

						}

						column_index_tJDBCInput_20 = 5;

						if (colQtyInRs_tJDBCInput_20 < column_index_tJDBCInput_20) {
							row19.storage_domain_type = null;
						} else {

							if (rs_tJDBCInput_20
									.getObject(column_index_tJDBCInput_20) != null) {
								row19.storage_domain_type = rs_tJDBCInput_20
										.getShort(column_index_tJDBCInput_20);
							} else {
								row19.storage_domain_type = null;
							}

						}

						column_index_tJDBCInput_20 = 6;

						if (colQtyInRs_tJDBCInput_20 < column_index_tJDBCInput_20) {
							row19.storage_type = null;
						} else {

							if (rs_tJDBCInput_20
									.getObject(column_index_tJDBCInput_20) != null) {
								row19.storage_type = rs_tJDBCInput_20
										.getShort(column_index_tJDBCInput_20);
							} else {
								row19.storage_type = null;
							}

						}

						column_index_tJDBCInput_20 = 7;

						if (colQtyInRs_tJDBCInput_20 < column_index_tJDBCInput_20) {
							row19.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_20 = null;
							try {
								date_tJDBCInput_20 = rs_tJDBCInput_20
										.getTimestamp(column_index_tJDBCInput_20);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_20 = rs_tJDBCInput_20
										.getDate(column_index_tJDBCInput_20);
							}
							row19.create_date = date_tJDBCInput_20;

						}

						column_index_tJDBCInput_20 = 8;

						if (colQtyInRs_tJDBCInput_20 < column_index_tJDBCInput_20) {
							row19.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_20 = null;
							try {
								date_tJDBCInput_20 = rs_tJDBCInput_20
										.getTimestamp(column_index_tJDBCInput_20);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_20 = rs_tJDBCInput_20
										.getDate(column_index_tJDBCInput_20);
							}
							row19.update_date = date_tJDBCInput_20;

						}

						/**
						 * [tJDBCInput_20 begin ] stop
						 */
						/**
						 * [tJDBCInput_20 main ] start
						 */

						currentComponent = "tJDBCInput_20";

						tos_count_tJDBCInput_20++;

						/**
						 * [tJDBCInput_20 main ] stop
						 */

						/**
						 * [tMap_16 main ] start
						 */

						currentComponent = "tMap_16";

						boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_16 = false;
						boolean mainRowRejected_tMap_16 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row18"
						// /////////////////////////////////////////////

						boolean forceLooprow18 = false;

						row18Struct row18ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_16) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_16 = false;

							row18HashKey.storage_domain_join_id = row19.storage_domain_join_id;

							row18HashKey.hashCodeDirty = true;

							tHash_Lookup_row18.lookup(row18HashKey);

							if (!tHash_Lookup_row18.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_16 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row18 != null
								&& tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.storage_domain_join_id = '"
							// + row18HashKey.storage_domain_join_id + "'");
						} // G 071

						row18Struct row18 = null;

						row18Struct fromLookup_row18 = null;
						row18 = row18Default;

						if (tHash_Lookup_row18 != null
								&& tHash_Lookup_row18.hasNext()) { // G 099

							fromLookup_row18 = tHash_Lookup_row18.next();

						} // G 099

						if (fromLookup_row18 != null) {
							row18 = fromLookup_row18;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
							// ###############################
							// # Output tables

							delete_storage = null;

							if (!rejectedInnerJoin_tMap_16) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'delete_storage'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_16) {
								delete_storage_tmp.storage_domain_id = row19.storage_domain_id;
								delete_storage_tmp.storage_domain_name = row19.storage_domain_name;
								delete_storage_tmp.storage_domain_type = row19.storage_domain_type;
								delete_storage_tmp.storage_type = row19.storage_type;
								delete_storage_tmp.create_date = row19.create_date;
								delete_storage_tmp.update_date = context.runTime;
								delete_storage_tmp.delete_date = context.runTime;
								delete_storage = delete_storage_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_16 = false;

						tos_count_tMap_16++;

						/**
						 * [tMap_16 main ] stop
						 */
						// Start of branch "delete_storage"
						if (delete_storage != null) {

							/**
							 * [tJDBCOutput_16 main ] start
							 */

							currentComponent = "tJDBCOutput_16";

							whetherReject_tJDBCOutput_16 = false;
							if (delete_storage.storage_domain_id == null) {
								pstmt_tJDBCOutput_16.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_16.setObject(1,
										delete_storage.storage_domain_id);
							}

							if (delete_storage.storage_domain_name == null) {
								pstmt_tJDBCOutput_16.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_16.setString(2,
										delete_storage.storage_domain_name);
							}

							pstmt_tJDBCOutput_16.setShort(3,
									delete_storage.storage_domain_type);

							pstmt_tJDBCOutput_16.setShort(4,
									delete_storage.storage_type);

							if (delete_storage.create_date != null) {
								pstmt_tJDBCOutput_16.setTimestamp(
										5,
										new java.sql.Timestamp(
												delete_storage.create_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_16.setNull(5,
										java.sql.Types.DATE);
							}

							if (delete_storage.update_date != null) {
								pstmt_tJDBCOutput_16.setTimestamp(
										6,
										new java.sql.Timestamp(
												delete_storage.update_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_16.setNull(6,
										java.sql.Types.DATE);
							}

							if (delete_storage.delete_date != null) {
								pstmt_tJDBCOutput_16.setTimestamp(
										7,
										new java.sql.Timestamp(
												delete_storage.delete_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_16.setNull(7,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tJDBCOutput_16 = insertedCount_tJDBCOutput_16
										+ pstmt_tJDBCOutput_16.executeUpdate();
								nb_line_tJDBCOutput_16++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_16 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_16++;

							/**
							 * [tJDBCOutput_16 main ] stop
							 */

						} // End of branch "delete_storage"

						/**
						 * [tJDBCInput_20 end ] start
						 */

						currentComponent = "tJDBCInput_20";

					}
				} finally {
					rs_tJDBCInput_20.close();
					stmt_tJDBCInput_20.close();

				}
				globalMap.put("tJDBCInput_20_NB_LINE", nb_line_tJDBCInput_20);

				ok_Hash.put("tJDBCInput_20", true);
				end_Hash.put("tJDBCInput_20", System.currentTimeMillis());

				/**
				 * [tJDBCInput_20 end ] stop
				 */

				/**
				 * [tMap_16 end ] start
				 */

				currentComponent = "tMap_16";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row18 != null) {
					tHash_Lookup_row18.endGet();
				}
				globalMap.remove("tHash_Lookup_row18");

				// ###############################

				ok_Hash.put("tMap_16", true);
				end_Hash.put("tMap_16", System.currentTimeMillis());

				/**
				 * [tMap_16 end ] stop
				 */

				/**
				 * [tJDBCOutput_16 end ] start
				 */

				currentComponent = "tJDBCOutput_16";

				if (pstmt_tJDBCOutput_16 != null) {

					pstmt_tJDBCOutput_16.close();

				}

				nb_line_deleted_tJDBCOutput_16 = nb_line_deleted_tJDBCOutput_16
						+ deletedCount_tJDBCOutput_16;
				nb_line_update_tJDBCOutput_16 = nb_line_update_tJDBCOutput_16
						+ updatedCount_tJDBCOutput_16;
				nb_line_inserted_tJDBCOutput_16 = nb_line_inserted_tJDBCOutput_16
						+ insertedCount_tJDBCOutput_16;
				nb_line_rejected_tJDBCOutput_16 = nb_line_rejected_tJDBCOutput_16
						+ rejectedCount_tJDBCOutput_16;

				globalMap.put("tJDBCOutput_16_NB_LINE", nb_line_tJDBCOutput_16);
				globalMap.put("tJDBCOutput_16_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_16);
				globalMap.put("tJDBCOutput_16_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_16);
				globalMap.put("tJDBCOutput_16_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_16);
				globalMap.put("tJDBCOutput_16_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_16);

				ok_Hash.put("tJDBCOutput_16", true);
				end_Hash.put("tJDBCOutput_16", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_16 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_20:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_33Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_16"
			globalMap.remove("tHash_Lookup_row18");

			try {

				/**
				 * [tJDBCInput_20 finally ] start
				 */

				currentComponent = "tJDBCInput_20";

				/**
				 * [tJDBCInput_20 finally ] stop
				 */

				/**
				 * [tMap_16 finally ] start
				 */

				currentComponent = "tMap_16";

				/**
				 * [tMap_16 finally ] stop
				 */

				/**
				 * [tJDBCOutput_16 finally ] start
				 */

				currentComponent = "tJDBCOutput_16";

				/**
				 * [tJDBCOutput_16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_20_SUBPROCESS_STATE", 1);
	}

	public static class insert_new_dc_storage_connectionStruct
			implements
			routines.system.IPersistableRow<insert_new_dc_storage_connectionStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		public java.util.Date detach_date;

		public java.util.Date getDetach_date() {
			return this.detach_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.storage_domain_id == null) ? 0
								: this.storage_domain_id.hashCode());

				result = prime
						* result
						+ ((this.datacenter_id == null) ? 0
								: this.datacenter_id.hashCode());

				result = prime
						* result
						+ ((this.attach_date == null) ? 0 : this.attach_date
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final insert_new_dc_storage_connectionStruct other = (insert_new_dc_storage_connectionStruct) obj;

			if (this.storage_domain_id == null) {
				if (other.storage_domain_id != null)
					return false;

			} else if (!this.storage_domain_id.equals(other.storage_domain_id))

				return false;

			if (this.datacenter_id == null) {
				if (other.datacenter_id != null)
					return false;

			} else if (!this.datacenter_id.equals(other.datacenter_id))

				return false;

			if (this.attach_date == null) {
				if (other.attach_date != null)
					return false;

			} else if (!this.attach_date.equals(other.attach_date))

				return false;

			return true;
		}

		public void copyDataTo(insert_new_dc_storage_connectionStruct other) {

			other.storage_domain_id = this.storage_domain_id;
			other.datacenter_id = this.datacenter_id;
			other.attach_date = this.attach_date;
			other.detach_date = this.detach_date;

		}

		public void copyKeysDataTo(insert_new_dc_storage_connectionStruct other) {

			other.storage_domain_id = this.storage_domain_id;
			other.datacenter_id = this.datacenter_id;
			other.attach_date = this.attach_date;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_domain_id = (Object) dis.readObject();

					this.datacenter_id = (Object) dis.readObject();

					this.attach_date = readDate(dis);

					this.detach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.storage_domain_id);

				// Object

				dos.writeObject(this.datacenter_id);

				// java.util.Date

				writeDate(this.attach_date, dos);

				// java.util.Date

				writeDate(this.detach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append(",detach_date=" + String.valueOf(detach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_new_dc_storage_connectionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.storage_domain_id,
					other.storage_domain_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.datacenter_id,
					other.datacenter_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.attach_date,
					other.attach_date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object storage_id;

		public Object getStorage_id() {
			return this.storage_id;
		}

		public String storage_domain_join_id;

		public String getStorage_domain_join_id() {
			return this.storage_domain_join_id;
		}

		public Object storage_pool_id;

		public Object getStorage_pool_id() {
			return this.storage_pool_id;
		}

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_id = (Object) dis.readObject();

					this.storage_domain_join_id = readString(dis);

					this.storage_pool_id = (Object) dis.readObject();

					this.datacenter_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.storage_id);

				// String

				writeString(this.storage_domain_join_id, dos);

				// Object

				dos.writeObject(this.storage_pool_id);

				// String

				writeString(this.datacenter_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_id=" + String.valueOf(storage_id));
			sb.append(",storage_domain_join_id=" + storage_domain_join_id);
			sb.append(",storage_pool_id=" + String.valueOf(storage_pool_id));
			sb.append(",datacenter_join_id=" + datacenter_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_33Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_33Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Object storage_id;

		public Object getStorage_id() {
			return this.storage_id;
		}

		public String storage_domain_join_id;

		public String getStorage_domain_join_id() {
			return this.storage_domain_join_id;
		}

		public Object storage_pool_id;

		public Object getStorage_pool_id() {
			return this.storage_pool_id;
		}

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.storage_id == null) ? 0 : this.storage_id
								.hashCode());

				result = prime
						* result
						+ ((this.storage_pool_id == null) ? 0
								: this.storage_pool_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tJDBCInput_33Struct other = (after_tJDBCInput_33Struct) obj;

			if (this.storage_id == null) {
				if (other.storage_id != null)
					return false;

			} else if (!this.storage_id.equals(other.storage_id))

				return false;

			if (this.storage_pool_id == null) {
				if (other.storage_pool_id != null)
					return false;

			} else if (!this.storage_pool_id.equals(other.storage_pool_id))

				return false;

			return true;
		}

		public void copyDataTo(after_tJDBCInput_33Struct other) {

			other.storage_id = this.storage_id;
			other.storage_domain_join_id = this.storage_domain_join_id;
			other.storage_pool_id = this.storage_pool_id;
			other.datacenter_join_id = this.datacenter_join_id;

		}

		public void copyKeysDataTo(after_tJDBCInput_33Struct other) {

			other.storage_id = this.storage_id;
			other.storage_pool_id = this.storage_pool_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_id = (Object) dis.readObject();

					this.storage_domain_join_id = readString(dis);

					this.storage_pool_id = (Object) dis.readObject();

					this.datacenter_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.storage_id);

				// String

				writeString(this.storage_domain_join_id, dos);

				// Object

				dos.writeObject(this.storage_pool_id);

				// String

				writeString(this.datacenter_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_id=" + String.valueOf(storage_id));
			sb.append(",storage_domain_join_id=" + storage_domain_join_id);
			sb.append(",storage_pool_id=" + String.valueOf(storage_pool_id));
			sb.append(",datacenter_join_id=" + datacenter_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_33Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.storage_id,
					other.storage_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.storage_pool_id,
					other.storage_pool_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_33Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_33_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_35Process(globalMap);

				row31Struct row31 = new row31Struct();
				insert_new_dc_storage_connectionStruct insert_new_dc_storage_connection = new insert_new_dc_storage_connectionStruct();

				/**
				 * [tJDBCOutput_23 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_23", false);
				start_Hash.put("tJDBCOutput_23", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_23";

				int tos_count_tJDBCOutput_23 = 0;

				int nb_line_tJDBCOutput_23 = 0;
				int nb_line_update_tJDBCOutput_23 = 0;
				int nb_line_inserted_tJDBCOutput_23 = 0;
				int nb_line_deleted_tJDBCOutput_23 = 0;
				int nb_line_rejected_tJDBCOutput_23 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_23 = 0;

				int deletedCount_tJDBCOutput_23 = 0;
				int updatedCount_tJDBCOutput_23 = 0;
				int insertedCount_tJDBCOutput_23 = 0;
				int rejectedCount_tJDBCOutput_23 = 0;

				boolean whetherReject_tJDBCOutput_23 = false;

				java.sql.Connection connection_tJDBCOutput_23 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_23 = 10000;
				int batchSizeCounter_tJDBCOutput_23 = 0;

				String insert_tJDBCOutput_23 = "INSERT INTO "
						+ "datacenter_storage_domain_map"
						+ " (storage_domain_id,datacenter_id,attach_date,detach_date) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_23 = connection_tJDBCOutput_23
						.prepareStatement(insert_tJDBCOutput_23);

				/**
				 * [tJDBCOutput_23 begin ] stop
				 */

				/**
				 * [tMap_23 begin ] start
				 */

				ok_Hash.put("tMap_23", false);
				start_Hash.put("tMap_23", System.currentTimeMillis());

				currentComponent = "tMap_23";

				int tos_count_tMap_23 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) globalMap
						.get("tHash_Lookup_row33"));

				row33Struct row33HashKey = new row33Struct();
				row33Struct row33Default = new row33Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_23__Struct {
				}
				Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				insert_new_dc_storage_connectionStruct insert_new_dc_storage_connection_tmp = new insert_new_dc_storage_connectionStruct();
				// ###############################

				/**
				 * [tMap_23 begin ] stop
				 */

				/**
				 * [tJDBCInput_33 begin ] start
				 */

				ok_Hash.put("tJDBCInput_33", false);
				start_Hash.put("tJDBCInput_33", System.currentTimeMillis());

				currentComponent = "tJDBCInput_33";

				int tos_count_tJDBCInput_33 = 0;

				int nb_line_tJDBCInput_33 = 0;
				java.sql.Connection conn_tJDBCInput_33 = null;
				conn_tJDBCInput_33 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_33 = conn_tJDBCInput_33
						.createStatement();

				String dbquery_tJDBCInput_33 = "SELECT storage_id,  		upper(cast(storage_id as char(36))) as storage_domain_join_id,  		storage_pool_id,  		upper(cast(storage_pool_id as char(36))) as datacenter_join_id  FROM  storage_pool_iso_map";

				globalMap.put("tJDBCInput_33_QUERY", dbquery_tJDBCInput_33);
				java.sql.ResultSet rs_tJDBCInput_33 = null;
				try {
					rs_tJDBCInput_33 = stmt_tJDBCInput_33
							.executeQuery(dbquery_tJDBCInput_33);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_33 = rs_tJDBCInput_33
							.getMetaData();
					int colQtyInRs_tJDBCInput_33 = rsmd_tJDBCInput_33
							.getColumnCount();

					String tmpContent_tJDBCInput_33 = null;
					int column_index_tJDBCInput_33 = 1;

					while (rs_tJDBCInput_33.next()) {
						nb_line_tJDBCInput_33++;

						column_index_tJDBCInput_33 = 1;

						if (colQtyInRs_tJDBCInput_33 < column_index_tJDBCInput_33) {
							row31.storage_id = null;
						} else {

							if (rs_tJDBCInput_33
									.getObject(column_index_tJDBCInput_33) != null) {
								row31.storage_id = rs_tJDBCInput_33
										.getObject(column_index_tJDBCInput_33);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tJDBCInput_33 = 2;

						if (colQtyInRs_tJDBCInput_33 < column_index_tJDBCInput_33) {
							row31.storage_domain_join_id = null;
						} else {

							tmpContent_tJDBCInput_33 = rs_tJDBCInput_33
									.getString(column_index_tJDBCInput_33);
							if (tmpContent_tJDBCInput_33 != null) {
								row31.storage_domain_join_id = tmpContent_tJDBCInput_33;
							} else {
								row31.storage_domain_join_id = null;
							}

						}

						column_index_tJDBCInput_33 = 3;

						if (colQtyInRs_tJDBCInput_33 < column_index_tJDBCInput_33) {
							row31.storage_pool_id = null;
						} else {

							if (rs_tJDBCInput_33
									.getObject(column_index_tJDBCInput_33) != null) {
								row31.storage_pool_id = rs_tJDBCInput_33
										.getObject(column_index_tJDBCInput_33);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tJDBCInput_33 = 4;

						if (colQtyInRs_tJDBCInput_33 < column_index_tJDBCInput_33) {
							row31.datacenter_join_id = null;
						} else {

							tmpContent_tJDBCInput_33 = rs_tJDBCInput_33
									.getString(column_index_tJDBCInput_33);
							if (tmpContent_tJDBCInput_33 != null) {
								row31.datacenter_join_id = tmpContent_tJDBCInput_33;
							} else {
								row31.datacenter_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_33 begin ] stop
						 */
						/**
						 * [tJDBCInput_33 main ] start
						 */

						currentComponent = "tJDBCInput_33";

						tos_count_tJDBCInput_33++;

						/**
						 * [tJDBCInput_33 main ] stop
						 */

						/**
						 * [tMap_23 main ] start
						 */

						currentComponent = "tMap_23";

						boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_23 = false;
						boolean mainRowRejected_tMap_23 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row33"
						// /////////////////////////////////////////////

						boolean forceLooprow33 = false;

						row33Struct row33ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_23) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_23 = false;

							row33HashKey.storage_domain_join_id = row31.storage_domain_join_id;

							row33HashKey.datacenter_join_id = row31.datacenter_join_id;

							row33HashKey.hashCodeDirty = true;

							tHash_Lookup_row33.lookup(row33HashKey);

							if (!tHash_Lookup_row33.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_23 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row33 != null
								&& tHash_Lookup_row33.getCount(row33HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row33' and it contains more one result from keys :  row33.storage_domain_join_id = '"
							// + row33HashKey.storage_domain_join_id +
							// "', row33.datacenter_join_id = '" +
							// row33HashKey.datacenter_join_id + "'");
						} // G 071

						row33Struct row33 = null;

						row33Struct fromLookup_row33 = null;
						row33 = row33Default;

						if (tHash_Lookup_row33 != null
								&& tHash_Lookup_row33.hasNext()) { // G 099

							fromLookup_row33 = tHash_Lookup_row33.next();

						} // G 099

						if (fromLookup_row33 != null) {
							row33 = fromLookup_row33;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
							// ###############################
							// # Output tables

							insert_new_dc_storage_connection = null;

							if (!rejectedInnerJoin_tMap_23) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table :
							// 'insert_new_dc_storage_connection'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_23) {
								insert_new_dc_storage_connection_tmp.storage_domain_id = row31.storage_id;
								insert_new_dc_storage_connection_tmp.datacenter_id = row31.storage_pool_id;
								insert_new_dc_storage_connection_tmp.attach_date = context.runTime;
								insert_new_dc_storage_connection_tmp.detach_date = null;
								insert_new_dc_storage_connection = insert_new_dc_storage_connection_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_23 = false;

						tos_count_tMap_23++;

						/**
						 * [tMap_23 main ] stop
						 */
						// Start of branch "insert_new_dc_storage_connection"
						if (insert_new_dc_storage_connection != null) {

							/**
							 * [tJDBCOutput_23 main ] start
							 */

							currentComponent = "tJDBCOutput_23";

							whetherReject_tJDBCOutput_23 = false;
							if (insert_new_dc_storage_connection.storage_domain_id == null) {
								pstmt_tJDBCOutput_23.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_23
										.setObject(
												1,
												insert_new_dc_storage_connection.storage_domain_id);
							}

							if (insert_new_dc_storage_connection.datacenter_id == null) {
								pstmt_tJDBCOutput_23.setNull(2,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_23
										.setObject(
												2,
												insert_new_dc_storage_connection.datacenter_id);
							}

							if (insert_new_dc_storage_connection.attach_date != null) {
								pstmt_tJDBCOutput_23
										.setTimestamp(
												3,
												new java.sql.Timestamp(
														insert_new_dc_storage_connection.attach_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_23.setNull(3,
										java.sql.Types.DATE);
							}

							if (insert_new_dc_storage_connection.detach_date != null) {
								pstmt_tJDBCOutput_23
										.setTimestamp(
												4,
												new java.sql.Timestamp(
														insert_new_dc_storage_connection.detach_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_23.setNull(4,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tJDBCOutput_23 = insertedCount_tJDBCOutput_23
										+ pstmt_tJDBCOutput_23.executeUpdate();
								nb_line_tJDBCOutput_23++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_23 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_23++;

							/**
							 * [tJDBCOutput_23 main ] stop
							 */

						} // End of branch "insert_new_dc_storage_connection"

						/**
						 * [tJDBCInput_33 end ] start
						 */

						currentComponent = "tJDBCInput_33";

					}
				} finally {
					rs_tJDBCInput_33.close();
					stmt_tJDBCInput_33.close();

				}
				globalMap.put("tJDBCInput_33_NB_LINE", nb_line_tJDBCInput_33);

				ok_Hash.put("tJDBCInput_33", true);
				end_Hash.put("tJDBCInput_33", System.currentTimeMillis());

				/**
				 * [tJDBCInput_33 end ] stop
				 */

				/**
				 * [tMap_23 end ] start
				 */

				currentComponent = "tMap_23";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row33 != null) {
					tHash_Lookup_row33.endGet();
				}
				globalMap.remove("tHash_Lookup_row33");

				// ###############################

				ok_Hash.put("tMap_23", true);
				end_Hash.put("tMap_23", System.currentTimeMillis());

				/**
				 * [tMap_23 end ] stop
				 */

				/**
				 * [tJDBCOutput_23 end ] start
				 */

				currentComponent = "tJDBCOutput_23";

				if (pstmt_tJDBCOutput_23 != null) {

					pstmt_tJDBCOutput_23.close();

				}

				nb_line_deleted_tJDBCOutput_23 = nb_line_deleted_tJDBCOutput_23
						+ deletedCount_tJDBCOutput_23;
				nb_line_update_tJDBCOutput_23 = nb_line_update_tJDBCOutput_23
						+ updatedCount_tJDBCOutput_23;
				nb_line_inserted_tJDBCOutput_23 = nb_line_inserted_tJDBCOutput_23
						+ insertedCount_tJDBCOutput_23;
				nb_line_rejected_tJDBCOutput_23 = nb_line_rejected_tJDBCOutput_23
						+ rejectedCount_tJDBCOutput_23;

				globalMap.put("tJDBCOutput_23_NB_LINE", nb_line_tJDBCOutput_23);
				globalMap.put("tJDBCOutput_23_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_23);
				globalMap.put("tJDBCOutput_23_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_23);
				globalMap.put("tJDBCOutput_23_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_23);
				globalMap.put("tJDBCOutput_23_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_23);

				ok_Hash.put("tJDBCOutput_23", true);
				end_Hash.put("tJDBCOutput_23", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_23 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_33:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_34Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_23"
			globalMap.remove("tHash_Lookup_row33");

			try {

				/**
				 * [tJDBCInput_33 finally ] start
				 */

				currentComponent = "tJDBCInput_33";

				/**
				 * [tJDBCInput_33 finally ] stop
				 */

				/**
				 * [tMap_23 finally ] start
				 */

				currentComponent = "tMap_23";

				/**
				 * [tMap_23 finally ] stop
				 */

				/**
				 * [tJDBCOutput_23 finally ] start
				 */

				currentComponent = "tJDBCOutput_23";

				/**
				 * [tJDBCOutput_23 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_33_SUBPROCESS_STATE", 1);
	}

	public static class delete_dc_storage_connectionStruct implements
			routines.system.IPersistableRow<delete_dc_storage_connectionStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		public java.util.Date detach_date;

		public java.util.Date getDetach_date() {
			return this.detach_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.storage_domain_id == null) ? 0
								: this.storage_domain_id.hashCode());

				result = prime
						* result
						+ ((this.datacenter_id == null) ? 0
								: this.datacenter_id.hashCode());

				result = prime
						* result
						+ ((this.attach_date == null) ? 0 : this.attach_date
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final delete_dc_storage_connectionStruct other = (delete_dc_storage_connectionStruct) obj;

			if (this.storage_domain_id == null) {
				if (other.storage_domain_id != null)
					return false;

			} else if (!this.storage_domain_id.equals(other.storage_domain_id))

				return false;

			if (this.datacenter_id == null) {
				if (other.datacenter_id != null)
					return false;

			} else if (!this.datacenter_id.equals(other.datacenter_id))

				return false;

			if (this.attach_date == null) {
				if (other.attach_date != null)
					return false;

			} else if (!this.attach_date.equals(other.attach_date))

				return false;

			return true;
		}

		public void copyDataTo(delete_dc_storage_connectionStruct other) {

			other.storage_domain_id = this.storage_domain_id;
			other.datacenter_id = this.datacenter_id;
			other.attach_date = this.attach_date;
			other.detach_date = this.detach_date;

		}

		public void copyKeysDataTo(delete_dc_storage_connectionStruct other) {

			other.storage_domain_id = this.storage_domain_id;
			other.datacenter_id = this.datacenter_id;
			other.attach_date = this.attach_date;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_domain_id = (Object) dis.readObject();

					this.datacenter_id = (Object) dis.readObject();

					this.attach_date = readDate(dis);

					this.detach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.storage_domain_id);

				// Object

				dos.writeObject(this.datacenter_id);

				// java.util.Date

				writeDate(this.attach_date, dos);

				// java.util.Date

				writeDate(this.detach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append(",detach_date=" + String.valueOf(detach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_dc_storage_connectionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.storage_domain_id,
					other.storage_domain_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.datacenter_id,
					other.datacenter_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.attach_date,
					other.attach_date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public String storage_domain_join_id;

		public String getStorage_domain_join_id() {
			return this.storage_domain_join_id;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_domain_id = (Object) dis.readObject();

					this.storage_domain_join_id = readString(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_join_id = readString(dis);

					this.attach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.storage_domain_id);

				// String

				writeString(this.storage_domain_join_id, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.datacenter_join_id, dos);

				// java.util.Date

				writeDate(this.attach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",storage_domain_join_id=" + storage_domain_join_id);
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_join_id=" + datacenter_join_id);
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_34Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_34Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public String storage_domain_join_id;

		public String getStorage_domain_join_id() {
			return this.storage_domain_join_id;
		}

		public Object datacenter_id;

		public Object getDatacenter_id() {
			return this.datacenter_id;
		}

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_domain_id = (Object) dis.readObject();

					this.storage_domain_join_id = readString(dis);

					this.datacenter_id = (Object) dis.readObject();

					this.datacenter_join_id = readString(dis);

					this.attach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.storage_domain_id);

				// String

				writeString(this.storage_domain_join_id, dos);

				// Object

				dos.writeObject(this.datacenter_id);

				// String

				writeString(this.datacenter_join_id, dos);

				// java.util.Date

				writeDate(this.attach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",storage_domain_join_id=" + storage_domain_join_id);
			sb.append(",datacenter_id=" + String.valueOf(datacenter_id));
			sb.append(",datacenter_join_id=" + datacenter_join_id);
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_34Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_34_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_32Process(globalMap);

				row30Struct row30 = new row30Struct();
				delete_dc_storage_connectionStruct delete_dc_storage_connection = new delete_dc_storage_connectionStruct();

				/**
				 * [tJDBCOutput_24 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_24", false);
				start_Hash.put("tJDBCOutput_24", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_24";

				int tos_count_tJDBCOutput_24 = 0;

				int updateKeyCount_tJDBCOutput_24 = 3;
				if (updateKeyCount_tJDBCOutput_24 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_24 = 0;
				int nb_line_update_tJDBCOutput_24 = 0;
				int nb_line_inserted_tJDBCOutput_24 = 0;
				int nb_line_deleted_tJDBCOutput_24 = 0;
				int nb_line_rejected_tJDBCOutput_24 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_24 = 0;

				int deletedCount_tJDBCOutput_24 = 0;
				int updatedCount_tJDBCOutput_24 = 0;
				int insertedCount_tJDBCOutput_24 = 0;
				int rejectedCount_tJDBCOutput_24 = 0;

				boolean whetherReject_tJDBCOutput_24 = false;

				java.sql.Connection connection_tJDBCOutput_24 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_24 = 10000;
				int batchSizeCounter_tJDBCOutput_24 = 0;

				String update_tJDBCOutput_24 = "UPDATE "
						+ "datacenter_storage_domain_map"
						+ " SET detach_date = ? WHERE storage_domain_id = ? AND datacenter_id = ? AND attach_date = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_24 = connection_tJDBCOutput_24
						.prepareStatement(update_tJDBCOutput_24);

				/**
				 * [tJDBCOutput_24 begin ] stop
				 */

				/**
				 * [tMap_22 begin ] start
				 */

				ok_Hash.put("tMap_22", false);
				start_Hash.put("tMap_22", System.currentTimeMillis());

				currentComponent = "tMap_22";

				int tos_count_tMap_22 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) globalMap
						.get("tHash_Lookup_row32"));

				row32Struct row32HashKey = new row32Struct();
				row32Struct row32Default = new row32Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_22__Struct {
				}
				Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_dc_storage_connectionStruct delete_dc_storage_connection_tmp = new delete_dc_storage_connectionStruct();
				// ###############################

				/**
				 * [tMap_22 begin ] stop
				 */

				/**
				 * [tJDBCInput_34 begin ] start
				 */

				ok_Hash.put("tJDBCInput_34", false);
				start_Hash.put("tJDBCInput_34", System.currentTimeMillis());

				currentComponent = "tJDBCInput_34";

				int tos_count_tJDBCInput_34 = 0;

				int nb_line_tJDBCInput_34 = 0;
				java.sql.Connection conn_tJDBCInput_34 = null;
				conn_tJDBCInput_34 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_34 = conn_tJDBCInput_34
						.createStatement();

				String dbquery_tJDBCInput_34 = "SELECT storage_domain_id,   		upper(cast(storage_domain_id as char(36))) as storage_domain_join_id,  		datacenter_id,   		upper(cast(datacenter_id as char(36))) as datacenter_join_id, 		attach_date FROM  v3_5_latest_map_datacenters_storage_domains";

				globalMap.put("tJDBCInput_34_QUERY", dbquery_tJDBCInput_34);
				java.sql.ResultSet rs_tJDBCInput_34 = null;
				try {
					rs_tJDBCInput_34 = stmt_tJDBCInput_34
							.executeQuery(dbquery_tJDBCInput_34);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_34 = rs_tJDBCInput_34
							.getMetaData();
					int colQtyInRs_tJDBCInput_34 = rsmd_tJDBCInput_34
							.getColumnCount();

					String tmpContent_tJDBCInput_34 = null;
					int column_index_tJDBCInput_34 = 1;

					while (rs_tJDBCInput_34.next()) {
						nb_line_tJDBCInput_34++;

						column_index_tJDBCInput_34 = 1;

						if (colQtyInRs_tJDBCInput_34 < column_index_tJDBCInput_34) {
							row30.storage_domain_id = null;
						} else {

							if (rs_tJDBCInput_34
									.getObject(column_index_tJDBCInput_34) != null) {
								row30.storage_domain_id = rs_tJDBCInput_34
										.getObject(column_index_tJDBCInput_34);
							} else {
								row30.storage_domain_id = null;
							}

						}

						column_index_tJDBCInput_34 = 2;

						if (colQtyInRs_tJDBCInput_34 < column_index_tJDBCInput_34) {
							row30.storage_domain_join_id = null;
						} else {

							tmpContent_tJDBCInput_34 = rs_tJDBCInput_34
									.getString(column_index_tJDBCInput_34);
							if (tmpContent_tJDBCInput_34 != null) {
								row30.storage_domain_join_id = tmpContent_tJDBCInput_34;
							} else {
								row30.storage_domain_join_id = null;
							}

						}

						column_index_tJDBCInput_34 = 3;

						if (colQtyInRs_tJDBCInput_34 < column_index_tJDBCInput_34) {
							row30.datacenter_id = null;
						} else {

							if (rs_tJDBCInput_34
									.getObject(column_index_tJDBCInput_34) != null) {
								row30.datacenter_id = rs_tJDBCInput_34
										.getObject(column_index_tJDBCInput_34);
							} else {
								row30.datacenter_id = null;
							}

						}

						column_index_tJDBCInput_34 = 4;

						if (colQtyInRs_tJDBCInput_34 < column_index_tJDBCInput_34) {
							row30.datacenter_join_id = null;
						} else {

							tmpContent_tJDBCInput_34 = rs_tJDBCInput_34
									.getString(column_index_tJDBCInput_34);
							if (tmpContent_tJDBCInput_34 != null) {
								row30.datacenter_join_id = tmpContent_tJDBCInput_34;
							} else {
								row30.datacenter_join_id = null;
							}

						}

						column_index_tJDBCInput_34 = 5;

						if (colQtyInRs_tJDBCInput_34 < column_index_tJDBCInput_34) {
							row30.attach_date = null;
						} else {

							java.util.Date date_tJDBCInput_34 = null;
							try {
								date_tJDBCInput_34 = rs_tJDBCInput_34
										.getTimestamp(column_index_tJDBCInput_34);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_34 = rs_tJDBCInput_34
										.getDate(column_index_tJDBCInput_34);
							}
							row30.attach_date = date_tJDBCInput_34;

						}

						/**
						 * [tJDBCInput_34 begin ] stop
						 */
						/**
						 * [tJDBCInput_34 main ] start
						 */

						currentComponent = "tJDBCInput_34";

						tos_count_tJDBCInput_34++;

						/**
						 * [tJDBCInput_34 main ] stop
						 */

						/**
						 * [tMap_22 main ] start
						 */

						currentComponent = "tMap_22";

						boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_22 = false;
						boolean mainRowRejected_tMap_22 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row32"
						// /////////////////////////////////////////////

						boolean forceLooprow32 = false;

						row32Struct row32ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_22) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_22 = false;

							row32HashKey.storage_domain_join_id = row30.storage_domain_join_id;

							row32HashKey.datacenter_join_id = row30.datacenter_join_id;

							row32HashKey.hashCodeDirty = true;

							tHash_Lookup_row32.lookup(row32HashKey);

							if (!tHash_Lookup_row32.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_22 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row32 != null
								&& tHash_Lookup_row32.getCount(row32HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row32' and it contains more one result from keys :  row32.storage_domain_join_id = '"
							// + row32HashKey.storage_domain_join_id +
							// "', row32.datacenter_join_id = '" +
							// row32HashKey.datacenter_join_id + "'");
						} // G 071

						row32Struct row32 = null;

						row32Struct fromLookup_row32 = null;
						row32 = row32Default;

						if (tHash_Lookup_row32 != null
								&& tHash_Lookup_row32.hasNext()) { // G 099

							fromLookup_row32 = tHash_Lookup_row32.next();

						} // G 099

						if (fromLookup_row32 != null) {
							row32 = fromLookup_row32;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
							// ###############################
							// # Output tables

							delete_dc_storage_connection = null;

							if (!rejectedInnerJoin_tMap_22) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table :
							// 'delete_dc_storage_connection'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_22) {
								delete_dc_storage_connection_tmp.storage_domain_id = row30.storage_domain_id;
								delete_dc_storage_connection_tmp.datacenter_id = row30.datacenter_id;
								delete_dc_storage_connection_tmp.attach_date = row30.attach_date;
								delete_dc_storage_connection_tmp.detach_date = context.runTime;
								delete_dc_storage_connection = delete_dc_storage_connection_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_22 = false;

						tos_count_tMap_22++;

						/**
						 * [tMap_22 main ] stop
						 */
						// Start of branch "delete_dc_storage_connection"
						if (delete_dc_storage_connection != null) {

							/**
							 * [tJDBCOutput_24 main ] start
							 */

							currentComponent = "tJDBCOutput_24";

							whetherReject_tJDBCOutput_24 = false;
							if (delete_dc_storage_connection.detach_date != null) {
								pstmt_tJDBCOutput_24
										.setTimestamp(
												1,
												new java.sql.Timestamp(
														delete_dc_storage_connection.detach_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_24.setNull(1,
										java.sql.Types.DATE);
							}

							if (delete_dc_storage_connection.storage_domain_id == null) {
								pstmt_tJDBCOutput_24.setNull(2,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_24
										.setObject(
												2,
												delete_dc_storage_connection.storage_domain_id);
							}

							if (delete_dc_storage_connection.datacenter_id == null) {
								pstmt_tJDBCOutput_24.setNull(3,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_24
										.setObject(
												3,
												delete_dc_storage_connection.datacenter_id);
							}

							if (delete_dc_storage_connection.attach_date != null) {
								pstmt_tJDBCOutput_24
										.setTimestamp(
												4,
												new java.sql.Timestamp(
														delete_dc_storage_connection.attach_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_24.setNull(4,
										java.sql.Types.DATE);
							}

							try {
								updatedCount_tJDBCOutput_24 = updatedCount_tJDBCOutput_24
										+ pstmt_tJDBCOutput_24.executeUpdate();
								nb_line_tJDBCOutput_24++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_24 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_24++;

							/**
							 * [tJDBCOutput_24 main ] stop
							 */

						} // End of branch "delete_dc_storage_connection"

						/**
						 * [tJDBCInput_34 end ] start
						 */

						currentComponent = "tJDBCInput_34";

					}
				} finally {
					rs_tJDBCInput_34.close();
					stmt_tJDBCInput_34.close();

				}
				globalMap.put("tJDBCInput_34_NB_LINE", nb_line_tJDBCInput_34);

				ok_Hash.put("tJDBCInput_34", true);
				end_Hash.put("tJDBCInput_34", System.currentTimeMillis());

				/**
				 * [tJDBCInput_34 end ] stop
				 */

				/**
				 * [tMap_22 end ] start
				 */

				currentComponent = "tMap_22";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row32 != null) {
					tHash_Lookup_row32.endGet();
				}
				globalMap.remove("tHash_Lookup_row32");

				// ###############################

				ok_Hash.put("tMap_22", true);
				end_Hash.put("tMap_22", System.currentTimeMillis());

				/**
				 * [tMap_22 end ] stop
				 */

				/**
				 * [tJDBCOutput_24 end ] start
				 */

				currentComponent = "tJDBCOutput_24";

				if (pstmt_tJDBCOutput_24 != null) {

					pstmt_tJDBCOutput_24.close();

				}

				nb_line_deleted_tJDBCOutput_24 = nb_line_deleted_tJDBCOutput_24
						+ deletedCount_tJDBCOutput_24;
				nb_line_update_tJDBCOutput_24 = nb_line_update_tJDBCOutput_24
						+ updatedCount_tJDBCOutput_24;
				nb_line_inserted_tJDBCOutput_24 = nb_line_inserted_tJDBCOutput_24
						+ insertedCount_tJDBCOutput_24;
				nb_line_rejected_tJDBCOutput_24 = nb_line_rejected_tJDBCOutput_24
						+ rejectedCount_tJDBCOutput_24;

				globalMap.put("tJDBCOutput_24_NB_LINE", nb_line_tJDBCOutput_24);
				globalMap.put("tJDBCOutput_24_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_24);
				globalMap.put("tJDBCOutput_24_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_24);
				globalMap.put("tJDBCOutput_24_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_24);
				globalMap.put("tJDBCOutput_24_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_24);

				ok_Hash.put("tJDBCOutput_24", true);
				end_Hash.put("tJDBCOutput_24", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_24 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_34:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_22"
			globalMap.remove("tHash_Lookup_row32");

			try {

				/**
				 * [tJDBCInput_34 finally ] start
				 */

				currentComponent = "tJDBCInput_34";

				/**
				 * [tJDBCInput_34 finally ] stop
				 */

				/**
				 * [tMap_22 finally ] start
				 */

				currentComponent = "tMap_22";

				/**
				 * [tMap_22 finally ] stop
				 */

				/**
				 * [tJDBCOutput_24 finally ] start
				 */

				currentComponent = "tJDBCOutput_24";

				/**
				 * [tJDBCOutput_24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_34_SUBPROCESS_STATE", 1);
	}

	public static class host_configurationStruct implements
			routines.system.IPersistableRow<host_configurationStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public String host_unique_id;

		public String getHost_unique_id() {
			return this.host_unique_id;
		}

		public String host_name;

		public String getHost_name() {
			return this.host_name;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public short host_type;

		public short getHost_type() {
			return this.host_type;
		}

		public String fqdn_or_ip;

		public String getFqdn_or_ip() {
			return this.fqdn_or_ip;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public Integer swap_size_mb;

		public Integer getSwap_size_mb() {
			return this.swap_size_mb;
		}

		public String cpu_model;

		public String getCpu_model() {
			return this.cpu_model;
		}

		public Short number_of_cores;

		public Short getNumber_of_cores() {
			return this.number_of_cores;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Double cpu_speed_mh;

		public Double getCpu_speed_mh() {
			return this.cpu_speed_mh;
		}

		public String host_os;

		public String getHost_os() {
			return this.host_os;
		}

		public String pm_ip_address;

		public String getPm_ip_address() {
			return this.pm_ip_address;
		}

		public String kernel_version;

		public String getKernel_version() {
			return this.kernel_version;
		}

		public String kvm_version;

		public String getKvm_version() {
			return this.kvm_version;
		}

		public String vdsm_version;

		public String getVdsm_version() {
			return this.vdsm_version;
		}

		public int vdsm_port;

		public int getVdsm_port() {
			return this.vdsm_port;
		}

		public Integer cluster_configuration_version;

		public Integer getCluster_configuration_version() {
			return this.cluster_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_id = (Object) dis.readObject();

					this.host_unique_id = readString(dis);

					this.host_name = readString(dis);

					this.cluster_id = (Object) dis.readObject();

					this.host_type = dis.readShort();

					this.fqdn_or_ip = readString(dis);

					this.memory_size_mb = readInteger(dis);

					this.swap_size_mb = readInteger(dis);

					this.cpu_model = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.number_of_cores = null;
					} else {
						this.number_of_cores = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cpu_speed_mh = null;
					} else {
						this.cpu_speed_mh = dis.readDouble();
					}

					this.host_os = readString(dis);

					this.pm_ip_address = readString(dis);

					this.kernel_version = readString(dis);

					this.kvm_version = readString(dis);

					this.vdsm_version = readString(dis);

					this.vdsm_port = dis.readInt();

					this.cluster_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.host_id);

				// String

				writeString(this.host_unique_id, dos);

				// String

				writeString(this.host_name, dos);

				// Object

				dos.writeObject(this.cluster_id);

				// short

				dos.writeShort(this.host_type);

				// String

				writeString(this.fqdn_or_ip, dos);

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// Integer

				writeInteger(this.swap_size_mb, dos);

				// String

				writeString(this.cpu_model, dos);

				// Short

				if (this.number_of_cores == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_cores);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Double

				if (this.cpu_speed_mh == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.cpu_speed_mh);
				}

				// String

				writeString(this.host_os, dos);

				// String

				writeString(this.pm_ip_address, dos);

				// String

				writeString(this.kernel_version, dos);

				// String

				writeString(this.kvm_version, dos);

				// String

				writeString(this.vdsm_version, dos);

				// int

				dos.writeInt(this.vdsm_port);

				// Integer

				writeInteger(this.cluster_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("host_id=" + String.valueOf(host_id));
			sb.append(",host_unique_id=" + host_unique_id);
			sb.append(",host_name=" + host_name);
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",host_type=" + String.valueOf(host_type));
			sb.append(",fqdn_or_ip=" + fqdn_or_ip);
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",swap_size_mb=" + String.valueOf(swap_size_mb));
			sb.append(",cpu_model=" + cpu_model);
			sb.append(",number_of_cores=" + String.valueOf(number_of_cores));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",cpu_speed_mh=" + String.valueOf(cpu_speed_mh));
			sb.append(",host_os=" + host_os);
			sb.append(",pm_ip_address=" + pm_ip_address);
			sb.append(",kernel_version=" + kernel_version);
			sb.append(",kvm_version=" + kvm_version);
			sb.append(",vdsm_version=" + vdsm_version);
			sb.append(",vdsm_port=" + String.valueOf(vdsm_port));
			sb.append(",cluster_configuration_version="
					+ String.valueOf(cluster_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(host_configurationStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public String host_unique_id;

		public String getHost_unique_id() {
			return this.host_unique_id;
		}

		public String host_name;

		public String getHost_name() {
			return this.host_name;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public String cluster_join_id;

		public String getCluster_join_id() {
			return this.cluster_join_id;
		}

		public Short host_type;

		public Short getHost_type() {
			return this.host_type;
		}

		public String fqdn_or_ip;

		public String getFqdn_or_ip() {
			return this.fqdn_or_ip;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public Integer swap_size_mb;

		public Integer getSwap_size_mb() {
			return this.swap_size_mb;
		}

		public String cpu_model;

		public String getCpu_model() {
			return this.cpu_model;
		}

		public Short number_of_cores;

		public Short getNumber_of_cores() {
			return this.number_of_cores;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Double cpu_speed_mh;

		public Double getCpu_speed_mh() {
			return this.cpu_speed_mh;
		}

		public String host_os;

		public String getHost_os() {
			return this.host_os;
		}

		public String pm_ip_address;

		public String getPm_ip_address() {
			return this.pm_ip_address;
		}

		public String kernel_version;

		public String getKernel_version() {
			return this.kernel_version;
		}

		public String kvm_version;

		public String getKvm_version() {
			return this.kvm_version;
		}

		public String vdsm_version;

		public String getVdsm_version() {
			return this.vdsm_version;
		}

		public Integer vdsm_port;

		public Integer getVdsm_port() {
			return this.vdsm_port;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_id = (Object) dis.readObject();

					this.host_unique_id = readString(dis);

					this.host_name = readString(dis);

					this.cluster_id = (Object) dis.readObject();

					this.cluster_join_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.host_type = null;
					} else {
						this.host_type = dis.readShort();
					}

					this.fqdn_or_ip = readString(dis);

					this.memory_size_mb = readInteger(dis);

					this.swap_size_mb = readInteger(dis);

					this.cpu_model = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.number_of_cores = null;
					} else {
						this.number_of_cores = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cpu_speed_mh = null;
					} else {
						this.cpu_speed_mh = dis.readDouble();
					}

					this.host_os = readString(dis);

					this.pm_ip_address = readString(dis);

					this.kernel_version = readString(dis);

					this.kvm_version = readString(dis);

					this.vdsm_version = readString(dis);

					this.vdsm_port = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.host_id);

				// String

				writeString(this.host_unique_id, dos);

				// String

				writeString(this.host_name, dos);

				// Object

				dos.writeObject(this.cluster_id);

				// String

				writeString(this.cluster_join_id, dos);

				// Short

				if (this.host_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.host_type);
				}

				// String

				writeString(this.fqdn_or_ip, dos);

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// Integer

				writeInteger(this.swap_size_mb, dos);

				// String

				writeString(this.cpu_model, dos);

				// Short

				if (this.number_of_cores == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_cores);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Double

				if (this.cpu_speed_mh == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.cpu_speed_mh);
				}

				// String

				writeString(this.host_os, dos);

				// String

				writeString(this.pm_ip_address, dos);

				// String

				writeString(this.kernel_version, dos);

				// String

				writeString(this.kvm_version, dos);

				// String

				writeString(this.vdsm_version, dos);

				// Integer

				writeInteger(this.vdsm_port, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("host_id=" + String.valueOf(host_id));
			sb.append(",host_unique_id=" + host_unique_id);
			sb.append(",host_name=" + host_name);
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",cluster_join_id=" + cluster_join_id);
			sb.append(",host_type=" + String.valueOf(host_type));
			sb.append(",fqdn_or_ip=" + fqdn_or_ip);
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",swap_size_mb=" + String.valueOf(swap_size_mb));
			sb.append(",cpu_model=" + cpu_model);
			sb.append(",number_of_cores=" + String.valueOf(number_of_cores));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",cpu_speed_mh=" + String.valueOf(cpu_speed_mh));
			sb.append(",host_os=" + host_os);
			sb.append(",pm_ip_address=" + pm_ip_address);
			sb.append(",kernel_version=" + kernel_version);
			sb.append(",kvm_version=" + kvm_version);
			sb.append(",vdsm_version=" + vdsm_version);
			sb.append(",vdsm_port=" + String.valueOf(vdsm_port));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_4Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_4Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public String host_unique_id;

		public String getHost_unique_id() {
			return this.host_unique_id;
		}

		public String host_name;

		public String getHost_name() {
			return this.host_name;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public String cluster_join_id;

		public String getCluster_join_id() {
			return this.cluster_join_id;
		}

		public Short host_type;

		public Short getHost_type() {
			return this.host_type;
		}

		public String fqdn_or_ip;

		public String getFqdn_or_ip() {
			return this.fqdn_or_ip;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public Integer swap_size_mb;

		public Integer getSwap_size_mb() {
			return this.swap_size_mb;
		}

		public String cpu_model;

		public String getCpu_model() {
			return this.cpu_model;
		}

		public Short number_of_cores;

		public Short getNumber_of_cores() {
			return this.number_of_cores;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Double cpu_speed_mh;

		public Double getCpu_speed_mh() {
			return this.cpu_speed_mh;
		}

		public String host_os;

		public String getHost_os() {
			return this.host_os;
		}

		public String pm_ip_address;

		public String getPm_ip_address() {
			return this.pm_ip_address;
		}

		public String kernel_version;

		public String getKernel_version() {
			return this.kernel_version;
		}

		public String kvm_version;

		public String getKvm_version() {
			return this.kvm_version;
		}

		public String vdsm_version;

		public String getVdsm_version() {
			return this.vdsm_version;
		}

		public Integer vdsm_port;

		public Integer getVdsm_port() {
			return this.vdsm_port;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_id = (Object) dis.readObject();

					this.host_unique_id = readString(dis);

					this.host_name = readString(dis);

					this.cluster_id = (Object) dis.readObject();

					this.cluster_join_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.host_type = null;
					} else {
						this.host_type = dis.readShort();
					}

					this.fqdn_or_ip = readString(dis);

					this.memory_size_mb = readInteger(dis);

					this.swap_size_mb = readInteger(dis);

					this.cpu_model = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.number_of_cores = null;
					} else {
						this.number_of_cores = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cpu_speed_mh = null;
					} else {
						this.cpu_speed_mh = dis.readDouble();
					}

					this.host_os = readString(dis);

					this.pm_ip_address = readString(dis);

					this.kernel_version = readString(dis);

					this.kvm_version = readString(dis);

					this.vdsm_version = readString(dis);

					this.vdsm_port = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.host_id);

				// String

				writeString(this.host_unique_id, dos);

				// String

				writeString(this.host_name, dos);

				// Object

				dos.writeObject(this.cluster_id);

				// String

				writeString(this.cluster_join_id, dos);

				// Short

				if (this.host_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.host_type);
				}

				// String

				writeString(this.fqdn_or_ip, dos);

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// Integer

				writeInteger(this.swap_size_mb, dos);

				// String

				writeString(this.cpu_model, dos);

				// Short

				if (this.number_of_cores == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_cores);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Double

				if (this.cpu_speed_mh == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.cpu_speed_mh);
				}

				// String

				writeString(this.host_os, dos);

				// String

				writeString(this.pm_ip_address, dos);

				// String

				writeString(this.kernel_version, dos);

				// String

				writeString(this.kvm_version, dos);

				// String

				writeString(this.vdsm_version, dos);

				// Integer

				writeInteger(this.vdsm_port, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("host_id=" + String.valueOf(host_id));
			sb.append(",host_unique_id=" + host_unique_id);
			sb.append(",host_name=" + host_name);
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",cluster_join_id=" + cluster_join_id);
			sb.append(",host_type=" + String.valueOf(host_type));
			sb.append(",fqdn_or_ip=" + fqdn_or_ip);
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",swap_size_mb=" + String.valueOf(swap_size_mb));
			sb.append(",cpu_model=" + cpu_model);
			sb.append(",number_of_cores=" + String.valueOf(number_of_cores));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",cpu_speed_mh=" + String.valueOf(cpu_speed_mh));
			sb.append(",host_os=" + host_os);
			sb.append(",pm_ip_address=" + pm_ip_address);
			sb.append(",kernel_version=" + kernel_version);
			sb.append(",kvm_version=" + kvm_version);
			sb.append(",vdsm_version=" + vdsm_version);
			sb.append(",vdsm_port=" + String.valueOf(vdsm_port));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_40Process(globalMap);

				row7Struct row7 = new row7Struct();
				host_configurationStruct host_configuration = new host_configurationStruct();

				/**
				 * [tJDBCOutput_4 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_4", false);
				start_Hash.put("tJDBCOutput_4", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_4";

				int tos_count_tJDBCOutput_4 = 0;

				int nb_line_tJDBCOutput_4 = 0;
				int nb_line_update_tJDBCOutput_4 = 0;
				int nb_line_inserted_tJDBCOutput_4 = 0;
				int nb_line_deleted_tJDBCOutput_4 = 0;
				int nb_line_rejected_tJDBCOutput_4 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_4 = 0;

				int deletedCount_tJDBCOutput_4 = 0;
				int updatedCount_tJDBCOutput_4 = 0;
				int insertedCount_tJDBCOutput_4 = 0;
				int rejectedCount_tJDBCOutput_4 = 0;

				boolean whetherReject_tJDBCOutput_4 = false;

				java.sql.Connection connection_tJDBCOutput_4 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_4 = 10000;
				int batchSizeCounter_tJDBCOutput_4 = 0;

				String insert_tJDBCOutput_4 = "INSERT INTO "
						+ "host_configuration"
						+ " (host_id,host_unique_id,host_name,cluster_id,host_type,fqdn_or_ip,memory_size_mb,swap_size_mb,cpu_model,number_of_cores,number_of_sockets,cpu_speed_mh,host_os,pm_ip_address,kernel_version,kvm_version,vdsm_version,vdsm_port,cluster_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_4 = connection_tJDBCOutput_4
						.prepareStatement(insert_tJDBCOutput_4);

				/**
				 * [tJDBCOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) globalMap
						.get("tHash_Lookup_row36"));

				row36Struct row36HashKey = new row36Struct();
				row36Struct row36Default = new row36Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				host_configurationStruct host_configuration_tmp = new host_configurationStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tJDBCInput_4 begin ] start
				 */

				ok_Hash.put("tJDBCInput_4", false);
				start_Hash.put("tJDBCInput_4", System.currentTimeMillis());

				currentComponent = "tJDBCInput_4";

				int tos_count_tJDBCInput_4 = 0;

				int nb_line_tJDBCInput_4 = 0;
				java.sql.Connection conn_tJDBCInput_4 = null;
				conn_tJDBCInput_4 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_4 = conn_tJDBCInput_4
						.createStatement();

				String dbquery_tJDBCInput_4 = "SELECT     host_id,     host_unique_id,     host_name,     cluster_id,    upper(cast(cluster_id as char(36))) as cluster_join_id,      host_type,     fqdn_or_ip,     memory_size_mb,     swap_size_mb,     cpu_model,    number_of_cores,    number_of_sockets,   cpu_speed_mh,    host_os,     pm_ip_address,     kernel_version,     kvm_version,     vdsm_version,     vdsm_port,     create_date,     update_date  FROM dwh_host_configuration_history_view";

				globalMap.put("tJDBCInput_4_QUERY", dbquery_tJDBCInput_4);
				java.sql.ResultSet rs_tJDBCInput_4 = null;
				try {
					rs_tJDBCInput_4 = stmt_tJDBCInput_4
							.executeQuery(dbquery_tJDBCInput_4);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_4 = rs_tJDBCInput_4
							.getMetaData();
					int colQtyInRs_tJDBCInput_4 = rsmd_tJDBCInput_4
							.getColumnCount();

					String tmpContent_tJDBCInput_4 = null;
					int column_index_tJDBCInput_4 = 1;

					while (rs_tJDBCInput_4.next()) {
						nb_line_tJDBCInput_4++;

						column_index_tJDBCInput_4 = 1;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.host_id = null;
						} else {

							if (rs_tJDBCInput_4
									.getObject(column_index_tJDBCInput_4) != null) {
								row7.host_id = rs_tJDBCInput_4
										.getObject(column_index_tJDBCInput_4);
							} else {
								row7.host_id = null;
							}

						}

						column_index_tJDBCInput_4 = 2;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.host_unique_id = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row7.host_unique_id = tmpContent_tJDBCInput_4;
							} else {
								row7.host_unique_id = null;
							}

						}

						column_index_tJDBCInput_4 = 3;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.host_name = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row7.host_name = tmpContent_tJDBCInput_4;
							} else {
								row7.host_name = null;
							}

						}

						column_index_tJDBCInput_4 = 4;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.cluster_id = null;
						} else {

							if (rs_tJDBCInput_4
									.getObject(column_index_tJDBCInput_4) != null) {
								row7.cluster_id = rs_tJDBCInput_4
										.getObject(column_index_tJDBCInput_4);
							} else {
								row7.cluster_id = null;
							}

						}

						column_index_tJDBCInput_4 = 5;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.cluster_join_id = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row7.cluster_join_id = tmpContent_tJDBCInput_4;
							} else {
								row7.cluster_join_id = null;
							}

						}

						column_index_tJDBCInput_4 = 6;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.host_type = null;
						} else {

							if (rs_tJDBCInput_4
									.getObject(column_index_tJDBCInput_4) != null) {
								row7.host_type = rs_tJDBCInput_4
										.getShort(column_index_tJDBCInput_4);
							} else {
								row7.host_type = null;
							}

						}

						column_index_tJDBCInput_4 = 7;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.fqdn_or_ip = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row7.fqdn_or_ip = tmpContent_tJDBCInput_4;
							} else {
								row7.fqdn_or_ip = null;
							}

						}

						column_index_tJDBCInput_4 = 8;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.memory_size_mb = null;
						} else {

							if (rs_tJDBCInput_4
									.getObject(column_index_tJDBCInput_4) != null) {
								row7.memory_size_mb = rs_tJDBCInput_4
										.getInt(column_index_tJDBCInput_4);
							} else {
								row7.memory_size_mb = null;
							}

						}

						column_index_tJDBCInput_4 = 9;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.swap_size_mb = null;
						} else {

							if (rs_tJDBCInput_4
									.getObject(column_index_tJDBCInput_4) != null) {
								row7.swap_size_mb = rs_tJDBCInput_4
										.getInt(column_index_tJDBCInput_4);
							} else {
								row7.swap_size_mb = null;
							}

						}

						column_index_tJDBCInput_4 = 10;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.cpu_model = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row7.cpu_model = tmpContent_tJDBCInput_4;
							} else {
								row7.cpu_model = null;
							}

						}

						column_index_tJDBCInput_4 = 11;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.number_of_cores = null;
						} else {

							if (rs_tJDBCInput_4
									.getObject(column_index_tJDBCInput_4) != null) {
								row7.number_of_cores = rs_tJDBCInput_4
										.getShort(column_index_tJDBCInput_4);
							} else {
								row7.number_of_cores = null;
							}

						}

						column_index_tJDBCInput_4 = 12;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.number_of_sockets = null;
						} else {

							if (rs_tJDBCInput_4
									.getObject(column_index_tJDBCInput_4) != null) {
								row7.number_of_sockets = rs_tJDBCInput_4
										.getShort(column_index_tJDBCInput_4);
							} else {
								row7.number_of_sockets = null;
							}

						}

						column_index_tJDBCInput_4 = 13;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.cpu_speed_mh = null;
						} else {

							if (rs_tJDBCInput_4
									.getObject(column_index_tJDBCInput_4) != null) {
								row7.cpu_speed_mh = rs_tJDBCInput_4
										.getDouble(column_index_tJDBCInput_4);
							} else {
								row7.cpu_speed_mh = null;
							}

						}

						column_index_tJDBCInput_4 = 14;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.host_os = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row7.host_os = tmpContent_tJDBCInput_4;
							} else {
								row7.host_os = null;
							}

						}

						column_index_tJDBCInput_4 = 15;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.pm_ip_address = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row7.pm_ip_address = tmpContent_tJDBCInput_4;
							} else {
								row7.pm_ip_address = null;
							}

						}

						column_index_tJDBCInput_4 = 16;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.kernel_version = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row7.kernel_version = tmpContent_tJDBCInput_4;
							} else {
								row7.kernel_version = null;
							}

						}

						column_index_tJDBCInput_4 = 17;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.kvm_version = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row7.kvm_version = tmpContent_tJDBCInput_4;
							} else {
								row7.kvm_version = null;
							}

						}

						column_index_tJDBCInput_4 = 18;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.vdsm_version = null;
						} else {

							tmpContent_tJDBCInput_4 = rs_tJDBCInput_4
									.getString(column_index_tJDBCInput_4);
							if (tmpContent_tJDBCInput_4 != null) {
								row7.vdsm_version = tmpContent_tJDBCInput_4;
							} else {
								row7.vdsm_version = null;
							}

						}

						column_index_tJDBCInput_4 = 19;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.vdsm_port = null;
						} else {

							if (rs_tJDBCInput_4
									.getObject(column_index_tJDBCInput_4) != null) {
								row7.vdsm_port = rs_tJDBCInput_4
										.getInt(column_index_tJDBCInput_4);
							} else {
								row7.vdsm_port = null;
							}

						}

						column_index_tJDBCInput_4 = 20;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(column_index_tJDBCInput_4);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getDate(column_index_tJDBCInput_4);
							}
							row7.create_date = date_tJDBCInput_4;

						}

						column_index_tJDBCInput_4 = 21;

						if (colQtyInRs_tJDBCInput_4 < column_index_tJDBCInput_4) {
							row7.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_4 = null;
							try {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getTimestamp(column_index_tJDBCInput_4);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_4 = rs_tJDBCInput_4
										.getDate(column_index_tJDBCInput_4);
							}
							row7.update_date = date_tJDBCInput_4;

						}

						/**
						 * [tJDBCInput_4 begin ] stop
						 */
						/**
						 * [tJDBCInput_4 main ] start
						 */

						currentComponent = "tJDBCInput_4";

						tos_count_tJDBCInput_4++;

						/**
						 * [tJDBCInput_4 main ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						if (

						(

						row7.update_date == null ? TalendDate.compareDate(
								row7.create_date, context.runTime) <= 0
								: TalendDate.compareDate(row7.update_date,
										context.runTime) <= 0

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row7'

							// /////////////////////////////////////////////
							// Starting Lookup Table "row36"
							// /////////////////////////////////////////////

							boolean forceLooprow36 = false;

							row36Struct row36ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row36HashKey.cluster_join_id = row7.cluster_join_id;

								row36HashKey.hashCodeDirty = true;

								tHash_Lookup_row36.lookup(row36HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row36 != null
									&& tHash_Lookup_row36
											.getCount(row36HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row36' and it contains more one result from keys :  row36.cluster_join_id = '"
								// + row36HashKey.cluster_join_id + "'");
							} // G 071

							row36Struct row36 = null;

							row36Struct fromLookup_row36 = null;
							row36 = row36Default;

							if (tHash_Lookup_row36 != null
									&& tHash_Lookup_row36.hasNext()) { // G 099

								fromLookup_row36 = tHash_Lookup_row36.next();

							} // G 099

							if (fromLookup_row36 != null) {
								row36 = fromLookup_row36;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								host_configuration = null;

								// # Output table : 'host_configuration'
								host_configuration_tmp.host_id = row7.host_id;
								host_configuration_tmp.host_unique_id = StringHandling
										.TRIM(row7.host_unique_id);
								host_configuration_tmp.host_name = StringHandling
										.TRIM(row7.host_name);
								host_configuration_tmp.cluster_id = row7.cluster_id;
								host_configuration_tmp.host_type = row7.host_type;
								host_configuration_tmp.fqdn_or_ip = StringHandling
										.TRIM(row7.fqdn_or_ip);
								host_configuration_tmp.memory_size_mb = row7.memory_size_mb;
								host_configuration_tmp.swap_size_mb = row7.swap_size_mb;
								host_configuration_tmp.cpu_model = StringHandling
										.TRIM(row7.cpu_model);
								host_configuration_tmp.number_of_cores = row7.number_of_cores;
								host_configuration_tmp.number_of_sockets = row7.number_of_sockets;
								host_configuration_tmp.cpu_speed_mh = row7.cpu_speed_mh;
								host_configuration_tmp.host_os = StringHandling
										.TRIM(row7.host_os);
								host_configuration_tmp.pm_ip_address = StringHandling
										.TRIM(row7.pm_ip_address);
								host_configuration_tmp.kernel_version = StringHandling
										.TRIM(row7.kernel_version);
								host_configuration_tmp.kvm_version = StringHandling
										.TRIM(row7.kvm_version);
								host_configuration_tmp.vdsm_version = StringHandling
										.TRIM(row7.vdsm_version);
								host_configuration_tmp.vdsm_port = row7.vdsm_port;
								host_configuration_tmp.cluster_configuration_version = row36.history_id;
								host_configuration_tmp.create_date = row7.create_date;
								host_configuration_tmp.update_date = row7.update_date;
								host_configuration_tmp.delete_date = null;
								host_configuration = host_configuration_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */
							// Start of branch "host_configuration"
							if (host_configuration != null) {

								/**
								 * [tJDBCOutput_4 main ] start
								 */

								currentComponent = "tJDBCOutput_4";

								whetherReject_tJDBCOutput_4 = false;
								if (host_configuration.host_id == null) {
									pstmt_tJDBCOutput_4.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_4.setObject(1,
											host_configuration.host_id);
								}

								if (host_configuration.host_unique_id == null) {
									pstmt_tJDBCOutput_4.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_4.setString(2,
											host_configuration.host_unique_id);
								}

								if (host_configuration.host_name == null) {
									pstmt_tJDBCOutput_4.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_4.setString(3,
											host_configuration.host_name);
								}

								if (host_configuration.cluster_id == null) {
									pstmt_tJDBCOutput_4.setNull(4,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_4.setObject(4,
											host_configuration.cluster_id);
								}

								pstmt_tJDBCOutput_4.setShort(5,
										host_configuration.host_type);

								if (host_configuration.fqdn_or_ip == null) {
									pstmt_tJDBCOutput_4.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_4.setString(6,
											host_configuration.fqdn_or_ip);
								}

								if (host_configuration.memory_size_mb == null) {
									pstmt_tJDBCOutput_4.setNull(7,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_4.setInt(7,
											host_configuration.memory_size_mb);
								}

								if (host_configuration.swap_size_mb == null) {
									pstmt_tJDBCOutput_4.setNull(8,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_4.setInt(8,
											host_configuration.swap_size_mb);
								}

								if (host_configuration.cpu_model == null) {
									pstmt_tJDBCOutput_4.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_4.setString(9,
											host_configuration.cpu_model);
								}

								if (host_configuration.number_of_cores == null) {
									pstmt_tJDBCOutput_4.setNull(10,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_4.setShort(10,
											host_configuration.number_of_cores);
								}

								if (host_configuration.number_of_sockets == null) {
									pstmt_tJDBCOutput_4.setNull(11,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_4
											.setShort(
													11,
													host_configuration.number_of_sockets);
								}

								if (host_configuration.cpu_speed_mh == null) {
									pstmt_tJDBCOutput_4.setNull(12,
											java.sql.Types.DOUBLE);
								} else {
									pstmt_tJDBCOutput_4.setDouble(12,
											host_configuration.cpu_speed_mh);
								}

								if (host_configuration.host_os == null) {
									pstmt_tJDBCOutput_4.setNull(13,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_4.setString(13,
											host_configuration.host_os);
								}

								if (host_configuration.pm_ip_address == null) {
									pstmt_tJDBCOutput_4.setNull(14,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_4.setString(14,
											host_configuration.pm_ip_address);
								}

								if (host_configuration.kernel_version == null) {
									pstmt_tJDBCOutput_4.setNull(15,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_4.setString(15,
											host_configuration.kernel_version);
								}

								if (host_configuration.kvm_version == null) {
									pstmt_tJDBCOutput_4.setNull(16,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_4.setString(16,
											host_configuration.kvm_version);
								}

								if (host_configuration.vdsm_version == null) {
									pstmt_tJDBCOutput_4.setNull(17,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_4.setString(17,
											host_configuration.vdsm_version);
								}

								pstmt_tJDBCOutput_4.setInt(18,
										host_configuration.vdsm_port);

								if (host_configuration.cluster_configuration_version == null) {
									pstmt_tJDBCOutput_4.setNull(19,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_4
											.setInt(19,
													host_configuration.cluster_configuration_version);
								}

								if (host_configuration.create_date != null) {
									pstmt_tJDBCOutput_4
											.setTimestamp(
													20,
													new java.sql.Timestamp(
															host_configuration.create_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_4.setNull(20,
											java.sql.Types.DATE);
								}

								if (host_configuration.update_date != null) {
									pstmt_tJDBCOutput_4
											.setTimestamp(
													21,
													new java.sql.Timestamp(
															host_configuration.update_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_4.setNull(21,
											java.sql.Types.DATE);
								}

								if (host_configuration.delete_date != null) {
									pstmt_tJDBCOutput_4
											.setTimestamp(
													22,
													new java.sql.Timestamp(
															host_configuration.delete_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_4.setNull(22,
											java.sql.Types.DATE);
								}

								try {
									insertedCount_tJDBCOutput_4 = insertedCount_tJDBCOutput_4
											+ pstmt_tJDBCOutput_4
													.executeUpdate();
									nb_line_tJDBCOutput_4++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_4 = true;
									throw (e);
								}

								tos_count_tJDBCOutput_4++;

								/**
								 * [tJDBCOutput_4 main ] stop
								 */

							} // End of branch "host_configuration"

						} // G_TM_M_280 close main tMap filter for table 'row7'

						/**
						 * [tJDBCInput_4 end ] start
						 */

						currentComponent = "tJDBCInput_4";

					}
				} finally {
					rs_tJDBCInput_4.close();
					stmt_tJDBCInput_4.close();

				}
				globalMap.put("tJDBCInput_4_NB_LINE", nb_line_tJDBCInput_4);

				ok_Hash.put("tJDBCInput_4", true);
				end_Hash.put("tJDBCInput_4", System.currentTimeMillis());

				/**
				 * [tJDBCInput_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row36 != null) {
					tHash_Lookup_row36.endGet();
				}
				globalMap.remove("tHash_Lookup_row36");

				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tJDBCOutput_4 end ] start
				 */

				currentComponent = "tJDBCOutput_4";

				if (pstmt_tJDBCOutput_4 != null) {

					pstmt_tJDBCOutput_4.close();

				}

				nb_line_deleted_tJDBCOutput_4 = nb_line_deleted_tJDBCOutput_4
						+ deletedCount_tJDBCOutput_4;
				nb_line_update_tJDBCOutput_4 = nb_line_update_tJDBCOutput_4
						+ updatedCount_tJDBCOutput_4;
				nb_line_inserted_tJDBCOutput_4 = nb_line_inserted_tJDBCOutput_4
						+ insertedCount_tJDBCOutput_4;
				nb_line_rejected_tJDBCOutput_4 = nb_line_rejected_tJDBCOutput_4
						+ rejectedCount_tJDBCOutput_4;

				globalMap.put("tJDBCOutput_4_NB_LINE", nb_line_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_4);

				ok_Hash.put("tJDBCOutput_4", true);
				end_Hash.put("tJDBCOutput_4", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_22Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row36");

			try {

				/**
				 * [tJDBCInput_4 finally ] start
				 */

				currentComponent = "tJDBCInput_4";

				/**
				 * [tJDBCInput_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tJDBCOutput_4 finally ] start
				 */

				currentComponent = "tJDBCOutput_4";

				/**
				 * [tJDBCOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 1);
	}

	public static class delete_hostsStruct implements
			routines.system.IPersistableRow<delete_hostsStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public String host_unique_id;

		public String getHost_unique_id() {
			return this.host_unique_id;
		}

		public String host_name;

		public String getHost_name() {
			return this.host_name;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public short host_type;

		public short getHost_type() {
			return this.host_type;
		}

		public String fqdn_or_ip;

		public String getFqdn_or_ip() {
			return this.fqdn_or_ip;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public Integer swap_size_mb;

		public Integer getSwap_size_mb() {
			return this.swap_size_mb;
		}

		public String cpu_model;

		public String getCpu_model() {
			return this.cpu_model;
		}

		public Short number_of_cores;

		public Short getNumber_of_cores() {
			return this.number_of_cores;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Double cpu_speed_mh;

		public Double getCpu_speed_mh() {
			return this.cpu_speed_mh;
		}

		public String host_os;

		public String getHost_os() {
			return this.host_os;
		}

		public String pm_ip_address;

		public String getPm_ip_address() {
			return this.pm_ip_address;
		}

		public String kernel_version;

		public String getKernel_version() {
			return this.kernel_version;
		}

		public String kvm_version;

		public String getKvm_version() {
			return this.kvm_version;
		}

		public String vdsm_version;

		public String getVdsm_version() {
			return this.vdsm_version;
		}

		public int vdsm_port;

		public int getVdsm_port() {
			return this.vdsm_port;
		}

		public Integer cluster_configuration_version;

		public Integer getCluster_configuration_version() {
			return this.cluster_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_id = (Object) dis.readObject();

					this.host_unique_id = readString(dis);

					this.host_name = readString(dis);

					this.cluster_id = (Object) dis.readObject();

					this.host_type = dis.readShort();

					this.fqdn_or_ip = readString(dis);

					this.memory_size_mb = readInteger(dis);

					this.swap_size_mb = readInteger(dis);

					this.cpu_model = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.number_of_cores = null;
					} else {
						this.number_of_cores = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cpu_speed_mh = null;
					} else {
						this.cpu_speed_mh = dis.readDouble();
					}

					this.host_os = readString(dis);

					this.pm_ip_address = readString(dis);

					this.kernel_version = readString(dis);

					this.kvm_version = readString(dis);

					this.vdsm_version = readString(dis);

					this.vdsm_port = dis.readInt();

					this.cluster_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.host_id);

				// String

				writeString(this.host_unique_id, dos);

				// String

				writeString(this.host_name, dos);

				// Object

				dos.writeObject(this.cluster_id);

				// short

				dos.writeShort(this.host_type);

				// String

				writeString(this.fqdn_or_ip, dos);

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// Integer

				writeInteger(this.swap_size_mb, dos);

				// String

				writeString(this.cpu_model, dos);

				// Short

				if (this.number_of_cores == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_cores);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Double

				if (this.cpu_speed_mh == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.cpu_speed_mh);
				}

				// String

				writeString(this.host_os, dos);

				// String

				writeString(this.pm_ip_address, dos);

				// String

				writeString(this.kernel_version, dos);

				// String

				writeString(this.kvm_version, dos);

				// String

				writeString(this.vdsm_version, dos);

				// int

				dos.writeInt(this.vdsm_port);

				// Integer

				writeInteger(this.cluster_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("host_id=" + String.valueOf(host_id));
			sb.append(",host_unique_id=" + host_unique_id);
			sb.append(",host_name=" + host_name);
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",host_type=" + String.valueOf(host_type));
			sb.append(",fqdn_or_ip=" + fqdn_or_ip);
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",swap_size_mb=" + String.valueOf(swap_size_mb));
			sb.append(",cpu_model=" + cpu_model);
			sb.append(",number_of_cores=" + String.valueOf(number_of_cores));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",cpu_speed_mh=" + String.valueOf(cpu_speed_mh));
			sb.append(",host_os=" + host_os);
			sb.append(",pm_ip_address=" + pm_ip_address);
			sb.append(",kernel_version=" + kernel_version);
			sb.append(",kvm_version=" + kvm_version);
			sb.append(",vdsm_version=" + vdsm_version);
			sb.append(",vdsm_port=" + String.valueOf(vdsm_port));
			sb.append(",cluster_configuration_version="
					+ String.valueOf(cluster_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_hostsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public String host_join_id;

		public String getHost_join_id() {
			return this.host_join_id;
		}

		public String host_unique_id;

		public String getHost_unique_id() {
			return this.host_unique_id;
		}

		public String host_name;

		public String getHost_name() {
			return this.host_name;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public Short host_type;

		public Short getHost_type() {
			return this.host_type;
		}

		public String fqdn_or_ip;

		public String getFqdn_or_ip() {
			return this.fqdn_or_ip;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public Integer swap_size_mb;

		public Integer getSwap_size_mb() {
			return this.swap_size_mb;
		}

		public String cpu_model;

		public String getCpu_model() {
			return this.cpu_model;
		}

		public Short number_of_cores;

		public Short getNumber_of_cores() {
			return this.number_of_cores;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Double cpu_speed_mh;

		public Double getCpu_speed_mh() {
			return this.cpu_speed_mh;
		}

		public String host_os;

		public String getHost_os() {
			return this.host_os;
		}

		public String pm_ip_address;

		public String getPm_ip_address() {
			return this.pm_ip_address;
		}

		public String kernel_version;

		public String getKernel_version() {
			return this.kernel_version;
		}

		public String kvm_version;

		public String getKvm_version() {
			return this.kvm_version;
		}

		public String vdsm_version;

		public String getVdsm_version() {
			return this.vdsm_version;
		}

		public Integer vdsm_port;

		public Integer getVdsm_port() {
			return this.vdsm_port;
		}

		public Integer cluster_configuration_version;

		public Integer getCluster_configuration_version() {
			return this.cluster_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.host_id = (Object) dis.readObject();

					this.host_join_id = readString(dis);

					this.host_unique_id = readString(dis);

					this.host_name = readString(dis);

					this.cluster_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.host_type = null;
					} else {
						this.host_type = dis.readShort();
					}

					this.fqdn_or_ip = readString(dis);

					this.memory_size_mb = readInteger(dis);

					this.swap_size_mb = readInteger(dis);

					this.cpu_model = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.number_of_cores = null;
					} else {
						this.number_of_cores = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cpu_speed_mh = null;
					} else {
						this.cpu_speed_mh = dis.readDouble();
					}

					this.host_os = readString(dis);

					this.pm_ip_address = readString(dis);

					this.kernel_version = readString(dis);

					this.kvm_version = readString(dis);

					this.vdsm_version = readString(dis);

					this.vdsm_port = readInteger(dis);

					this.cluster_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.host_id);

				// String

				writeString(this.host_join_id, dos);

				// String

				writeString(this.host_unique_id, dos);

				// String

				writeString(this.host_name, dos);

				// Object

				dos.writeObject(this.cluster_id);

				// Short

				if (this.host_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.host_type);
				}

				// String

				writeString(this.fqdn_or_ip, dos);

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// Integer

				writeInteger(this.swap_size_mb, dos);

				// String

				writeString(this.cpu_model, dos);

				// Short

				if (this.number_of_cores == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_cores);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Double

				if (this.cpu_speed_mh == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.cpu_speed_mh);
				}

				// String

				writeString(this.host_os, dos);

				// String

				writeString(this.pm_ip_address, dos);

				// String

				writeString(this.kernel_version, dos);

				// String

				writeString(this.kvm_version, dos);

				// String

				writeString(this.vdsm_version, dos);

				// Integer

				writeInteger(this.vdsm_port, dos);

				// Integer

				writeInteger(this.cluster_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_join_id=" + host_join_id);
			sb.append(",host_unique_id=" + host_unique_id);
			sb.append(",host_name=" + host_name);
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",host_type=" + String.valueOf(host_type));
			sb.append(",fqdn_or_ip=" + fqdn_or_ip);
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",swap_size_mb=" + String.valueOf(swap_size_mb));
			sb.append(",cpu_model=" + cpu_model);
			sb.append(",number_of_cores=" + String.valueOf(number_of_cores));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",cpu_speed_mh=" + String.valueOf(cpu_speed_mh));
			sb.append(",host_os=" + host_os);
			sb.append(",pm_ip_address=" + pm_ip_address);
			sb.append(",kernel_version=" + kernel_version);
			sb.append(",kvm_version=" + kvm_version);
			sb.append(",vdsm_version=" + vdsm_version);
			sb.append(",vdsm_port=" + String.valueOf(vdsm_port));
			sb.append(",cluster_configuration_version="
					+ String.valueOf(cluster_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_22Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_22Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public String host_join_id;

		public String getHost_join_id() {
			return this.host_join_id;
		}

		public String host_unique_id;

		public String getHost_unique_id() {
			return this.host_unique_id;
		}

		public String host_name;

		public String getHost_name() {
			return this.host_name;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public Short host_type;

		public Short getHost_type() {
			return this.host_type;
		}

		public String fqdn_or_ip;

		public String getFqdn_or_ip() {
			return this.fqdn_or_ip;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public Integer swap_size_mb;

		public Integer getSwap_size_mb() {
			return this.swap_size_mb;
		}

		public String cpu_model;

		public String getCpu_model() {
			return this.cpu_model;
		}

		public Short number_of_cores;

		public Short getNumber_of_cores() {
			return this.number_of_cores;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Double cpu_speed_mh;

		public Double getCpu_speed_mh() {
			return this.cpu_speed_mh;
		}

		public String host_os;

		public String getHost_os() {
			return this.host_os;
		}

		public String pm_ip_address;

		public String getPm_ip_address() {
			return this.pm_ip_address;
		}

		public String kernel_version;

		public String getKernel_version() {
			return this.kernel_version;
		}

		public String kvm_version;

		public String getKvm_version() {
			return this.kvm_version;
		}

		public String vdsm_version;

		public String getVdsm_version() {
			return this.vdsm_version;
		}

		public Integer vdsm_port;

		public Integer getVdsm_port() {
			return this.vdsm_port;
		}

		public Integer cluster_configuration_version;

		public Integer getCluster_configuration_version() {
			return this.cluster_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.host_id = (Object) dis.readObject();

					this.host_join_id = readString(dis);

					this.host_unique_id = readString(dis);

					this.host_name = readString(dis);

					this.cluster_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.host_type = null;
					} else {
						this.host_type = dis.readShort();
					}

					this.fqdn_or_ip = readString(dis);

					this.memory_size_mb = readInteger(dis);

					this.swap_size_mb = readInteger(dis);

					this.cpu_model = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.number_of_cores = null;
					} else {
						this.number_of_cores = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cpu_speed_mh = null;
					} else {
						this.cpu_speed_mh = dis.readDouble();
					}

					this.host_os = readString(dis);

					this.pm_ip_address = readString(dis);

					this.kernel_version = readString(dis);

					this.kvm_version = readString(dis);

					this.vdsm_version = readString(dis);

					this.vdsm_port = readInteger(dis);

					this.cluster_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.host_id);

				// String

				writeString(this.host_join_id, dos);

				// String

				writeString(this.host_unique_id, dos);

				// String

				writeString(this.host_name, dos);

				// Object

				dos.writeObject(this.cluster_id);

				// Short

				if (this.host_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.host_type);
				}

				// String

				writeString(this.fqdn_or_ip, dos);

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// Integer

				writeInteger(this.swap_size_mb, dos);

				// String

				writeString(this.cpu_model, dos);

				// Short

				if (this.number_of_cores == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_cores);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Double

				if (this.cpu_speed_mh == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.cpu_speed_mh);
				}

				// String

				writeString(this.host_os, dos);

				// String

				writeString(this.pm_ip_address, dos);

				// String

				writeString(this.kernel_version, dos);

				// String

				writeString(this.kvm_version, dos);

				// String

				writeString(this.vdsm_version, dos);

				// Integer

				writeInteger(this.vdsm_port, dos);

				// Integer

				writeInteger(this.cluster_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_join_id=" + host_join_id);
			sb.append(",host_unique_id=" + host_unique_id);
			sb.append(",host_name=" + host_name);
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",host_type=" + String.valueOf(host_type));
			sb.append(",fqdn_or_ip=" + fqdn_or_ip);
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",swap_size_mb=" + String.valueOf(swap_size_mb));
			sb.append(",cpu_model=" + cpu_model);
			sb.append(",number_of_cores=" + String.valueOf(number_of_cores));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",cpu_speed_mh=" + String.valueOf(cpu_speed_mh));
			sb.append(",host_os=" + host_os);
			sb.append(",pm_ip_address=" + pm_ip_address);
			sb.append(",kernel_version=" + kernel_version);
			sb.append(",kvm_version=" + kvm_version);
			sb.append(",vdsm_version=" + vdsm_version);
			sb.append(",vdsm_port=" + String.valueOf(vdsm_port));
			sb.append(",cluster_configuration_version="
					+ String.valueOf(cluster_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_22Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_21Process(globalMap);

				row21Struct row21 = new row21Struct();
				delete_hostsStruct delete_hosts = new delete_hostsStruct();

				/**
				 * [tJDBCOutput_17 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_17", false);
				start_Hash.put("tJDBCOutput_17", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_17";

				int tos_count_tJDBCOutput_17 = 0;

				int nb_line_tJDBCOutput_17 = 0;
				int nb_line_update_tJDBCOutput_17 = 0;
				int nb_line_inserted_tJDBCOutput_17 = 0;
				int nb_line_deleted_tJDBCOutput_17 = 0;
				int nb_line_rejected_tJDBCOutput_17 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_17 = 0;

				int deletedCount_tJDBCOutput_17 = 0;
				int updatedCount_tJDBCOutput_17 = 0;
				int insertedCount_tJDBCOutput_17 = 0;
				int rejectedCount_tJDBCOutput_17 = 0;

				boolean whetherReject_tJDBCOutput_17 = false;

				java.sql.Connection connection_tJDBCOutput_17 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_17 = 10000;
				int batchSizeCounter_tJDBCOutput_17 = 0;

				String insert_tJDBCOutput_17 = "INSERT INTO "
						+ "host_configuration"
						+ " (host_id,host_unique_id,host_name,cluster_id,host_type,fqdn_or_ip,memory_size_mb,swap_size_mb,cpu_model,number_of_cores,number_of_sockets,cpu_speed_mh,host_os,pm_ip_address,kernel_version,kvm_version,vdsm_version,vdsm_port,cluster_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_17 = connection_tJDBCOutput_17
						.prepareStatement(insert_tJDBCOutput_17);

				/**
				 * [tJDBCOutput_17 begin ] stop
				 */

				/**
				 * [tMap_17 begin ] start
				 */

				ok_Hash.put("tMap_17", false);
				start_Hash.put("tMap_17", System.currentTimeMillis());

				currentComponent = "tMap_17";

				int tos_count_tMap_17 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) globalMap
						.get("tHash_Lookup_row20"));

				row20Struct row20HashKey = new row20Struct();
				row20Struct row20Default = new row20Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_17__Struct {
				}
				Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_hostsStruct delete_hosts_tmp = new delete_hostsStruct();
				// ###############################

				/**
				 * [tMap_17 begin ] stop
				 */

				/**
				 * [tJDBCInput_22 begin ] start
				 */

				ok_Hash.put("tJDBCInput_22", false);
				start_Hash.put("tJDBCInput_22", System.currentTimeMillis());

				currentComponent = "tJDBCInput_22";

				int tos_count_tJDBCInput_22 = 0;

				int nb_line_tJDBCInput_22 = 0;
				java.sql.Connection conn_tJDBCInput_22 = null;
				conn_tJDBCInput_22 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_22 = conn_tJDBCInput_22
						.createStatement();

				String dbquery_tJDBCInput_22 = "SELECT history_id,   		host_id,   		upper(cast(host_id as char(36))) as host_join_id,  		host_unique_id,   		host_name,   		cluster_id,   		host_type,   		fqdn_or_ip,   		memory_size_mb,   		swap_size_mb,  		cpu_model,   		number_of_cores,          number_of_sockets,         cpu_speed_mh,  		host_os,   		pm_ip_address,  		kernel_version,   		kvm_version,   		vdsm_version,   		vdsm_port,   		cluster_configuration_version,   		create_date,   		update_date  FROM v3_5_latest_configuration_hosts";

				globalMap.put("tJDBCInput_22_QUERY", dbquery_tJDBCInput_22);
				java.sql.ResultSet rs_tJDBCInput_22 = null;
				try {
					rs_tJDBCInput_22 = stmt_tJDBCInput_22
							.executeQuery(dbquery_tJDBCInput_22);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_22 = rs_tJDBCInput_22
							.getMetaData();
					int colQtyInRs_tJDBCInput_22 = rsmd_tJDBCInput_22
							.getColumnCount();

					String tmpContent_tJDBCInput_22 = null;
					int column_index_tJDBCInput_22 = 1;

					while (rs_tJDBCInput_22.next()) {
						nb_line_tJDBCInput_22++;

						column_index_tJDBCInput_22 = 1;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.history_id = null;
						} else {

							if (rs_tJDBCInput_22
									.getObject(column_index_tJDBCInput_22) != null) {
								row21.history_id = rs_tJDBCInput_22
										.getInt(column_index_tJDBCInput_22);
							} else {
								row21.history_id = null;
							}

						}

						column_index_tJDBCInput_22 = 2;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.host_id = null;
						} else {

							if (rs_tJDBCInput_22
									.getObject(column_index_tJDBCInput_22) != null) {
								row21.host_id = rs_tJDBCInput_22
										.getObject(column_index_tJDBCInput_22);
							} else {
								row21.host_id = null;
							}

						}

						column_index_tJDBCInput_22 = 3;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.host_join_id = null;
						} else {

							tmpContent_tJDBCInput_22 = rs_tJDBCInput_22
									.getString(column_index_tJDBCInput_22);
							if (tmpContent_tJDBCInput_22 != null) {
								row21.host_join_id = tmpContent_tJDBCInput_22;
							} else {
								row21.host_join_id = null;
							}

						}

						column_index_tJDBCInput_22 = 4;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.host_unique_id = null;
						} else {

							tmpContent_tJDBCInput_22 = rs_tJDBCInput_22
									.getString(column_index_tJDBCInput_22);
							if (tmpContent_tJDBCInput_22 != null) {
								row21.host_unique_id = tmpContent_tJDBCInput_22;
							} else {
								row21.host_unique_id = null;
							}

						}

						column_index_tJDBCInput_22 = 5;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.host_name = null;
						} else {

							tmpContent_tJDBCInput_22 = rs_tJDBCInput_22
									.getString(column_index_tJDBCInput_22);
							if (tmpContent_tJDBCInput_22 != null) {
								row21.host_name = tmpContent_tJDBCInput_22;
							} else {
								row21.host_name = null;
							}

						}

						column_index_tJDBCInput_22 = 6;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.cluster_id = null;
						} else {

							if (rs_tJDBCInput_22
									.getObject(column_index_tJDBCInput_22) != null) {
								row21.cluster_id = rs_tJDBCInput_22
										.getObject(column_index_tJDBCInput_22);
							} else {
								row21.cluster_id = null;
							}

						}

						column_index_tJDBCInput_22 = 7;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.host_type = null;
						} else {

							if (rs_tJDBCInput_22
									.getObject(column_index_tJDBCInput_22) != null) {
								row21.host_type = rs_tJDBCInput_22
										.getShort(column_index_tJDBCInput_22);
							} else {
								row21.host_type = null;
							}

						}

						column_index_tJDBCInput_22 = 8;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.fqdn_or_ip = null;
						} else {

							tmpContent_tJDBCInput_22 = rs_tJDBCInput_22
									.getString(column_index_tJDBCInput_22);
							if (tmpContent_tJDBCInput_22 != null) {
								row21.fqdn_or_ip = tmpContent_tJDBCInput_22;
							} else {
								row21.fqdn_or_ip = null;
							}

						}

						column_index_tJDBCInput_22 = 9;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.memory_size_mb = null;
						} else {

							if (rs_tJDBCInput_22
									.getObject(column_index_tJDBCInput_22) != null) {
								row21.memory_size_mb = rs_tJDBCInput_22
										.getInt(column_index_tJDBCInput_22);
							} else {
								row21.memory_size_mb = null;
							}

						}

						column_index_tJDBCInput_22 = 10;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.swap_size_mb = null;
						} else {

							if (rs_tJDBCInput_22
									.getObject(column_index_tJDBCInput_22) != null) {
								row21.swap_size_mb = rs_tJDBCInput_22
										.getInt(column_index_tJDBCInput_22);
							} else {
								row21.swap_size_mb = null;
							}

						}

						column_index_tJDBCInput_22 = 11;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.cpu_model = null;
						} else {

							tmpContent_tJDBCInput_22 = rs_tJDBCInput_22
									.getString(column_index_tJDBCInput_22);
							if (tmpContent_tJDBCInput_22 != null) {
								row21.cpu_model = tmpContent_tJDBCInput_22;
							} else {
								row21.cpu_model = null;
							}

						}

						column_index_tJDBCInput_22 = 12;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.number_of_cores = null;
						} else {

							if (rs_tJDBCInput_22
									.getObject(column_index_tJDBCInput_22) != null) {
								row21.number_of_cores = rs_tJDBCInput_22
										.getShort(column_index_tJDBCInput_22);
							} else {
								row21.number_of_cores = null;
							}

						}

						column_index_tJDBCInput_22 = 13;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.number_of_sockets = null;
						} else {

							if (rs_tJDBCInput_22
									.getObject(column_index_tJDBCInput_22) != null) {
								row21.number_of_sockets = rs_tJDBCInput_22
										.getShort(column_index_tJDBCInput_22);
							} else {
								row21.number_of_sockets = null;
							}

						}

						column_index_tJDBCInput_22 = 14;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.cpu_speed_mh = null;
						} else {

							if (rs_tJDBCInput_22
									.getObject(column_index_tJDBCInput_22) != null) {
								row21.cpu_speed_mh = rs_tJDBCInput_22
										.getDouble(column_index_tJDBCInput_22);
							} else {
								row21.cpu_speed_mh = null;
							}

						}

						column_index_tJDBCInput_22 = 15;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.host_os = null;
						} else {

							tmpContent_tJDBCInput_22 = rs_tJDBCInput_22
									.getString(column_index_tJDBCInput_22);
							if (tmpContent_tJDBCInput_22 != null) {
								row21.host_os = tmpContent_tJDBCInput_22;
							} else {
								row21.host_os = null;
							}

						}

						column_index_tJDBCInput_22 = 16;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.pm_ip_address = null;
						} else {

							tmpContent_tJDBCInput_22 = rs_tJDBCInput_22
									.getString(column_index_tJDBCInput_22);
							if (tmpContent_tJDBCInput_22 != null) {
								row21.pm_ip_address = tmpContent_tJDBCInput_22;
							} else {
								row21.pm_ip_address = null;
							}

						}

						column_index_tJDBCInput_22 = 17;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.kernel_version = null;
						} else {

							tmpContent_tJDBCInput_22 = rs_tJDBCInput_22
									.getString(column_index_tJDBCInput_22);
							if (tmpContent_tJDBCInput_22 != null) {
								row21.kernel_version = tmpContent_tJDBCInput_22;
							} else {
								row21.kernel_version = null;
							}

						}

						column_index_tJDBCInput_22 = 18;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.kvm_version = null;
						} else {

							tmpContent_tJDBCInput_22 = rs_tJDBCInput_22
									.getString(column_index_tJDBCInput_22);
							if (tmpContent_tJDBCInput_22 != null) {
								row21.kvm_version = tmpContent_tJDBCInput_22;
							} else {
								row21.kvm_version = null;
							}

						}

						column_index_tJDBCInput_22 = 19;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.vdsm_version = null;
						} else {

							tmpContent_tJDBCInput_22 = rs_tJDBCInput_22
									.getString(column_index_tJDBCInput_22);
							if (tmpContent_tJDBCInput_22 != null) {
								row21.vdsm_version = tmpContent_tJDBCInput_22;
							} else {
								row21.vdsm_version = null;
							}

						}

						column_index_tJDBCInput_22 = 20;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.vdsm_port = null;
						} else {

							if (rs_tJDBCInput_22
									.getObject(column_index_tJDBCInput_22) != null) {
								row21.vdsm_port = rs_tJDBCInput_22
										.getInt(column_index_tJDBCInput_22);
							} else {
								row21.vdsm_port = null;
							}

						}

						column_index_tJDBCInput_22 = 21;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.cluster_configuration_version = null;
						} else {

							if (rs_tJDBCInput_22
									.getObject(column_index_tJDBCInput_22) != null) {
								row21.cluster_configuration_version = rs_tJDBCInput_22
										.getInt(column_index_tJDBCInput_22);
							} else {
								row21.cluster_configuration_version = null;
							}

						}

						column_index_tJDBCInput_22 = 22;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_22 = null;
							try {
								date_tJDBCInput_22 = rs_tJDBCInput_22
										.getTimestamp(column_index_tJDBCInput_22);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_22 = rs_tJDBCInput_22
										.getDate(column_index_tJDBCInput_22);
							}
							row21.create_date = date_tJDBCInput_22;

						}

						column_index_tJDBCInput_22 = 23;

						if (colQtyInRs_tJDBCInput_22 < column_index_tJDBCInput_22) {
							row21.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_22 = null;
							try {
								date_tJDBCInput_22 = rs_tJDBCInput_22
										.getTimestamp(column_index_tJDBCInput_22);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_22 = rs_tJDBCInput_22
										.getDate(column_index_tJDBCInput_22);
							}
							row21.update_date = date_tJDBCInput_22;

						}

						/**
						 * [tJDBCInput_22 begin ] stop
						 */
						/**
						 * [tJDBCInput_22 main ] start
						 */

						currentComponent = "tJDBCInput_22";

						tos_count_tJDBCInput_22++;

						/**
						 * [tJDBCInput_22 main ] stop
						 */

						/**
						 * [tMap_17 main ] start
						 */

						currentComponent = "tMap_17";

						boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_17 = false;
						boolean mainRowRejected_tMap_17 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row20"
						// /////////////////////////////////////////////

						boolean forceLooprow20 = false;

						row20Struct row20ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_17) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_17 = false;

							row20HashKey.host_join_id = row21.host_join_id;

							row20HashKey.hashCodeDirty = true;

							tHash_Lookup_row20.lookup(row20HashKey);

							if (!tHash_Lookup_row20.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_17 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row20 != null
								&& tHash_Lookup_row20.getCount(row20HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row20' and it contains more one result from keys :  row20.host_join_id = '"
							// + row20HashKey.host_join_id + "'");
						} // G 071

						row20Struct row20 = null;

						row20Struct fromLookup_row20 = null;
						row20 = row20Default;

						if (tHash_Lookup_row20 != null
								&& tHash_Lookup_row20.hasNext()) { // G 099

							fromLookup_row20 = tHash_Lookup_row20.next();

						} // G 099

						if (fromLookup_row20 != null) {
							row20 = fromLookup_row20;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
							// ###############################
							// # Output tables

							delete_hosts = null;

							if (!rejectedInnerJoin_tMap_17) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'delete_hosts'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_17) {
								delete_hosts_tmp.host_id = row21.host_id;
								delete_hosts_tmp.host_unique_id = row21.host_unique_id;
								delete_hosts_tmp.host_name = row21.host_name;
								delete_hosts_tmp.cluster_id = row21.cluster_id;
								delete_hosts_tmp.host_type = row21.host_type;
								delete_hosts_tmp.fqdn_or_ip = row21.fqdn_or_ip;
								delete_hosts_tmp.memory_size_mb = row21.memory_size_mb;
								delete_hosts_tmp.swap_size_mb = row21.swap_size_mb;
								delete_hosts_tmp.cpu_model = row21.cpu_model;
								delete_hosts_tmp.number_of_cores = row21.number_of_cores;
								delete_hosts_tmp.number_of_sockets = row21.number_of_sockets;
								delete_hosts_tmp.cpu_speed_mh = row21.cpu_speed_mh;
								delete_hosts_tmp.host_os = row21.host_os;
								delete_hosts_tmp.pm_ip_address = row21.pm_ip_address;
								delete_hosts_tmp.kernel_version = row21.kernel_version;
								delete_hosts_tmp.kvm_version = row21.kvm_version;
								delete_hosts_tmp.vdsm_version = row21.vdsm_version;
								delete_hosts_tmp.vdsm_port = row21.vdsm_port;
								delete_hosts_tmp.cluster_configuration_version = row21.cluster_configuration_version;
								delete_hosts_tmp.create_date = row21.create_date;
								delete_hosts_tmp.update_date = context.runTime;
								delete_hosts_tmp.delete_date = context.runTime;
								delete_hosts = delete_hosts_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_17 = false;

						tos_count_tMap_17++;

						/**
						 * [tMap_17 main ] stop
						 */
						// Start of branch "delete_hosts"
						if (delete_hosts != null) {

							/**
							 * [tJDBCOutput_17 main ] start
							 */

							currentComponent = "tJDBCOutput_17";

							whetherReject_tJDBCOutput_17 = false;
							if (delete_hosts.host_id == null) {
								pstmt_tJDBCOutput_17.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_17.setObject(1,
										delete_hosts.host_id);
							}

							if (delete_hosts.host_unique_id == null) {
								pstmt_tJDBCOutput_17.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_17.setString(2,
										delete_hosts.host_unique_id);
							}

							if (delete_hosts.host_name == null) {
								pstmt_tJDBCOutput_17.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_17.setString(3,
										delete_hosts.host_name);
							}

							if (delete_hosts.cluster_id == null) {
								pstmt_tJDBCOutput_17.setNull(4,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_17.setObject(4,
										delete_hosts.cluster_id);
							}

							pstmt_tJDBCOutput_17.setShort(5,
									delete_hosts.host_type);

							if (delete_hosts.fqdn_or_ip == null) {
								pstmt_tJDBCOutput_17.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_17.setString(6,
										delete_hosts.fqdn_or_ip);
							}

							if (delete_hosts.memory_size_mb == null) {
								pstmt_tJDBCOutput_17.setNull(7,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_17.setInt(7,
										delete_hosts.memory_size_mb);
							}

							if (delete_hosts.swap_size_mb == null) {
								pstmt_tJDBCOutput_17.setNull(8,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_17.setInt(8,
										delete_hosts.swap_size_mb);
							}

							if (delete_hosts.cpu_model == null) {
								pstmt_tJDBCOutput_17.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_17.setString(9,
										delete_hosts.cpu_model);
							}

							if (delete_hosts.number_of_cores == null) {
								pstmt_tJDBCOutput_17.setNull(10,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_17.setShort(10,
										delete_hosts.number_of_cores);
							}

							if (delete_hosts.number_of_sockets == null) {
								pstmt_tJDBCOutput_17.setNull(11,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_17.setShort(11,
										delete_hosts.number_of_sockets);
							}

							if (delete_hosts.cpu_speed_mh == null) {
								pstmt_tJDBCOutput_17.setNull(12,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tJDBCOutput_17.setDouble(12,
										delete_hosts.cpu_speed_mh);
							}

							if (delete_hosts.host_os == null) {
								pstmt_tJDBCOutput_17.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_17.setString(13,
										delete_hosts.host_os);
							}

							if (delete_hosts.pm_ip_address == null) {
								pstmt_tJDBCOutput_17.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_17.setString(14,
										delete_hosts.pm_ip_address);
							}

							if (delete_hosts.kernel_version == null) {
								pstmt_tJDBCOutput_17.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_17.setString(15,
										delete_hosts.kernel_version);
							}

							if (delete_hosts.kvm_version == null) {
								pstmt_tJDBCOutput_17.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_17.setString(16,
										delete_hosts.kvm_version);
							}

							if (delete_hosts.vdsm_version == null) {
								pstmt_tJDBCOutput_17.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_17.setString(17,
										delete_hosts.vdsm_version);
							}

							pstmt_tJDBCOutput_17.setInt(18,
									delete_hosts.vdsm_port);

							if (delete_hosts.cluster_configuration_version == null) {
								pstmt_tJDBCOutput_17.setNull(19,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_17
										.setInt(19,
												delete_hosts.cluster_configuration_version);
							}

							if (delete_hosts.create_date != null) {
								pstmt_tJDBCOutput_17.setTimestamp(
										20,
										new java.sql.Timestamp(
												delete_hosts.create_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_17.setNull(20,
										java.sql.Types.DATE);
							}

							if (delete_hosts.update_date != null) {
								pstmt_tJDBCOutput_17.setTimestamp(
										21,
										new java.sql.Timestamp(
												delete_hosts.update_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_17.setNull(21,
										java.sql.Types.DATE);
							}

							if (delete_hosts.delete_date != null) {
								pstmt_tJDBCOutput_17.setTimestamp(
										22,
										new java.sql.Timestamp(
												delete_hosts.delete_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_17.setNull(22,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tJDBCOutput_17 = insertedCount_tJDBCOutput_17
										+ pstmt_tJDBCOutput_17.executeUpdate();
								nb_line_tJDBCOutput_17++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_17 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_17++;

							/**
							 * [tJDBCOutput_17 main ] stop
							 */

						} // End of branch "delete_hosts"

						/**
						 * [tJDBCInput_22 end ] start
						 */

						currentComponent = "tJDBCInput_22";

					}
				} finally {
					rs_tJDBCInput_22.close();
					stmt_tJDBCInput_22.close();

				}
				globalMap.put("tJDBCInput_22_NB_LINE", nb_line_tJDBCInput_22);

				ok_Hash.put("tJDBCInput_22", true);
				end_Hash.put("tJDBCInput_22", System.currentTimeMillis());

				/**
				 * [tJDBCInput_22 end ] stop
				 */

				/**
				 * [tMap_17 end ] start
				 */

				currentComponent = "tMap_17";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row20 != null) {
					tHash_Lookup_row20.endGet();
				}
				globalMap.remove("tHash_Lookup_row20");

				// ###############################

				ok_Hash.put("tMap_17", true);
				end_Hash.put("tMap_17", System.currentTimeMillis());

				/**
				 * [tMap_17 end ] stop
				 */

				/**
				 * [tJDBCOutput_17 end ] start
				 */

				currentComponent = "tJDBCOutput_17";

				if (pstmt_tJDBCOutput_17 != null) {

					pstmt_tJDBCOutput_17.close();

				}

				nb_line_deleted_tJDBCOutput_17 = nb_line_deleted_tJDBCOutput_17
						+ deletedCount_tJDBCOutput_17;
				nb_line_update_tJDBCOutput_17 = nb_line_update_tJDBCOutput_17
						+ updatedCount_tJDBCOutput_17;
				nb_line_inserted_tJDBCOutput_17 = nb_line_inserted_tJDBCOutput_17
						+ insertedCount_tJDBCOutput_17;
				nb_line_rejected_tJDBCOutput_17 = nb_line_rejected_tJDBCOutput_17
						+ rejectedCount_tJDBCOutput_17;

				globalMap.put("tJDBCOutput_17_NB_LINE", nb_line_tJDBCOutput_17);
				globalMap.put("tJDBCOutput_17_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_17);
				globalMap.put("tJDBCOutput_17_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_17);
				globalMap.put("tJDBCOutput_17_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_17);
				globalMap.put("tJDBCOutput_17_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_17);

				ok_Hash.put("tJDBCOutput_17", true);
				end_Hash.put("tJDBCOutput_17", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_17 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_22:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_17"
			globalMap.remove("tHash_Lookup_row20");

			try {

				/**
				 * [tJDBCInput_22 finally ] start
				 */

				currentComponent = "tJDBCInput_22";

				/**
				 * [tJDBCInput_22 finally ] stop
				 */

				/**
				 * [tMap_17 finally ] start
				 */

				currentComponent = "tMap_17";

				/**
				 * [tMap_17 finally ] stop
				 */

				/**
				 * [tJDBCOutput_17 finally ] start
				 */

				currentComponent = "tJDBCOutput_17";

				/**
				 * [tJDBCOutput_17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_22_SUBPROCESS_STATE", 1);
	}

	public static class hinterface_configurationStruct implements
			routines.system.IPersistableRow<hinterface_configurationStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object host_interface_id;

		public Object getHost_interface_id() {
			return this.host_interface_id;
		}

		public String host_interface_name;

		public String getHost_interface_name() {
			return this.host_interface_name;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public Short host_interface_type;

		public Short getHost_interface_type() {
			return this.host_interface_type;
		}

		public Integer host_interface_speed_bps;

		public Integer getHost_interface_speed_bps() {
			return this.host_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public String ip_address;

		public String getIp_address() {
			return this.ip_address;
		}

		public String gateway;

		public String getGateway() {
			return this.gateway;
		}

		public Boolean bond;

		public Boolean getBond() {
			return this.bond;
		}

		public String bond_name;

		public String getBond_name() {
			return this.bond_name;
		}

		public Integer vlan_id;

		public Integer getVlan_id() {
			return this.vlan_id;
		}

		public Integer host_configuration_version;

		public Integer getHost_configuration_version() {
			return this.host_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_interface_id = (Object) dis.readObject();

					this.host_interface_name = readString(dis);

					this.host_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.host_interface_type = null;
					} else {
						this.host_interface_type = dis.readShort();
					}

					this.host_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.ip_address = readString(dis);

					this.gateway = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.bond = null;
					} else {
						this.bond = dis.readBoolean();
					}

					this.bond_name = readString(dis);

					this.vlan_id = readInteger(dis);

					this.host_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.host_interface_id);

				// String

				writeString(this.host_interface_name, dos);

				// Object

				dos.writeObject(this.host_id);

				// Short

				if (this.host_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.host_interface_type);
				}

				// Integer

				writeInteger(this.host_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// String

				writeString(this.ip_address, dos);

				// String

				writeString(this.gateway, dos);

				// Boolean

				if (this.bond == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.bond);
				}

				// String

				writeString(this.bond_name, dos);

				// Integer

				writeInteger(this.vlan_id, dos);

				// Integer

				writeInteger(this.host_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("host_interface_id=" + String.valueOf(host_interface_id));
			sb.append(",host_interface_name=" + host_interface_name);
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_interface_type="
					+ String.valueOf(host_interface_type));
			sb.append(",host_interface_speed_bps="
					+ String.valueOf(host_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",ip_address=" + ip_address);
			sb.append(",gateway=" + gateway);
			sb.append(",bond=" + String.valueOf(bond));
			sb.append(",bond_name=" + bond_name);
			sb.append(",vlan_id=" + String.valueOf(vlan_id));
			sb.append(",host_configuration_version="
					+ String.valueOf(host_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(hinterface_configurationStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object host_interface_id;

		public Object getHost_interface_id() {
			return this.host_interface_id;
		}

		public String host_interface_name;

		public String getHost_interface_name() {
			return this.host_interface_name;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public String host_join_id;

		public String getHost_join_id() {
			return this.host_join_id;
		}

		public Short host_interface_type;

		public Short getHost_interface_type() {
			return this.host_interface_type;
		}

		public Integer host_interface_speed_bps;

		public Integer getHost_interface_speed_bps() {
			return this.host_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public String ip_address;

		public String getIp_address() {
			return this.ip_address;
		}

		public String gateway;

		public String getGateway() {
			return this.gateway;
		}

		public Boolean bond;

		public Boolean getBond() {
			return this.bond;
		}

		public String bond_name;

		public String getBond_name() {
			return this.bond_name;
		}

		public Integer vlan_id;

		public Integer getVlan_id() {
			return this.vlan_id;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_interface_id = (Object) dis.readObject();

					this.host_interface_name = readString(dis);

					this.host_id = (Object) dis.readObject();

					this.host_join_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.host_interface_type = null;
					} else {
						this.host_interface_type = dis.readShort();
					}

					this.host_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.ip_address = readString(dis);

					this.gateway = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.bond = null;
					} else {
						this.bond = dis.readBoolean();
					}

					this.bond_name = readString(dis);

					this.vlan_id = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.host_interface_id);

				// String

				writeString(this.host_interface_name, dos);

				// Object

				dos.writeObject(this.host_id);

				// String

				writeString(this.host_join_id, dos);

				// Short

				if (this.host_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.host_interface_type);
				}

				// Integer

				writeInteger(this.host_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// String

				writeString(this.ip_address, dos);

				// String

				writeString(this.gateway, dos);

				// Boolean

				if (this.bond == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.bond);
				}

				// String

				writeString(this.bond_name, dos);

				// Integer

				writeInteger(this.vlan_id, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("host_interface_id=" + String.valueOf(host_interface_id));
			sb.append(",host_interface_name=" + host_interface_name);
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_join_id=" + host_join_id);
			sb.append(",host_interface_type="
					+ String.valueOf(host_interface_type));
			sb.append(",host_interface_speed_bps="
					+ String.valueOf(host_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",ip_address=" + ip_address);
			sb.append(",gateway=" + gateway);
			sb.append(",bond=" + String.valueOf(bond));
			sb.append(",bond_name=" + bond_name);
			sb.append(",vlan_id=" + String.valueOf(vlan_id));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_5Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_5Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object host_interface_id;

		public Object getHost_interface_id() {
			return this.host_interface_id;
		}

		public String host_interface_name;

		public String getHost_interface_name() {
			return this.host_interface_name;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public String host_join_id;

		public String getHost_join_id() {
			return this.host_join_id;
		}

		public Short host_interface_type;

		public Short getHost_interface_type() {
			return this.host_interface_type;
		}

		public Integer host_interface_speed_bps;

		public Integer getHost_interface_speed_bps() {
			return this.host_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public String ip_address;

		public String getIp_address() {
			return this.ip_address;
		}

		public String gateway;

		public String getGateway() {
			return this.gateway;
		}

		public Boolean bond;

		public Boolean getBond() {
			return this.bond;
		}

		public String bond_name;

		public String getBond_name() {
			return this.bond_name;
		}

		public Integer vlan_id;

		public Integer getVlan_id() {
			return this.vlan_id;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_interface_id = (Object) dis.readObject();

					this.host_interface_name = readString(dis);

					this.host_id = (Object) dis.readObject();

					this.host_join_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.host_interface_type = null;
					} else {
						this.host_interface_type = dis.readShort();
					}

					this.host_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.ip_address = readString(dis);

					this.gateway = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.bond = null;
					} else {
						this.bond = dis.readBoolean();
					}

					this.bond_name = readString(dis);

					this.vlan_id = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.host_interface_id);

				// String

				writeString(this.host_interface_name, dos);

				// Object

				dos.writeObject(this.host_id);

				// String

				writeString(this.host_join_id, dos);

				// Short

				if (this.host_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.host_interface_type);
				}

				// Integer

				writeInteger(this.host_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// String

				writeString(this.ip_address, dos);

				// String

				writeString(this.gateway, dos);

				// Boolean

				if (this.bond == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.bond);
				}

				// String

				writeString(this.bond_name, dos);

				// Integer

				writeInteger(this.vlan_id, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("host_interface_id=" + String.valueOf(host_interface_id));
			sb.append(",host_interface_name=" + host_interface_name);
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_join_id=" + host_join_id);
			sb.append(",host_interface_type="
					+ String.valueOf(host_interface_type));
			sb.append(",host_interface_speed_bps="
					+ String.valueOf(host_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",ip_address=" + ip_address);
			sb.append(",gateway=" + gateway);
			sb.append(",bond=" + String.valueOf(bond));
			sb.append(",bond_name=" + bond_name);
			sb.append(",vlan_id=" + String.valueOf(vlan_id));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_41Process(globalMap);

				row2Struct row2 = new row2Struct();
				hinterface_configurationStruct hinterface_configuration = new hinterface_configurationStruct();

				/**
				 * [tJDBCOutput_5 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_5", false);
				start_Hash.put("tJDBCOutput_5", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_5";

				int tos_count_tJDBCOutput_5 = 0;

				int nb_line_tJDBCOutput_5 = 0;
				int nb_line_update_tJDBCOutput_5 = 0;
				int nb_line_inserted_tJDBCOutput_5 = 0;
				int nb_line_deleted_tJDBCOutput_5 = 0;
				int nb_line_rejected_tJDBCOutput_5 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_5 = 0;

				int deletedCount_tJDBCOutput_5 = 0;
				int updatedCount_tJDBCOutput_5 = 0;
				int insertedCount_tJDBCOutput_5 = 0;
				int rejectedCount_tJDBCOutput_5 = 0;

				boolean whetherReject_tJDBCOutput_5 = false;

				java.sql.Connection connection_tJDBCOutput_5 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_5 = 10000;
				int batchSizeCounter_tJDBCOutput_5 = 0;

				String insert_tJDBCOutput_5 = "INSERT INTO "
						+ "host_interface_configuration"
						+ " (host_interface_id,host_interface_name,host_id,host_interface_type,host_interface_speed_bps,mac_address,logical_network_name,ip_address,gateway,bond,bond_name,vlan_id,host_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_5 = connection_tJDBCOutput_5
						.prepareStatement(insert_tJDBCOutput_5);

				/**
				 * [tJDBCOutput_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) globalMap
						.get("tHash_Lookup_row37"));

				row37Struct row37HashKey = new row37Struct();
				row37Struct row37Default = new row37Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				hinterface_configurationStruct hinterface_configuration_tmp = new hinterface_configurationStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tJDBCInput_5 begin ] start
				 */

				ok_Hash.put("tJDBCInput_5", false);
				start_Hash.put("tJDBCInput_5", System.currentTimeMillis());

				currentComponent = "tJDBCInput_5";

				int tos_count_tJDBCInput_5 = 0;

				int nb_line_tJDBCInput_5 = 0;
				java.sql.Connection conn_tJDBCInput_5 = null;
				conn_tJDBCInput_5 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_5 = conn_tJDBCInput_5
						.createStatement();

				String dbquery_tJDBCInput_5 = "SELECT     host_interface_id,     host_interface_name,     host_id,     upper(cast(host_id as char(36))) as host_join_id,    host_interface_type,     host_interface_speed_bps,     mac_address,     logical_network_name,     ip_address,     gateway,     bond,     bond_name,     vlan_id,     create_date,     update_date  FROM dwh_host_interface_configuration_history_view";

				globalMap.put("tJDBCInput_5_QUERY", dbquery_tJDBCInput_5);
				java.sql.ResultSet rs_tJDBCInput_5 = null;
				try {
					rs_tJDBCInput_5 = stmt_tJDBCInput_5
							.executeQuery(dbquery_tJDBCInput_5);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_5 = rs_tJDBCInput_5
							.getMetaData();
					int colQtyInRs_tJDBCInput_5 = rsmd_tJDBCInput_5
							.getColumnCount();

					String tmpContent_tJDBCInput_5 = null;
					int column_index_tJDBCInput_5 = 1;

					while (rs_tJDBCInput_5.next()) {
						nb_line_tJDBCInput_5++;

						column_index_tJDBCInput_5 = 1;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.host_interface_id = null;
						} else {

							if (rs_tJDBCInput_5
									.getObject(column_index_tJDBCInput_5) != null) {
								row2.host_interface_id = rs_tJDBCInput_5
										.getObject(column_index_tJDBCInput_5);
							} else {
								row2.host_interface_id = null;
							}

						}

						column_index_tJDBCInput_5 = 2;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.host_interface_name = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row2.host_interface_name = tmpContent_tJDBCInput_5;
							} else {
								row2.host_interface_name = null;
							}

						}

						column_index_tJDBCInput_5 = 3;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.host_id = null;
						} else {

							if (rs_tJDBCInput_5
									.getObject(column_index_tJDBCInput_5) != null) {
								row2.host_id = rs_tJDBCInput_5
										.getObject(column_index_tJDBCInput_5);
							} else {
								row2.host_id = null;
							}

						}

						column_index_tJDBCInput_5 = 4;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.host_join_id = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row2.host_join_id = tmpContent_tJDBCInput_5;
							} else {
								row2.host_join_id = null;
							}

						}

						column_index_tJDBCInput_5 = 5;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.host_interface_type = null;
						} else {

							if (rs_tJDBCInput_5
									.getObject(column_index_tJDBCInput_5) != null) {
								row2.host_interface_type = rs_tJDBCInput_5
										.getShort(column_index_tJDBCInput_5);
							} else {
								row2.host_interface_type = null;
							}

						}

						column_index_tJDBCInput_5 = 6;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.host_interface_speed_bps = null;
						} else {

							if (rs_tJDBCInput_5
									.getObject(column_index_tJDBCInput_5) != null) {
								row2.host_interface_speed_bps = rs_tJDBCInput_5
										.getInt(column_index_tJDBCInput_5);
							} else {
								row2.host_interface_speed_bps = null;
							}

						}

						column_index_tJDBCInput_5 = 7;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.mac_address = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row2.mac_address = tmpContent_tJDBCInput_5;
							} else {
								row2.mac_address = null;
							}

						}

						column_index_tJDBCInput_5 = 8;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.logical_network_name = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row2.logical_network_name = tmpContent_tJDBCInput_5;
							} else {
								row2.logical_network_name = null;
							}

						}

						column_index_tJDBCInput_5 = 9;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.ip_address = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row2.ip_address = tmpContent_tJDBCInput_5;
							} else {
								row2.ip_address = null;
							}

						}

						column_index_tJDBCInput_5 = 10;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.gateway = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row2.gateway = tmpContent_tJDBCInput_5;
							} else {
								row2.gateway = null;
							}

						}

						column_index_tJDBCInput_5 = 11;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.bond = null;
						} else {

							if (rs_tJDBCInput_5
									.getObject(column_index_tJDBCInput_5) != null) {
								row2.bond = rs_tJDBCInput_5
										.getBoolean(column_index_tJDBCInput_5);
							} else {
								row2.bond = null;
							}

						}

						column_index_tJDBCInput_5 = 12;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.bond_name = null;
						} else {

							tmpContent_tJDBCInput_5 = rs_tJDBCInput_5
									.getString(column_index_tJDBCInput_5);
							if (tmpContent_tJDBCInput_5 != null) {
								row2.bond_name = tmpContent_tJDBCInput_5;
							} else {
								row2.bond_name = null;
							}

						}

						column_index_tJDBCInput_5 = 13;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.vlan_id = null;
						} else {

							if (rs_tJDBCInput_5
									.getObject(column_index_tJDBCInput_5) != null) {
								row2.vlan_id = rs_tJDBCInput_5
										.getInt(column_index_tJDBCInput_5);
							} else {
								row2.vlan_id = null;
							}

						}

						column_index_tJDBCInput_5 = 14;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_5 = null;
							try {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getTimestamp(column_index_tJDBCInput_5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getDate(column_index_tJDBCInput_5);
							}
							row2.create_date = date_tJDBCInput_5;

						}

						column_index_tJDBCInput_5 = 15;

						if (colQtyInRs_tJDBCInput_5 < column_index_tJDBCInput_5) {
							row2.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_5 = null;
							try {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getTimestamp(column_index_tJDBCInput_5);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_5 = rs_tJDBCInput_5
										.getDate(column_index_tJDBCInput_5);
							}
							row2.update_date = date_tJDBCInput_5;

						}

						/**
						 * [tJDBCInput_5 begin ] stop
						 */
						/**
						 * [tJDBCInput_5 main ] start
						 */

						currentComponent = "tJDBCInput_5";

						tos_count_tJDBCInput_5++;

						/**
						 * [tJDBCInput_5 main ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						if (

						(

						row2.update_date == null ? TalendDate.compareDate(
								row2.create_date, context.runTime) <= 0
								: TalendDate.compareDate(row2.update_date,
										context.runTime) <= 0

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row2'

							// /////////////////////////////////////////////
							// Starting Lookup Table "row37"
							// /////////////////////////////////////////////

							boolean forceLooprow37 = false;

							row37Struct row37ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_5 = false;

								row37HashKey.host_join_id = row2.host_join_id;

								row37HashKey.hashCodeDirty = true;

								tHash_Lookup_row37.lookup(row37HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row37 != null
									&& tHash_Lookup_row37
											.getCount(row37HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row37' and it contains more one result from keys :  row37.host_join_id = '"
								// + row37HashKey.host_join_id + "'");
							} // G 071

							row37Struct row37 = null;

							row37Struct fromLookup_row37 = null;
							row37 = row37Default;

							if (tHash_Lookup_row37 != null
									&& tHash_Lookup_row37.hasNext()) { // G 099

								fromLookup_row37 = tHash_Lookup_row37.next();

							} // G 099

							if (fromLookup_row37 != null) {
								row37 = fromLookup_row37;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
								// ###############################
								// # Output tables

								hinterface_configuration = null;

								// # Output table : 'hinterface_configuration'
								hinterface_configuration_tmp.host_interface_id = row2.host_interface_id;
								hinterface_configuration_tmp.host_interface_name = StringHandling
										.TRIM(row2.host_interface_name);
								hinterface_configuration_tmp.host_id = row2.host_id;
								hinterface_configuration_tmp.host_interface_type = row2.host_interface_type;
								hinterface_configuration_tmp.host_interface_speed_bps = row2.host_interface_speed_bps;
								hinterface_configuration_tmp.mac_address = StringHandling
										.TRIM(row2.mac_address);
								hinterface_configuration_tmp.logical_network_name = StringHandling
										.TRIM(row2.logical_network_name);
								hinterface_configuration_tmp.ip_address = StringHandling
										.TRIM(row2.ip_address);
								hinterface_configuration_tmp.gateway = StringHandling
										.TRIM(row2.gateway);
								hinterface_configuration_tmp.bond = row2.bond;
								hinterface_configuration_tmp.bond_name = StringHandling
										.TRIM(row2.bond_name);
								hinterface_configuration_tmp.vlan_id = row2.vlan_id;
								hinterface_configuration_tmp.host_configuration_version = row37.history_id;
								hinterface_configuration_tmp.create_date = row2.create_date;
								hinterface_configuration_tmp.update_date = row2.update_date;
								hinterface_configuration_tmp.delete_date = null;
								hinterface_configuration = hinterface_configuration_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */
							// Start of branch "hinterface_configuration"
							if (hinterface_configuration != null) {

								/**
								 * [tJDBCOutput_5 main ] start
								 */

								currentComponent = "tJDBCOutput_5";

								whetherReject_tJDBCOutput_5 = false;
								if (hinterface_configuration.host_interface_id == null) {
									pstmt_tJDBCOutput_5.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_5
											.setObject(
													1,
													hinterface_configuration.host_interface_id);
								}

								if (hinterface_configuration.host_interface_name == null) {
									pstmt_tJDBCOutput_5.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_5
											.setString(
													2,
													hinterface_configuration.host_interface_name);
								}

								if (hinterface_configuration.host_id == null) {
									pstmt_tJDBCOutput_5.setNull(3,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_5.setObject(3,
											hinterface_configuration.host_id);
								}

								if (hinterface_configuration.host_interface_type == null) {
									pstmt_tJDBCOutput_5.setNull(4,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_5
											.setShort(
													4,
													hinterface_configuration.host_interface_type);
								}

								if (hinterface_configuration.host_interface_speed_bps == null) {
									pstmt_tJDBCOutput_5.setNull(5,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_5
											.setInt(5,
													hinterface_configuration.host_interface_speed_bps);
								}

								if (hinterface_configuration.mac_address == null) {
									pstmt_tJDBCOutput_5.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_5
											.setString(
													6,
													hinterface_configuration.mac_address);
								}

								if (hinterface_configuration.logical_network_name == null) {
									pstmt_tJDBCOutput_5.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_5
											.setString(
													7,
													hinterface_configuration.logical_network_name);
								}

								if (hinterface_configuration.ip_address == null) {
									pstmt_tJDBCOutput_5.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_5
											.setString(
													8,
													hinterface_configuration.ip_address);
								}

								if (hinterface_configuration.gateway == null) {
									pstmt_tJDBCOutput_5.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_5.setString(9,
											hinterface_configuration.gateway);
								}

								if (hinterface_configuration.bond == null) {
									pstmt_tJDBCOutput_5.setNull(10,
											java.sql.Types.BOOLEAN);
								} else {
									pstmt_tJDBCOutput_5.setBoolean(10,
											hinterface_configuration.bond);
								}

								if (hinterface_configuration.bond_name == null) {
									pstmt_tJDBCOutput_5.setNull(11,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_5.setString(11,
											hinterface_configuration.bond_name);
								}

								if (hinterface_configuration.vlan_id == null) {
									pstmt_tJDBCOutput_5.setNull(12,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_5.setInt(12,
											hinterface_configuration.vlan_id);
								}

								if (hinterface_configuration.host_configuration_version == null) {
									pstmt_tJDBCOutput_5.setNull(13,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_5
											.setInt(13,
													hinterface_configuration.host_configuration_version);
								}

								if (hinterface_configuration.create_date != null) {
									pstmt_tJDBCOutput_5
											.setTimestamp(
													14,
													new java.sql.Timestamp(
															hinterface_configuration.create_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_5.setNull(14,
											java.sql.Types.DATE);
								}

								if (hinterface_configuration.update_date != null) {
									pstmt_tJDBCOutput_5
											.setTimestamp(
													15,
													new java.sql.Timestamp(
															hinterface_configuration.update_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_5.setNull(15,
											java.sql.Types.DATE);
								}

								if (hinterface_configuration.delete_date != null) {
									pstmt_tJDBCOutput_5
											.setTimestamp(
													16,
													new java.sql.Timestamp(
															hinterface_configuration.delete_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_5.setNull(16,
											java.sql.Types.DATE);
								}

								try {
									insertedCount_tJDBCOutput_5 = insertedCount_tJDBCOutput_5
											+ pstmt_tJDBCOutput_5
													.executeUpdate();
									nb_line_tJDBCOutput_5++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_5 = true;
									throw (e);
								}

								tos_count_tJDBCOutput_5++;

								/**
								 * [tJDBCOutput_5 main ] stop
								 */

							} // End of branch "hinterface_configuration"

						} // G_TM_M_280 close main tMap filter for table 'row2'

						/**
						 * [tJDBCInput_5 end ] start
						 */

						currentComponent = "tJDBCInput_5";

					}
				} finally {
					rs_tJDBCInput_5.close();
					stmt_tJDBCInput_5.close();

				}
				globalMap.put("tJDBCInput_5_NB_LINE", nb_line_tJDBCInput_5);

				ok_Hash.put("tJDBCInput_5", true);
				end_Hash.put("tJDBCInput_5", System.currentTimeMillis());

				/**
				 * [tJDBCInput_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row37 != null) {
					tHash_Lookup_row37.endGet();
				}
				globalMap.remove("tHash_Lookup_row37");

				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tJDBCOutput_5 end ] start
				 */

				currentComponent = "tJDBCOutput_5";

				if (pstmt_tJDBCOutput_5 != null) {

					pstmt_tJDBCOutput_5.close();

				}

				nb_line_deleted_tJDBCOutput_5 = nb_line_deleted_tJDBCOutput_5
						+ deletedCount_tJDBCOutput_5;
				nb_line_update_tJDBCOutput_5 = nb_line_update_tJDBCOutput_5
						+ updatedCount_tJDBCOutput_5;
				nb_line_inserted_tJDBCOutput_5 = nb_line_inserted_tJDBCOutput_5
						+ insertedCount_tJDBCOutput_5;
				nb_line_rejected_tJDBCOutput_5 = nb_line_rejected_tJDBCOutput_5
						+ rejectedCount_tJDBCOutput_5;

				globalMap.put("tJDBCOutput_5_NB_LINE", nb_line_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_5);
				globalMap.put("tJDBCOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_5);

				ok_Hash.put("tJDBCOutput_5", true);
				end_Hash.put("tJDBCOutput_5", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_24Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row37");

			try {

				/**
				 * [tJDBCInput_5 finally ] start
				 */

				currentComponent = "tJDBCInput_5";

				/**
				 * [tJDBCInput_5 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tJDBCOutput_5 finally ] start
				 */

				currentComponent = "tJDBCOutput_5";

				/**
				 * [tJDBCOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_5_SUBPROCESS_STATE", 1);
	}

	public static class delete_hinterfaceStruct implements
			routines.system.IPersistableRow<delete_hinterfaceStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object host_interface_id;

		public Object getHost_interface_id() {
			return this.host_interface_id;
		}

		public String host_interface_name;

		public String getHost_interface_name() {
			return this.host_interface_name;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public Short host_interface_type;

		public Short getHost_interface_type() {
			return this.host_interface_type;
		}

		public Integer host_interface_speed_bps;

		public Integer getHost_interface_speed_bps() {
			return this.host_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public String ip_address;

		public String getIp_address() {
			return this.ip_address;
		}

		public String gateway;

		public String getGateway() {
			return this.gateway;
		}

		public Boolean bond;

		public Boolean getBond() {
			return this.bond;
		}

		public String bond_name;

		public String getBond_name() {
			return this.bond_name;
		}

		public Integer vlan_id;

		public Integer getVlan_id() {
			return this.vlan_id;
		}

		public Integer host_configuration_version;

		public Integer getHost_configuration_version() {
			return this.host_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_interface_id = (Object) dis.readObject();

					this.host_interface_name = readString(dis);

					this.host_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.host_interface_type = null;
					} else {
						this.host_interface_type = dis.readShort();
					}

					this.host_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.ip_address = readString(dis);

					this.gateway = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.bond = null;
					} else {
						this.bond = dis.readBoolean();
					}

					this.bond_name = readString(dis);

					this.vlan_id = readInteger(dis);

					this.host_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.host_interface_id);

				// String

				writeString(this.host_interface_name, dos);

				// Object

				dos.writeObject(this.host_id);

				// Short

				if (this.host_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.host_interface_type);
				}

				// Integer

				writeInteger(this.host_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// String

				writeString(this.ip_address, dos);

				// String

				writeString(this.gateway, dos);

				// Boolean

				if (this.bond == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.bond);
				}

				// String

				writeString(this.bond_name, dos);

				// Integer

				writeInteger(this.vlan_id, dos);

				// Integer

				writeInteger(this.host_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("host_interface_id=" + String.valueOf(host_interface_id));
			sb.append(",host_interface_name=" + host_interface_name);
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_interface_type="
					+ String.valueOf(host_interface_type));
			sb.append(",host_interface_speed_bps="
					+ String.valueOf(host_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",ip_address=" + ip_address);
			sb.append(",gateway=" + gateway);
			sb.append(",bond=" + String.valueOf(bond));
			sb.append(",bond_name=" + bond_name);
			sb.append(",vlan_id=" + String.valueOf(vlan_id));
			sb.append(",host_configuration_version="
					+ String.valueOf(host_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_hinterfaceStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object host_interface_id;

		public Object getHost_interface_id() {
			return this.host_interface_id;
		}

		public String host_interface_join_id;

		public String getHost_interface_join_id() {
			return this.host_interface_join_id;
		}

		public String host_interface_name;

		public String getHost_interface_name() {
			return this.host_interface_name;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public Short host_interface_type;

		public Short getHost_interface_type() {
			return this.host_interface_type;
		}

		public Integer host_interface_speed_bps;

		public Integer getHost_interface_speed_bps() {
			return this.host_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public String ip_address;

		public String getIp_address() {
			return this.ip_address;
		}

		public String gateway;

		public String getGateway() {
			return this.gateway;
		}

		public Boolean bond;

		public Boolean getBond() {
			return this.bond;
		}

		public String bond_name;

		public String getBond_name() {
			return this.bond_name;
		}

		public Integer vlan_id;

		public Integer getVlan_id() {
			return this.vlan_id;
		}

		public Integer host_configuration_version;

		public Integer getHost_configuration_version() {
			return this.host_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.host_interface_id = (Object) dis.readObject();

					this.host_interface_join_id = readString(dis);

					this.host_interface_name = readString(dis);

					this.host_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.host_interface_type = null;
					} else {
						this.host_interface_type = dis.readShort();
					}

					this.host_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.ip_address = readString(dis);

					this.gateway = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.bond = null;
					} else {
						this.bond = dis.readBoolean();
					}

					this.bond_name = readString(dis);

					this.vlan_id = readInteger(dis);

					this.host_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.host_interface_id);

				// String

				writeString(this.host_interface_join_id, dos);

				// String

				writeString(this.host_interface_name, dos);

				// Object

				dos.writeObject(this.host_id);

				// Short

				if (this.host_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.host_interface_type);
				}

				// Integer

				writeInteger(this.host_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// String

				writeString(this.ip_address, dos);

				// String

				writeString(this.gateway, dos);

				// Boolean

				if (this.bond == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.bond);
				}

				// String

				writeString(this.bond_name, dos);

				// Integer

				writeInteger(this.vlan_id, dos);

				// Integer

				writeInteger(this.host_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",host_interface_id=" + String.valueOf(host_interface_id));
			sb.append(",host_interface_join_id=" + host_interface_join_id);
			sb.append(",host_interface_name=" + host_interface_name);
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_interface_type="
					+ String.valueOf(host_interface_type));
			sb.append(",host_interface_speed_bps="
					+ String.valueOf(host_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",ip_address=" + ip_address);
			sb.append(",gateway=" + gateway);
			sb.append(",bond=" + String.valueOf(bond));
			sb.append(",bond_name=" + bond_name);
			sb.append(",vlan_id=" + String.valueOf(vlan_id));
			sb.append(",host_configuration_version="
					+ String.valueOf(host_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_24Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_24Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object host_interface_id;

		public Object getHost_interface_id() {
			return this.host_interface_id;
		}

		public String host_interface_join_id;

		public String getHost_interface_join_id() {
			return this.host_interface_join_id;
		}

		public String host_interface_name;

		public String getHost_interface_name() {
			return this.host_interface_name;
		}

		public Object host_id;

		public Object getHost_id() {
			return this.host_id;
		}

		public Short host_interface_type;

		public Short getHost_interface_type() {
			return this.host_interface_type;
		}

		public Integer host_interface_speed_bps;

		public Integer getHost_interface_speed_bps() {
			return this.host_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public String ip_address;

		public String getIp_address() {
			return this.ip_address;
		}

		public String gateway;

		public String getGateway() {
			return this.gateway;
		}

		public Boolean bond;

		public Boolean getBond() {
			return this.bond;
		}

		public String bond_name;

		public String getBond_name() {
			return this.bond_name;
		}

		public Integer vlan_id;

		public Integer getVlan_id() {
			return this.vlan_id;
		}

		public Integer host_configuration_version;

		public Integer getHost_configuration_version() {
			return this.host_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.host_interface_id = (Object) dis.readObject();

					this.host_interface_join_id = readString(dis);

					this.host_interface_name = readString(dis);

					this.host_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.host_interface_type = null;
					} else {
						this.host_interface_type = dis.readShort();
					}

					this.host_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.ip_address = readString(dis);

					this.gateway = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.bond = null;
					} else {
						this.bond = dis.readBoolean();
					}

					this.bond_name = readString(dis);

					this.vlan_id = readInteger(dis);

					this.host_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.host_interface_id);

				// String

				writeString(this.host_interface_join_id, dos);

				// String

				writeString(this.host_interface_name, dos);

				// Object

				dos.writeObject(this.host_id);

				// Short

				if (this.host_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.host_interface_type);
				}

				// Integer

				writeInteger(this.host_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// String

				writeString(this.ip_address, dos);

				// String

				writeString(this.gateway, dos);

				// Boolean

				if (this.bond == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.bond);
				}

				// String

				writeString(this.bond_name, dos);

				// Integer

				writeInteger(this.vlan_id, dos);

				// Integer

				writeInteger(this.host_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",host_interface_id=" + String.valueOf(host_interface_id));
			sb.append(",host_interface_join_id=" + host_interface_join_id);
			sb.append(",host_interface_name=" + host_interface_name);
			sb.append(",host_id=" + String.valueOf(host_id));
			sb.append(",host_interface_type="
					+ String.valueOf(host_interface_type));
			sb.append(",host_interface_speed_bps="
					+ String.valueOf(host_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",ip_address=" + ip_address);
			sb.append(",gateway=" + gateway);
			sb.append(",bond=" + String.valueOf(bond));
			sb.append(",bond_name=" + bond_name);
			sb.append(",vlan_id=" + String.valueOf(vlan_id));
			sb.append(",host_configuration_version="
					+ String.valueOf(host_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_24Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_24_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_23Process(globalMap);

				row23Struct row23 = new row23Struct();
				delete_hinterfaceStruct delete_hinterface = new delete_hinterfaceStruct();

				/**
				 * [tJDBCOutput_18 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_18", false);
				start_Hash.put("tJDBCOutput_18", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_18";

				int tos_count_tJDBCOutput_18 = 0;

				int nb_line_tJDBCOutput_18 = 0;
				int nb_line_update_tJDBCOutput_18 = 0;
				int nb_line_inserted_tJDBCOutput_18 = 0;
				int nb_line_deleted_tJDBCOutput_18 = 0;
				int nb_line_rejected_tJDBCOutput_18 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_18 = 0;

				int deletedCount_tJDBCOutput_18 = 0;
				int updatedCount_tJDBCOutput_18 = 0;
				int insertedCount_tJDBCOutput_18 = 0;
				int rejectedCount_tJDBCOutput_18 = 0;

				boolean whetherReject_tJDBCOutput_18 = false;

				java.sql.Connection connection_tJDBCOutput_18 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_18 = 10000;
				int batchSizeCounter_tJDBCOutput_18 = 0;

				String insert_tJDBCOutput_18 = "INSERT INTO "
						+ "host_interface_configuration"
						+ " (host_interface_id,host_interface_name,host_id,host_interface_type,host_interface_speed_bps,mac_address,logical_network_name,ip_address,gateway,bond,bond_name,vlan_id,host_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_18 = connection_tJDBCOutput_18
						.prepareStatement(insert_tJDBCOutput_18);

				/**
				 * [tJDBCOutput_18 begin ] stop
				 */

				/**
				 * [tMap_18 begin ] start
				 */

				ok_Hash.put("tMap_18", false);
				start_Hash.put("tMap_18", System.currentTimeMillis());

				currentComponent = "tMap_18";

				int tos_count_tMap_18 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
						.get("tHash_Lookup_row22"));

				row22Struct row22HashKey = new row22Struct();
				row22Struct row22Default = new row22Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_18__Struct {
				}
				Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_hinterfaceStruct delete_hinterface_tmp = new delete_hinterfaceStruct();
				// ###############################

				/**
				 * [tMap_18 begin ] stop
				 */

				/**
				 * [tJDBCInput_24 begin ] start
				 */

				ok_Hash.put("tJDBCInput_24", false);
				start_Hash.put("tJDBCInput_24", System.currentTimeMillis());

				currentComponent = "tJDBCInput_24";

				int tos_count_tJDBCInput_24 = 0;

				int nb_line_tJDBCInput_24 = 0;
				java.sql.Connection conn_tJDBCInput_24 = null;
				conn_tJDBCInput_24 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_24 = conn_tJDBCInput_24
						.createStatement();

				String dbquery_tJDBCInput_24 = "SELECT     history_id,     host_interface_id,     upper(cast(host_interface_id as char(36))) as host_interface_join_id,    host_interface_name,     host_id,     host_interface_type,     host_interface_speed_bps,     mac_address,     logical_network_name,     ip_address,     gateway,     bond,     bond_name,     vlan_id,     host_configuration_version,     create_date,     update_date  FROM v3_5_latest_configuration_hosts_interfaces";

				globalMap.put("tJDBCInput_24_QUERY", dbquery_tJDBCInput_24);
				java.sql.ResultSet rs_tJDBCInput_24 = null;
				try {
					rs_tJDBCInput_24 = stmt_tJDBCInput_24
							.executeQuery(dbquery_tJDBCInput_24);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_24 = rs_tJDBCInput_24
							.getMetaData();
					int colQtyInRs_tJDBCInput_24 = rsmd_tJDBCInput_24
							.getColumnCount();

					String tmpContent_tJDBCInput_24 = null;
					int column_index_tJDBCInput_24 = 1;

					while (rs_tJDBCInput_24.next()) {
						nb_line_tJDBCInput_24++;

						column_index_tJDBCInput_24 = 1;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.history_id = null;
						} else {

							if (rs_tJDBCInput_24
									.getObject(column_index_tJDBCInput_24) != null) {
								row23.history_id = rs_tJDBCInput_24
										.getInt(column_index_tJDBCInput_24);
							} else {
								row23.history_id = null;
							}

						}

						column_index_tJDBCInput_24 = 2;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.host_interface_id = null;
						} else {

							if (rs_tJDBCInput_24
									.getObject(column_index_tJDBCInput_24) != null) {
								row23.host_interface_id = rs_tJDBCInput_24
										.getObject(column_index_tJDBCInput_24);
							} else {
								row23.host_interface_id = null;
							}

						}

						column_index_tJDBCInput_24 = 3;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.host_interface_join_id = null;
						} else {

							tmpContent_tJDBCInput_24 = rs_tJDBCInput_24
									.getString(column_index_tJDBCInput_24);
							if (tmpContent_tJDBCInput_24 != null) {
								row23.host_interface_join_id = tmpContent_tJDBCInput_24;
							} else {
								row23.host_interface_join_id = null;
							}

						}

						column_index_tJDBCInput_24 = 4;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.host_interface_name = null;
						} else {

							tmpContent_tJDBCInput_24 = rs_tJDBCInput_24
									.getString(column_index_tJDBCInput_24);
							if (tmpContent_tJDBCInput_24 != null) {
								row23.host_interface_name = tmpContent_tJDBCInput_24;
							} else {
								row23.host_interface_name = null;
							}

						}

						column_index_tJDBCInput_24 = 5;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.host_id = null;
						} else {

							if (rs_tJDBCInput_24
									.getObject(column_index_tJDBCInput_24) != null) {
								row23.host_id = rs_tJDBCInput_24
										.getObject(column_index_tJDBCInput_24);
							} else {
								row23.host_id = null;
							}

						}

						column_index_tJDBCInput_24 = 6;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.host_interface_type = null;
						} else {

							if (rs_tJDBCInput_24
									.getObject(column_index_tJDBCInput_24) != null) {
								row23.host_interface_type = rs_tJDBCInput_24
										.getShort(column_index_tJDBCInput_24);
							} else {
								row23.host_interface_type = null;
							}

						}

						column_index_tJDBCInput_24 = 7;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.host_interface_speed_bps = null;
						} else {

							if (rs_tJDBCInput_24
									.getObject(column_index_tJDBCInput_24) != null) {
								row23.host_interface_speed_bps = rs_tJDBCInput_24
										.getInt(column_index_tJDBCInput_24);
							} else {
								row23.host_interface_speed_bps = null;
							}

						}

						column_index_tJDBCInput_24 = 8;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.mac_address = null;
						} else {

							tmpContent_tJDBCInput_24 = rs_tJDBCInput_24
									.getString(column_index_tJDBCInput_24);
							if (tmpContent_tJDBCInput_24 != null) {
								row23.mac_address = tmpContent_tJDBCInput_24;
							} else {
								row23.mac_address = null;
							}

						}

						column_index_tJDBCInput_24 = 9;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.logical_network_name = null;
						} else {

							tmpContent_tJDBCInput_24 = rs_tJDBCInput_24
									.getString(column_index_tJDBCInput_24);
							if (tmpContent_tJDBCInput_24 != null) {
								row23.logical_network_name = tmpContent_tJDBCInput_24;
							} else {
								row23.logical_network_name = null;
							}

						}

						column_index_tJDBCInput_24 = 10;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.ip_address = null;
						} else {

							tmpContent_tJDBCInput_24 = rs_tJDBCInput_24
									.getString(column_index_tJDBCInput_24);
							if (tmpContent_tJDBCInput_24 != null) {
								row23.ip_address = tmpContent_tJDBCInput_24;
							} else {
								row23.ip_address = null;
							}

						}

						column_index_tJDBCInput_24 = 11;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.gateway = null;
						} else {

							tmpContent_tJDBCInput_24 = rs_tJDBCInput_24
									.getString(column_index_tJDBCInput_24);
							if (tmpContent_tJDBCInput_24 != null) {
								row23.gateway = tmpContent_tJDBCInput_24;
							} else {
								row23.gateway = null;
							}

						}

						column_index_tJDBCInput_24 = 12;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.bond = null;
						} else {

							if (rs_tJDBCInput_24
									.getObject(column_index_tJDBCInput_24) != null) {
								row23.bond = rs_tJDBCInput_24
										.getBoolean(column_index_tJDBCInput_24);
							} else {
								row23.bond = null;
							}

						}

						column_index_tJDBCInput_24 = 13;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.bond_name = null;
						} else {

							tmpContent_tJDBCInput_24 = rs_tJDBCInput_24
									.getString(column_index_tJDBCInput_24);
							if (tmpContent_tJDBCInput_24 != null) {
								row23.bond_name = tmpContent_tJDBCInput_24;
							} else {
								row23.bond_name = null;
							}

						}

						column_index_tJDBCInput_24 = 14;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.vlan_id = null;
						} else {

							if (rs_tJDBCInput_24
									.getObject(column_index_tJDBCInput_24) != null) {
								row23.vlan_id = rs_tJDBCInput_24
										.getInt(column_index_tJDBCInput_24);
							} else {
								row23.vlan_id = null;
							}

						}

						column_index_tJDBCInput_24 = 15;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.host_configuration_version = null;
						} else {

							if (rs_tJDBCInput_24
									.getObject(column_index_tJDBCInput_24) != null) {
								row23.host_configuration_version = rs_tJDBCInput_24
										.getInt(column_index_tJDBCInput_24);
							} else {
								row23.host_configuration_version = null;
							}

						}

						column_index_tJDBCInput_24 = 16;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_24 = null;
							try {
								date_tJDBCInput_24 = rs_tJDBCInput_24
										.getTimestamp(column_index_tJDBCInput_24);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_24 = rs_tJDBCInput_24
										.getDate(column_index_tJDBCInput_24);
							}
							row23.create_date = date_tJDBCInput_24;

						}

						column_index_tJDBCInput_24 = 17;

						if (colQtyInRs_tJDBCInput_24 < column_index_tJDBCInput_24) {
							row23.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_24 = null;
							try {
								date_tJDBCInput_24 = rs_tJDBCInput_24
										.getTimestamp(column_index_tJDBCInput_24);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_24 = rs_tJDBCInput_24
										.getDate(column_index_tJDBCInput_24);
							}
							row23.update_date = date_tJDBCInput_24;

						}

						/**
						 * [tJDBCInput_24 begin ] stop
						 */
						/**
						 * [tJDBCInput_24 main ] start
						 */

						currentComponent = "tJDBCInput_24";

						tos_count_tJDBCInput_24++;

						/**
						 * [tJDBCInput_24 main ] stop
						 */

						/**
						 * [tMap_18 main ] start
						 */

						currentComponent = "tMap_18";

						boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_18 = false;
						boolean mainRowRejected_tMap_18 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row22"
						// /////////////////////////////////////////////

						boolean forceLooprow22 = false;

						row22Struct row22ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_18) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_18 = false;

							row22HashKey.host_interface_join_id = row23.host_interface_join_id;

							row22HashKey.hashCodeDirty = true;

							tHash_Lookup_row22.lookup(row22HashKey);

							if (!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_18 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row22 != null
								&& tHash_Lookup_row22.getCount(row22HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.host_interface_join_id = '"
							// + row22HashKey.host_interface_join_id + "'");
						} // G 071

						row22Struct row22 = null;

						row22Struct fromLookup_row22 = null;
						row22 = row22Default;

						if (tHash_Lookup_row22 != null
								&& tHash_Lookup_row22.hasNext()) { // G 099

							fromLookup_row22 = tHash_Lookup_row22.next();

						} // G 099

						if (fromLookup_row22 != null) {
							row22 = fromLookup_row22;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
							// ###############################
							// # Output tables

							delete_hinterface = null;

							if (!rejectedInnerJoin_tMap_18) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'delete_hinterface'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_18) {
								delete_hinterface_tmp.host_interface_id = row23.host_interface_id;
								delete_hinterface_tmp.host_interface_name = row23.host_interface_name;
								delete_hinterface_tmp.host_id = row23.host_id;
								delete_hinterface_tmp.host_interface_type = row23.host_interface_type;
								delete_hinterface_tmp.host_interface_speed_bps = row23.host_interface_speed_bps;
								delete_hinterface_tmp.mac_address = row23.mac_address;
								delete_hinterface_tmp.logical_network_name = row23.logical_network_name;
								delete_hinterface_tmp.ip_address = row23.ip_address;
								delete_hinterface_tmp.gateway = row23.gateway;
								delete_hinterface_tmp.bond = row23.bond;
								delete_hinterface_tmp.bond_name = row23.bond_name;
								delete_hinterface_tmp.vlan_id = row23.vlan_id;
								delete_hinterface_tmp.host_configuration_version = row23.host_configuration_version;
								delete_hinterface_tmp.create_date = row23.create_date;
								delete_hinterface_tmp.update_date = context.runTime;
								delete_hinterface_tmp.delete_date = context.runTime;
								delete_hinterface = delete_hinterface_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_18 = false;

						tos_count_tMap_18++;

						/**
						 * [tMap_18 main ] stop
						 */
						// Start of branch "delete_hinterface"
						if (delete_hinterface != null) {

							/**
							 * [tJDBCOutput_18 main ] start
							 */

							currentComponent = "tJDBCOutput_18";

							whetherReject_tJDBCOutput_18 = false;
							if (delete_hinterface.host_interface_id == null) {
								pstmt_tJDBCOutput_18.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_18.setObject(1,
										delete_hinterface.host_interface_id);
							}

							if (delete_hinterface.host_interface_name == null) {
								pstmt_tJDBCOutput_18.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_18.setString(2,
										delete_hinterface.host_interface_name);
							}

							if (delete_hinterface.host_id == null) {
								pstmt_tJDBCOutput_18.setNull(3,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_18.setObject(3,
										delete_hinterface.host_id);
							}

							if (delete_hinterface.host_interface_type == null) {
								pstmt_tJDBCOutput_18.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_18.setShort(4,
										delete_hinterface.host_interface_type);
							}

							if (delete_hinterface.host_interface_speed_bps == null) {
								pstmt_tJDBCOutput_18.setNull(5,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_18
										.setInt(5,
												delete_hinterface.host_interface_speed_bps);
							}

							if (delete_hinterface.mac_address == null) {
								pstmt_tJDBCOutput_18.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_18.setString(6,
										delete_hinterface.mac_address);
							}

							if (delete_hinterface.logical_network_name == null) {
								pstmt_tJDBCOutput_18.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_18.setString(7,
										delete_hinterface.logical_network_name);
							}

							if (delete_hinterface.ip_address == null) {
								pstmt_tJDBCOutput_18.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_18.setString(8,
										delete_hinterface.ip_address);
							}

							if (delete_hinterface.gateway == null) {
								pstmt_tJDBCOutput_18.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_18.setString(9,
										delete_hinterface.gateway);
							}

							if (delete_hinterface.bond == null) {
								pstmt_tJDBCOutput_18.setNull(10,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tJDBCOutput_18.setBoolean(10,
										delete_hinterface.bond);
							}

							if (delete_hinterface.bond_name == null) {
								pstmt_tJDBCOutput_18.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_18.setString(11,
										delete_hinterface.bond_name);
							}

							if (delete_hinterface.vlan_id == null) {
								pstmt_tJDBCOutput_18.setNull(12,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_18.setInt(12,
										delete_hinterface.vlan_id);
							}

							if (delete_hinterface.host_configuration_version == null) {
								pstmt_tJDBCOutput_18.setNull(13,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_18
										.setInt(13,
												delete_hinterface.host_configuration_version);
							}

							if (delete_hinterface.create_date != null) {
								pstmt_tJDBCOutput_18.setTimestamp(
										14,
										new java.sql.Timestamp(
												delete_hinterface.create_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_18.setNull(14,
										java.sql.Types.DATE);
							}

							if (delete_hinterface.update_date != null) {
								pstmt_tJDBCOutput_18.setTimestamp(
										15,
										new java.sql.Timestamp(
												delete_hinterface.update_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_18.setNull(15,
										java.sql.Types.DATE);
							}

							if (delete_hinterface.delete_date != null) {
								pstmt_tJDBCOutput_18.setTimestamp(
										16,
										new java.sql.Timestamp(
												delete_hinterface.delete_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_18.setNull(16,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tJDBCOutput_18 = insertedCount_tJDBCOutput_18
										+ pstmt_tJDBCOutput_18.executeUpdate();
								nb_line_tJDBCOutput_18++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_18 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_18++;

							/**
							 * [tJDBCOutput_18 main ] stop
							 */

						} // End of branch "delete_hinterface"

						/**
						 * [tJDBCInput_24 end ] start
						 */

						currentComponent = "tJDBCInput_24";

					}
				} finally {
					rs_tJDBCInput_24.close();
					stmt_tJDBCInput_24.close();

				}
				globalMap.put("tJDBCInput_24_NB_LINE", nb_line_tJDBCInput_24);

				ok_Hash.put("tJDBCInput_24", true);
				end_Hash.put("tJDBCInput_24", System.currentTimeMillis());

				/**
				 * [tJDBCInput_24 end ] stop
				 */

				/**
				 * [tMap_18 end ] start
				 */

				currentComponent = "tMap_18";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row22 != null) {
					tHash_Lookup_row22.endGet();
				}
				globalMap.remove("tHash_Lookup_row22");

				// ###############################

				ok_Hash.put("tMap_18", true);
				end_Hash.put("tMap_18", System.currentTimeMillis());

				/**
				 * [tMap_18 end ] stop
				 */

				/**
				 * [tJDBCOutput_18 end ] start
				 */

				currentComponent = "tJDBCOutput_18";

				if (pstmt_tJDBCOutput_18 != null) {

					pstmt_tJDBCOutput_18.close();

				}

				nb_line_deleted_tJDBCOutput_18 = nb_line_deleted_tJDBCOutput_18
						+ deletedCount_tJDBCOutput_18;
				nb_line_update_tJDBCOutput_18 = nb_line_update_tJDBCOutput_18
						+ updatedCount_tJDBCOutput_18;
				nb_line_inserted_tJDBCOutput_18 = nb_line_inserted_tJDBCOutput_18
						+ insertedCount_tJDBCOutput_18;
				nb_line_rejected_tJDBCOutput_18 = nb_line_rejected_tJDBCOutput_18
						+ rejectedCount_tJDBCOutput_18;

				globalMap.put("tJDBCOutput_18_NB_LINE", nb_line_tJDBCOutput_18);
				globalMap.put("tJDBCOutput_18_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_18);
				globalMap.put("tJDBCOutput_18_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_18);
				globalMap.put("tJDBCOutput_18_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_18);
				globalMap.put("tJDBCOutput_18_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_18);

				ok_Hash.put("tJDBCOutput_18", true);
				end_Hash.put("tJDBCOutput_18", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_18 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_24:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_18"
			globalMap.remove("tHash_Lookup_row22");

			try {

				/**
				 * [tJDBCInput_24 finally ] start
				 */

				currentComponent = "tJDBCInput_24";

				/**
				 * [tJDBCInput_24 finally ] stop
				 */

				/**
				 * [tMap_18 finally ] start
				 */

				currentComponent = "tMap_18";

				/**
				 * [tMap_18 finally ] stop
				 */

				/**
				 * [tJDBCOutput_18 finally ] start
				 */

				currentComponent = "tJDBCOutput_18";

				/**
				 * [tJDBCOutput_18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_24_SUBPROCESS_STATE", 1);
	}

	public static class vm_configurationStruct implements
			routines.system.IPersistableRow<vm_configurationStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_name;

		public String getVm_name() {
			return this.vm_name;
		}

		public String vm_description;

		public String getVm_description() {
			return this.vm_description;
		}

		public Short vm_type;

		public Short getVm_type() {
			return this.vm_type;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public Object template_id;

		public Object getTemplate_id() {
			return this.template_id;
		}

		public String template_name;

		public String getTemplate_name() {
			return this.template_name;
		}

		public Short cpu_per_socket;

		public Short getCpu_per_socket() {
			return this.cpu_per_socket;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public short operating_system;

		public short getOperating_system() {
			return this.operating_system;
		}

		public Object default_host;

		public Object getDefault_host() {
			return this.default_host;
		}

		public Boolean high_availability;

		public Boolean getHigh_availability() {
			return this.high_availability;
		}

		public Boolean initialized;

		public Boolean getInitialized() {
			return this.initialized;
		}

		public Boolean stateless;

		public Boolean getStateless() {
			return this.stateless;
		}

		public Boolean fail_back;

		public Boolean getFail_back() {
			return this.fail_back;
		}

		public Short usb_policy;

		public Short getUsb_policy() {
			return this.usb_policy;
		}

		public String time_zone;

		public String getTime_zone() {
			return this.time_zone;
		}

		public Object vm_pool_id;

		public Object getVm_pool_id() {
			return this.vm_pool_id;
		}

		public String vm_pool_name;

		public String getVm_pool_name() {
			return this.vm_pool_name;
		}

		public Object created_by_user_id;

		public Object getCreated_by_user_id() {
			return this.created_by_user_id;
		}

		public Integer cluster_configuration_version;

		public Integer getCluster_configuration_version() {
			return this.cluster_configuration_version;
		}

		public Integer default_host_configuration_version;

		public Integer getDefault_host_configuration_version() {
			return this.default_host_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_id = (Object) dis.readObject();

					this.vm_name = readString(dis);

					this.vm_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_type = null;
					} else {
						this.vm_type = dis.readShort();
					}

					this.cluster_id = (Object) dis.readObject();

					this.template_id = (Object) dis.readObject();

					this.template_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.cpu_per_socket = null;
					} else {
						this.cpu_per_socket = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					this.memory_size_mb = readInteger(dis);

					this.operating_system = dis.readShort();

					this.default_host = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.high_availability = null;
					} else {
						this.high_availability = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.initialized = null;
					} else {
						this.initialized = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.stateless = null;
					} else {
						this.stateless = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.fail_back = null;
					} else {
						this.fail_back = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.usb_policy = null;
					} else {
						this.usb_policy = dis.readShort();
					}

					this.time_zone = readString(dis);

					this.vm_pool_id = (Object) dis.readObject();

					this.vm_pool_name = readString(dis);

					this.created_by_user_id = (Object) dis.readObject();

					this.cluster_configuration_version = readInteger(dis);

					this.default_host_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_name, dos);

				// String

				writeString(this.vm_description, dos);

				// Short

				if (this.vm_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_type);
				}

				// Object

				dos.writeObject(this.cluster_id);

				// Object

				dos.writeObject(this.template_id);

				// String

				writeString(this.template_name, dos);

				// Short

				if (this.cpu_per_socket == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_per_socket);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// short

				dos.writeShort(this.operating_system);

				// Object

				dos.writeObject(this.default_host);

				// Boolean

				if (this.high_availability == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.high_availability);
				}

				// Boolean

				if (this.initialized == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.initialized);
				}

				// Boolean

				if (this.stateless == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.stateless);
				}

				// Boolean

				if (this.fail_back == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.fail_back);
				}

				// Short

				if (this.usb_policy == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.usb_policy);
				}

				// String

				writeString(this.time_zone, dos);

				// Object

				dos.writeObject(this.vm_pool_id);

				// String

				writeString(this.vm_pool_name, dos);

				// Object

				dos.writeObject(this.created_by_user_id);

				// Integer

				writeInteger(this.cluster_configuration_version, dos);

				// Integer

				writeInteger(this.default_host_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_name=" + vm_name);
			sb.append(",vm_description=" + vm_description);
			sb.append(",vm_type=" + String.valueOf(vm_type));
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",template_id=" + String.valueOf(template_id));
			sb.append(",template_name=" + template_name);
			sb.append(",cpu_per_socket=" + String.valueOf(cpu_per_socket));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",operating_system=" + String.valueOf(operating_system));
			sb.append(",default_host=" + String.valueOf(default_host));
			sb.append(",high_availability=" + String.valueOf(high_availability));
			sb.append(",initialized=" + String.valueOf(initialized));
			sb.append(",stateless=" + String.valueOf(stateless));
			sb.append(",fail_back=" + String.valueOf(fail_back));
			sb.append(",usb_policy=" + String.valueOf(usb_policy));
			sb.append(",time_zone=" + time_zone);
			sb.append(",vm_pool_id=" + String.valueOf(vm_pool_id));
			sb.append(",vm_pool_name=" + vm_pool_name);
			sb.append(",created_by_user_id="
					+ String.valueOf(created_by_user_id));
			sb.append(",cluster_configuration_version="
					+ String.valueOf(cluster_configuration_version));
			sb.append(",default_host_configuration_version="
					+ String.valueOf(default_host_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(vm_configurationStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_name;

		public String getVm_name() {
			return this.vm_name;
		}

		public String vm_description;

		public String getVm_description() {
			return this.vm_description;
		}

		public Short vm_type;

		public Short getVm_type() {
			return this.vm_type;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public String cluster_join_id;

		public String getCluster_join_id() {
			return this.cluster_join_id;
		}

		public Object template_id;

		public Object getTemplate_id() {
			return this.template_id;
		}

		public String template_name;

		public String getTemplate_name() {
			return this.template_name;
		}

		public Short cpu_per_socket;

		public Short getCpu_per_socket() {
			return this.cpu_per_socket;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public Short operating_system;

		public Short getOperating_system() {
			return this.operating_system;
		}

		public Object default_host;

		public Object getDefault_host() {
			return this.default_host;
		}

		public String default_host_join_id;

		public String getDefault_host_join_id() {
			return this.default_host_join_id;
		}

		public Boolean high_availability;

		public Boolean getHigh_availability() {
			return this.high_availability;
		}

		public Boolean initialized;

		public Boolean getInitialized() {
			return this.initialized;
		}

		public Boolean stateless;

		public Boolean getStateless() {
			return this.stateless;
		}

		public Boolean fail_back;

		public Boolean getFail_back() {
			return this.fail_back;
		}

		public Short usb_policy;

		public Short getUsb_policy() {
			return this.usb_policy;
		}

		public String time_zone;

		public String getTime_zone() {
			return this.time_zone;
		}

		public Object vm_pool_id;

		public Object getVm_pool_id() {
			return this.vm_pool_id;
		}

		public String vm_pool_name;

		public String getVm_pool_name() {
			return this.vm_pool_name;
		}

		public Object created_by_user_id;

		public Object getCreated_by_user_id() {
			return this.created_by_user_id;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_id = (Object) dis.readObject();

					this.vm_name = readString(dis);

					this.vm_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_type = null;
					} else {
						this.vm_type = dis.readShort();
					}

					this.cluster_id = (Object) dis.readObject();

					this.cluster_join_id = readString(dis);

					this.template_id = (Object) dis.readObject();

					this.template_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.cpu_per_socket = null;
					} else {
						this.cpu_per_socket = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					this.memory_size_mb = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.operating_system = null;
					} else {
						this.operating_system = dis.readShort();
					}

					this.default_host = (Object) dis.readObject();

					this.default_host_join_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.high_availability = null;
					} else {
						this.high_availability = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.initialized = null;
					} else {
						this.initialized = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.stateless = null;
					} else {
						this.stateless = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.fail_back = null;
					} else {
						this.fail_back = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.usb_policy = null;
					} else {
						this.usb_policy = dis.readShort();
					}

					this.time_zone = readString(dis);

					this.vm_pool_id = (Object) dis.readObject();

					this.vm_pool_name = readString(dis);

					this.created_by_user_id = (Object) dis.readObject();

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_name, dos);

				// String

				writeString(this.vm_description, dos);

				// Short

				if (this.vm_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_type);
				}

				// Object

				dos.writeObject(this.cluster_id);

				// String

				writeString(this.cluster_join_id, dos);

				// Object

				dos.writeObject(this.template_id);

				// String

				writeString(this.template_name, dos);

				// Short

				if (this.cpu_per_socket == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_per_socket);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// Short

				if (this.operating_system == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.operating_system);
				}

				// Object

				dos.writeObject(this.default_host);

				// String

				writeString(this.default_host_join_id, dos);

				// Boolean

				if (this.high_availability == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.high_availability);
				}

				// Boolean

				if (this.initialized == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.initialized);
				}

				// Boolean

				if (this.stateless == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.stateless);
				}

				// Boolean

				if (this.fail_back == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.fail_back);
				}

				// Short

				if (this.usb_policy == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.usb_policy);
				}

				// String

				writeString(this.time_zone, dos);

				// Object

				dos.writeObject(this.vm_pool_id);

				// String

				writeString(this.vm_pool_name, dos);

				// Object

				dos.writeObject(this.created_by_user_id);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_name=" + vm_name);
			sb.append(",vm_description=" + vm_description);
			sb.append(",vm_type=" + String.valueOf(vm_type));
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",cluster_join_id=" + cluster_join_id);
			sb.append(",template_id=" + String.valueOf(template_id));
			sb.append(",template_name=" + template_name);
			sb.append(",cpu_per_socket=" + String.valueOf(cpu_per_socket));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",operating_system=" + String.valueOf(operating_system));
			sb.append(",default_host=" + String.valueOf(default_host));
			sb.append(",default_host_join_id=" + default_host_join_id);
			sb.append(",high_availability=" + String.valueOf(high_availability));
			sb.append(",initialized=" + String.valueOf(initialized));
			sb.append(",stateless=" + String.valueOf(stateless));
			sb.append(",fail_back=" + String.valueOf(fail_back));
			sb.append(",usb_policy=" + String.valueOf(usb_policy));
			sb.append(",time_zone=" + time_zone);
			sb.append(",vm_pool_id=" + String.valueOf(vm_pool_id));
			sb.append(",vm_pool_name=" + vm_pool_name);
			sb.append(",created_by_user_id="
					+ String.valueOf(created_by_user_id));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_6Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_6Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_name;

		public String getVm_name() {
			return this.vm_name;
		}

		public String vm_description;

		public String getVm_description() {
			return this.vm_description;
		}

		public Short vm_type;

		public Short getVm_type() {
			return this.vm_type;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public String cluster_join_id;

		public String getCluster_join_id() {
			return this.cluster_join_id;
		}

		public Object template_id;

		public Object getTemplate_id() {
			return this.template_id;
		}

		public String template_name;

		public String getTemplate_name() {
			return this.template_name;
		}

		public Short cpu_per_socket;

		public Short getCpu_per_socket() {
			return this.cpu_per_socket;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public Short operating_system;

		public Short getOperating_system() {
			return this.operating_system;
		}

		public Object default_host;

		public Object getDefault_host() {
			return this.default_host;
		}

		public String default_host_join_id;

		public String getDefault_host_join_id() {
			return this.default_host_join_id;
		}

		public Boolean high_availability;

		public Boolean getHigh_availability() {
			return this.high_availability;
		}

		public Boolean initialized;

		public Boolean getInitialized() {
			return this.initialized;
		}

		public Boolean stateless;

		public Boolean getStateless() {
			return this.stateless;
		}

		public Boolean fail_back;

		public Boolean getFail_back() {
			return this.fail_back;
		}

		public Short usb_policy;

		public Short getUsb_policy() {
			return this.usb_policy;
		}

		public String time_zone;

		public String getTime_zone() {
			return this.time_zone;
		}

		public Object vm_pool_id;

		public Object getVm_pool_id() {
			return this.vm_pool_id;
		}

		public String vm_pool_name;

		public String getVm_pool_name() {
			return this.vm_pool_name;
		}

		public Object created_by_user_id;

		public Object getCreated_by_user_id() {
			return this.created_by_user_id;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_id = (Object) dis.readObject();

					this.vm_name = readString(dis);

					this.vm_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_type = null;
					} else {
						this.vm_type = dis.readShort();
					}

					this.cluster_id = (Object) dis.readObject();

					this.cluster_join_id = readString(dis);

					this.template_id = (Object) dis.readObject();

					this.template_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.cpu_per_socket = null;
					} else {
						this.cpu_per_socket = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					this.memory_size_mb = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.operating_system = null;
					} else {
						this.operating_system = dis.readShort();
					}

					this.default_host = (Object) dis.readObject();

					this.default_host_join_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.high_availability = null;
					} else {
						this.high_availability = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.initialized = null;
					} else {
						this.initialized = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.stateless = null;
					} else {
						this.stateless = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.fail_back = null;
					} else {
						this.fail_back = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.usb_policy = null;
					} else {
						this.usb_policy = dis.readShort();
					}

					this.time_zone = readString(dis);

					this.vm_pool_id = (Object) dis.readObject();

					this.vm_pool_name = readString(dis);

					this.created_by_user_id = (Object) dis.readObject();

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_name, dos);

				// String

				writeString(this.vm_description, dos);

				// Short

				if (this.vm_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_type);
				}

				// Object

				dos.writeObject(this.cluster_id);

				// String

				writeString(this.cluster_join_id, dos);

				// Object

				dos.writeObject(this.template_id);

				// String

				writeString(this.template_name, dos);

				// Short

				if (this.cpu_per_socket == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_per_socket);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// Short

				if (this.operating_system == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.operating_system);
				}

				// Object

				dos.writeObject(this.default_host);

				// String

				writeString(this.default_host_join_id, dos);

				// Boolean

				if (this.high_availability == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.high_availability);
				}

				// Boolean

				if (this.initialized == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.initialized);
				}

				// Boolean

				if (this.stateless == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.stateless);
				}

				// Boolean

				if (this.fail_back == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.fail_back);
				}

				// Short

				if (this.usb_policy == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.usb_policy);
				}

				// String

				writeString(this.time_zone, dos);

				// Object

				dos.writeObject(this.vm_pool_id);

				// String

				writeString(this.vm_pool_name, dos);

				// Object

				dos.writeObject(this.created_by_user_id);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_name=" + vm_name);
			sb.append(",vm_description=" + vm_description);
			sb.append(",vm_type=" + String.valueOf(vm_type));
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",cluster_join_id=" + cluster_join_id);
			sb.append(",template_id=" + String.valueOf(template_id));
			sb.append(",template_name=" + template_name);
			sb.append(",cpu_per_socket=" + String.valueOf(cpu_per_socket));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",operating_system=" + String.valueOf(operating_system));
			sb.append(",default_host=" + String.valueOf(default_host));
			sb.append(",default_host_join_id=" + default_host_join_id);
			sb.append(",high_availability=" + String.valueOf(high_availability));
			sb.append(",initialized=" + String.valueOf(initialized));
			sb.append(",stateless=" + String.valueOf(stateless));
			sb.append(",fail_back=" + String.valueOf(fail_back));
			sb.append(",usb_policy=" + String.valueOf(usb_policy));
			sb.append(",time_zone=" + time_zone);
			sb.append(",vm_pool_id=" + String.valueOf(vm_pool_id));
			sb.append(",vm_pool_name=" + vm_pool_name);
			sb.append(",created_by_user_id="
					+ String.valueOf(created_by_user_id));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_43Process(globalMap);
				tJDBCInput_42Process(globalMap);

				row4Struct row4 = new row4Struct();
				vm_configurationStruct vm_configuration = new vm_configurationStruct();

				/**
				 * [tJDBCOutput_6 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_6", false);
				start_Hash.put("tJDBCOutput_6", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_6";

				int tos_count_tJDBCOutput_6 = 0;

				int nb_line_tJDBCOutput_6 = 0;
				int nb_line_update_tJDBCOutput_6 = 0;
				int nb_line_inserted_tJDBCOutput_6 = 0;
				int nb_line_deleted_tJDBCOutput_6 = 0;
				int nb_line_rejected_tJDBCOutput_6 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_6 = 0;

				int deletedCount_tJDBCOutput_6 = 0;
				int updatedCount_tJDBCOutput_6 = 0;
				int insertedCount_tJDBCOutput_6 = 0;
				int rejectedCount_tJDBCOutput_6 = 0;

				boolean whetherReject_tJDBCOutput_6 = false;

				java.sql.Connection connection_tJDBCOutput_6 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_6 = 10000;
				int batchSizeCounter_tJDBCOutput_6 = 0;

				String insert_tJDBCOutput_6 = "INSERT INTO "
						+ "vm_configuration"
						+ " (vm_id,vm_name,vm_description,vm_type,cluster_id,template_id,template_name,cpu_per_socket,number_of_sockets,memory_size_mb,operating_system,default_host,high_availability,initialized,stateless,fail_back,usb_policy,time_zone,vm_pool_id,vm_pool_name,created_by_user_id,cluster_configuration_version,default_host_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_6 = connection_tJDBCOutput_6
						.prepareStatement(insert_tJDBCOutput_6);

				/**
				 * [tJDBCOutput_6 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) globalMap
						.get("tHash_Lookup_row38"));

				row38Struct row38HashKey = new row38Struct();
				row38Struct row38Default = new row38Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) globalMap
						.get("tHash_Lookup_row39"));

				row39Struct row39HashKey = new row39Struct();
				row39Struct row39Default = new row39Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				vm_configurationStruct vm_configuration_tmp = new vm_configurationStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tJDBCInput_6 begin ] start
				 */

				ok_Hash.put("tJDBCInput_6", false);
				start_Hash.put("tJDBCInput_6", System.currentTimeMillis());

				currentComponent = "tJDBCInput_6";

				int tos_count_tJDBCInput_6 = 0;

				int nb_line_tJDBCInput_6 = 0;
				java.sql.Connection conn_tJDBCInput_6 = null;
				conn_tJDBCInput_6 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_6 = conn_tJDBCInput_6
						.createStatement();

				String dbquery_tJDBCInput_6 = "SELECT     vm_id,     vm_name,     vm_description,     vm_type,     cluster_id,    upper(cast(cluster_id as char(36))) as cluster_join_id,      template_id,     template_name,     cpu_per_socket,     number_of_sockets,     memory_size_mb,     operating_system,     default_host,    upper(cast(default_host as char(36))) as default_host_join_id,      high_availability,     initialized,     stateless,     fail_back,      usb_policy,     time_zone,    vm_pool_id,   vm_pool_name,   created_by_user_id,    create_date,     update_date  FROM dwh_vm_configuration_history_view";

				globalMap.put("tJDBCInput_6_QUERY", dbquery_tJDBCInput_6);
				java.sql.ResultSet rs_tJDBCInput_6 = null;
				try {
					rs_tJDBCInput_6 = stmt_tJDBCInput_6
							.executeQuery(dbquery_tJDBCInput_6);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_6 = rs_tJDBCInput_6
							.getMetaData();
					int colQtyInRs_tJDBCInput_6 = rsmd_tJDBCInput_6
							.getColumnCount();

					String tmpContent_tJDBCInput_6 = null;
					int column_index_tJDBCInput_6 = 1;

					while (rs_tJDBCInput_6.next()) {
						nb_line_tJDBCInput_6++;

						column_index_tJDBCInput_6 = 1;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.vm_id = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.vm_id = rs_tJDBCInput_6
										.getObject(column_index_tJDBCInput_6);
							} else {
								row4.vm_id = null;
							}

						}

						column_index_tJDBCInput_6 = 2;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.vm_name = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row4.vm_name = tmpContent_tJDBCInput_6;
							} else {
								row4.vm_name = null;
							}

						}

						column_index_tJDBCInput_6 = 3;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.vm_description = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row4.vm_description = tmpContent_tJDBCInput_6;
							} else {
								row4.vm_description = null;
							}

						}

						column_index_tJDBCInput_6 = 4;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.vm_type = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.vm_type = rs_tJDBCInput_6
										.getShort(column_index_tJDBCInput_6);
							} else {
								row4.vm_type = null;
							}

						}

						column_index_tJDBCInput_6 = 5;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.cluster_id = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.cluster_id = rs_tJDBCInput_6
										.getObject(column_index_tJDBCInput_6);
							} else {
								row4.cluster_id = null;
							}

						}

						column_index_tJDBCInput_6 = 6;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.cluster_join_id = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row4.cluster_join_id = tmpContent_tJDBCInput_6;
							} else {
								row4.cluster_join_id = null;
							}

						}

						column_index_tJDBCInput_6 = 7;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.template_id = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.template_id = rs_tJDBCInput_6
										.getObject(column_index_tJDBCInput_6);
							} else {
								row4.template_id = null;
							}

						}

						column_index_tJDBCInput_6 = 8;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.template_name = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row4.template_name = tmpContent_tJDBCInput_6;
							} else {
								row4.template_name = null;
							}

						}

						column_index_tJDBCInput_6 = 9;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.cpu_per_socket = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.cpu_per_socket = rs_tJDBCInput_6
										.getShort(column_index_tJDBCInput_6);
							} else {
								row4.cpu_per_socket = null;
							}

						}

						column_index_tJDBCInput_6 = 10;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.number_of_sockets = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.number_of_sockets = rs_tJDBCInput_6
										.getShort(column_index_tJDBCInput_6);
							} else {
								row4.number_of_sockets = null;
							}

						}

						column_index_tJDBCInput_6 = 11;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.memory_size_mb = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.memory_size_mb = rs_tJDBCInput_6
										.getInt(column_index_tJDBCInput_6);
							} else {
								row4.memory_size_mb = null;
							}

						}

						column_index_tJDBCInput_6 = 12;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.operating_system = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.operating_system = rs_tJDBCInput_6
										.getShort(column_index_tJDBCInput_6);
							} else {
								row4.operating_system = null;
							}

						}

						column_index_tJDBCInput_6 = 13;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.default_host = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.default_host = rs_tJDBCInput_6
										.getObject(column_index_tJDBCInput_6);
							} else {
								row4.default_host = null;
							}

						}

						column_index_tJDBCInput_6 = 14;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.default_host_join_id = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row4.default_host_join_id = tmpContent_tJDBCInput_6;
							} else {
								row4.default_host_join_id = null;
							}

						}

						column_index_tJDBCInput_6 = 15;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.high_availability = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.high_availability = rs_tJDBCInput_6
										.getBoolean(column_index_tJDBCInput_6);
							} else {
								row4.high_availability = null;
							}

						}

						column_index_tJDBCInput_6 = 16;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.initialized = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.initialized = rs_tJDBCInput_6
										.getBoolean(column_index_tJDBCInput_6);
							} else {
								row4.initialized = null;
							}

						}

						column_index_tJDBCInput_6 = 17;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.stateless = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.stateless = rs_tJDBCInput_6
										.getBoolean(column_index_tJDBCInput_6);
							} else {
								row4.stateless = null;
							}

						}

						column_index_tJDBCInput_6 = 18;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.fail_back = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.fail_back = rs_tJDBCInput_6
										.getBoolean(column_index_tJDBCInput_6);
							} else {
								row4.fail_back = null;
							}

						}

						column_index_tJDBCInput_6 = 19;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.usb_policy = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.usb_policy = rs_tJDBCInput_6
										.getShort(column_index_tJDBCInput_6);
							} else {
								row4.usb_policy = null;
							}

						}

						column_index_tJDBCInput_6 = 20;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.time_zone = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row4.time_zone = tmpContent_tJDBCInput_6;
							} else {
								row4.time_zone = null;
							}

						}

						column_index_tJDBCInput_6 = 21;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.vm_pool_id = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.vm_pool_id = rs_tJDBCInput_6
										.getObject(column_index_tJDBCInput_6);
							} else {
								row4.vm_pool_id = null;
							}

						}

						column_index_tJDBCInput_6 = 22;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.vm_pool_name = null;
						} else {

							tmpContent_tJDBCInput_6 = rs_tJDBCInput_6
									.getString(column_index_tJDBCInput_6);
							if (tmpContent_tJDBCInput_6 != null) {
								row4.vm_pool_name = tmpContent_tJDBCInput_6;
							} else {
								row4.vm_pool_name = null;
							}

						}

						column_index_tJDBCInput_6 = 23;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.created_by_user_id = null;
						} else {

							if (rs_tJDBCInput_6
									.getObject(column_index_tJDBCInput_6) != null) {
								row4.created_by_user_id = rs_tJDBCInput_6
										.getObject(column_index_tJDBCInput_6);
							} else {
								row4.created_by_user_id = null;
							}

						}

						column_index_tJDBCInput_6 = 24;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_6 = null;
							try {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getTimestamp(column_index_tJDBCInput_6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getDate(column_index_tJDBCInput_6);
							}
							row4.create_date = date_tJDBCInput_6;

						}

						column_index_tJDBCInput_6 = 25;

						if (colQtyInRs_tJDBCInput_6 < column_index_tJDBCInput_6) {
							row4.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_6 = null;
							try {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getTimestamp(column_index_tJDBCInput_6);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_6 = rs_tJDBCInput_6
										.getDate(column_index_tJDBCInput_6);
							}
							row4.update_date = date_tJDBCInput_6;

						}

						/**
						 * [tJDBCInput_6 begin ] stop
						 */
						/**
						 * [tJDBCInput_6 main ] start
						 */

						currentComponent = "tJDBCInput_6";

						tos_count_tJDBCInput_6++;

						/**
						 * [tJDBCInput_6 main ] stop
						 */

						/**
						 * [tMap_6 main ] start
						 */

						currentComponent = "tMap_6";

						boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_6 = false;
						boolean mainRowRejected_tMap_6 = false;

						if (

						(

						row4.update_date == null ? TalendDate.compareDate(
								row4.create_date, context.runTime) <= 0
								: TalendDate.compareDate(row4.update_date,
										context.runTime) <= 0

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row4'

							// /////////////////////////////////////////////
							// Starting Lookup Table "row38"
							// /////////////////////////////////////////////

							boolean forceLooprow38 = false;

							row38Struct row38ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_6 = false;

								row38HashKey.host_join_id = row4.default_host_join_id;

								row38HashKey.hashCodeDirty = true;

								tHash_Lookup_row38.lookup(row38HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row38 != null
									&& tHash_Lookup_row38
											.getCount(row38HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row38' and it contains more one result from keys :  row38.host_join_id = '"
								// + row38HashKey.host_join_id + "'");
							} // G 071

							row38Struct row38 = null;

							row38Struct fromLookup_row38 = null;
							row38 = row38Default;

							if (tHash_Lookup_row38 != null
									&& tHash_Lookup_row38.hasNext()) { // G 099

								fromLookup_row38 = tHash_Lookup_row38.next();

							} // G 099

							if (fromLookup_row38 != null) {
								row38 = fromLookup_row38;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row39"
							// /////////////////////////////////////////////

							boolean forceLooprow39 = false;

							row39Struct row39ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_6 = false;

								row39HashKey.cluster_join_id = row4.cluster_join_id;

								row39HashKey.hashCodeDirty = true;

								tHash_Lookup_row39.lookup(row39HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row39 != null
									&& tHash_Lookup_row39
											.getCount(row39HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row39' and it contains more one result from keys :  row39.cluster_join_id = '"
								// + row39HashKey.cluster_join_id + "'");
							} // G 071

							row39Struct row39 = null;

							row39Struct fromLookup_row39 = null;
							row39 = row39Default;

							if (tHash_Lookup_row39 != null
									&& tHash_Lookup_row39.hasNext()) { // G 099

								fromLookup_row39 = tHash_Lookup_row39.next();

							} // G 099

							if (fromLookup_row39 != null) {
								row39 = fromLookup_row39;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								vm_configuration = null;

								// # Output table : 'vm_configuration'
								vm_configuration_tmp.vm_id = row4.vm_id;
								vm_configuration_tmp.vm_name = StringHandling
										.TRIM(row4.vm_name);
								vm_configuration_tmp.vm_description = StringHandling
										.TRIM(row4.vm_description);
								vm_configuration_tmp.vm_type = row4.vm_type;
								vm_configuration_tmp.cluster_id = row4.cluster_id;
								vm_configuration_tmp.template_id = row4.template_id;
								vm_configuration_tmp.template_name = StringHandling
										.TRIM(row4.template_name);
								vm_configuration_tmp.cpu_per_socket = row4.cpu_per_socket;
								vm_configuration_tmp.number_of_sockets = row4.number_of_sockets;
								vm_configuration_tmp.memory_size_mb = row4.memory_size_mb;
								vm_configuration_tmp.operating_system = row4.operating_system;
								vm_configuration_tmp.default_host = row4.default_host;
								vm_configuration_tmp.high_availability = row4.high_availability;
								vm_configuration_tmp.initialized = row4.initialized;
								vm_configuration_tmp.stateless = row4.stateless;
								vm_configuration_tmp.fail_back = row4.fail_back;
								vm_configuration_tmp.usb_policy = row4.usb_policy;
								vm_configuration_tmp.time_zone = StringHandling
										.TRIM(row4.time_zone);
								vm_configuration_tmp.vm_pool_id = row4.vm_pool_id;
								vm_configuration_tmp.vm_pool_name = row4.vm_pool_name;
								vm_configuration_tmp.created_by_user_id = row4.created_by_user_id;
								vm_configuration_tmp.cluster_configuration_version = row39.history_id;
								vm_configuration_tmp.default_host_configuration_version = row38.history_id;
								vm_configuration_tmp.create_date = row4.create_date;
								vm_configuration_tmp.update_date = row4.update_date;
								vm_configuration_tmp.delete_date = null;
								vm_configuration = vm_configuration_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */
							// Start of branch "vm_configuration"
							if (vm_configuration != null) {

								/**
								 * [tJDBCOutput_6 main ] start
								 */

								currentComponent = "tJDBCOutput_6";

								whetherReject_tJDBCOutput_6 = false;
								if (vm_configuration.vm_id == null) {
									pstmt_tJDBCOutput_6.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_6.setObject(1,
											vm_configuration.vm_id);
								}

								if (vm_configuration.vm_name == null) {
									pstmt_tJDBCOutput_6.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_6.setString(2,
											vm_configuration.vm_name);
								}

								if (vm_configuration.vm_description == null) {
									pstmt_tJDBCOutput_6.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_6.setString(3,
											vm_configuration.vm_description);
								}

								if (vm_configuration.vm_type == null) {
									pstmt_tJDBCOutput_6.setNull(4,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_6.setShort(4,
											vm_configuration.vm_type);
								}

								if (vm_configuration.cluster_id == null) {
									pstmt_tJDBCOutput_6.setNull(5,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_6.setObject(5,
											vm_configuration.cluster_id);
								}

								if (vm_configuration.template_id == null) {
									pstmt_tJDBCOutput_6.setNull(6,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_6.setObject(6,
											vm_configuration.template_id);
								}

								if (vm_configuration.template_name == null) {
									pstmt_tJDBCOutput_6.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_6.setString(7,
											vm_configuration.template_name);
								}

								if (vm_configuration.cpu_per_socket == null) {
									pstmt_tJDBCOutput_6.setNull(8,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_6.setShort(8,
											vm_configuration.cpu_per_socket);
								}

								if (vm_configuration.number_of_sockets == null) {
									pstmt_tJDBCOutput_6.setNull(9,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_6.setShort(9,
											vm_configuration.number_of_sockets);
								}

								if (vm_configuration.memory_size_mb == null) {
									pstmt_tJDBCOutput_6.setNull(10,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_6.setInt(10,
											vm_configuration.memory_size_mb);
								}

								pstmt_tJDBCOutput_6.setShort(11,
										vm_configuration.operating_system);

								if (vm_configuration.default_host == null) {
									pstmt_tJDBCOutput_6.setNull(12,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_6.setObject(12,
											vm_configuration.default_host);
								}

								if (vm_configuration.high_availability == null) {
									pstmt_tJDBCOutput_6.setNull(13,
											java.sql.Types.BOOLEAN);
								} else {
									pstmt_tJDBCOutput_6.setBoolean(13,
											vm_configuration.high_availability);
								}

								if (vm_configuration.initialized == null) {
									pstmt_tJDBCOutput_6.setNull(14,
											java.sql.Types.BOOLEAN);
								} else {
									pstmt_tJDBCOutput_6.setBoolean(14,
											vm_configuration.initialized);
								}

								if (vm_configuration.stateless == null) {
									pstmt_tJDBCOutput_6.setNull(15,
											java.sql.Types.BOOLEAN);
								} else {
									pstmt_tJDBCOutput_6.setBoolean(15,
											vm_configuration.stateless);
								}

								if (vm_configuration.fail_back == null) {
									pstmt_tJDBCOutput_6.setNull(16,
											java.sql.Types.BOOLEAN);
								} else {
									pstmt_tJDBCOutput_6.setBoolean(16,
											vm_configuration.fail_back);
								}

								if (vm_configuration.usb_policy == null) {
									pstmt_tJDBCOutput_6.setNull(17,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_6.setShort(17,
											vm_configuration.usb_policy);
								}

								if (vm_configuration.time_zone == null) {
									pstmt_tJDBCOutput_6.setNull(18,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_6.setString(18,
											vm_configuration.time_zone);
								}

								if (vm_configuration.vm_pool_id == null) {
									pstmt_tJDBCOutput_6.setNull(19,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_6.setObject(19,
											vm_configuration.vm_pool_id);
								}

								if (vm_configuration.vm_pool_name == null) {
									pstmt_tJDBCOutput_6.setNull(20,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_6.setString(20,
											vm_configuration.vm_pool_name);
								}

								if (vm_configuration.created_by_user_id == null) {
									pstmt_tJDBCOutput_6.setNull(21,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_6
											.setObject(
													21,
													vm_configuration.created_by_user_id);
								}

								if (vm_configuration.cluster_configuration_version == null) {
									pstmt_tJDBCOutput_6.setNull(22,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_6
											.setInt(22,
													vm_configuration.cluster_configuration_version);
								}

								if (vm_configuration.default_host_configuration_version == null) {
									pstmt_tJDBCOutput_6.setNull(23,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_6
											.setInt(23,
													vm_configuration.default_host_configuration_version);
								}

								if (vm_configuration.create_date != null) {
									pstmt_tJDBCOutput_6
											.setTimestamp(
													24,
													new java.sql.Timestamp(
															vm_configuration.create_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_6.setNull(24,
											java.sql.Types.DATE);
								}

								if (vm_configuration.update_date != null) {
									pstmt_tJDBCOutput_6
											.setTimestamp(
													25,
													new java.sql.Timestamp(
															vm_configuration.update_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_6.setNull(25,
											java.sql.Types.DATE);
								}

								if (vm_configuration.delete_date != null) {
									pstmt_tJDBCOutput_6
											.setTimestamp(
													26,
													new java.sql.Timestamp(
															vm_configuration.delete_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_6.setNull(26,
											java.sql.Types.DATE);
								}

								try {
									insertedCount_tJDBCOutput_6 = insertedCount_tJDBCOutput_6
											+ pstmt_tJDBCOutput_6
													.executeUpdate();
									nb_line_tJDBCOutput_6++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_6 = true;
									throw (e);
								}

								tos_count_tJDBCOutput_6++;

								/**
								 * [tJDBCOutput_6 main ] stop
								 */

							} // End of branch "vm_configuration"

						} // G_TM_M_280 close main tMap filter for table 'row4'

						/**
						 * [tJDBCInput_6 end ] start
						 */

						currentComponent = "tJDBCInput_6";

					}
				} finally {
					rs_tJDBCInput_6.close();
					stmt_tJDBCInput_6.close();

				}
				globalMap.put("tJDBCInput_6_NB_LINE", nb_line_tJDBCInput_6);

				ok_Hash.put("tJDBCInput_6", true);
				end_Hash.put("tJDBCInput_6", System.currentTimeMillis());

				/**
				 * [tJDBCInput_6 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row38 != null) {
					tHash_Lookup_row38.endGet();
				}
				globalMap.remove("tHash_Lookup_row38");

				if (tHash_Lookup_row39 != null) {
					tHash_Lookup_row39.endGet();
				}
				globalMap.remove("tHash_Lookup_row39");

				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tJDBCOutput_6 end ] start
				 */

				currentComponent = "tJDBCOutput_6";

				if (pstmt_tJDBCOutput_6 != null) {

					pstmt_tJDBCOutput_6.close();

				}

				nb_line_deleted_tJDBCOutput_6 = nb_line_deleted_tJDBCOutput_6
						+ deletedCount_tJDBCOutput_6;
				nb_line_update_tJDBCOutput_6 = nb_line_update_tJDBCOutput_6
						+ updatedCount_tJDBCOutput_6;
				nb_line_inserted_tJDBCOutput_6 = nb_line_inserted_tJDBCOutput_6
						+ insertedCount_tJDBCOutput_6;
				nb_line_rejected_tJDBCOutput_6 = nb_line_rejected_tJDBCOutput_6
						+ rejectedCount_tJDBCOutput_6;

				globalMap.put("tJDBCOutput_6_NB_LINE", nb_line_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_6);
				globalMap.put("tJDBCOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_6);

				ok_Hash.put("tJDBCOutput_6", true);
				end_Hash.put("tJDBCOutput_6", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_26Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row38");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row39");

			try {

				/**
				 * [tJDBCInput_6 finally ] start
				 */

				currentComponent = "tJDBCInput_6";

				/**
				 * [tJDBCInput_6 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tJDBCOutput_6 finally ] start
				 */

				currentComponent = "tJDBCOutput_6";

				/**
				 * [tJDBCOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_6_SUBPROCESS_STATE", 1);
	}

	public static class delete_vmsStruct implements
			routines.system.IPersistableRow<delete_vmsStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_name;

		public String getVm_name() {
			return this.vm_name;
		}

		public String vm_description;

		public String getVm_description() {
			return this.vm_description;
		}

		public Short vm_type;

		public Short getVm_type() {
			return this.vm_type;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public Object template_id;

		public Object getTemplate_id() {
			return this.template_id;
		}

		public String template_name;

		public String getTemplate_name() {
			return this.template_name;
		}

		public Short cpu_per_socket;

		public Short getCpu_per_socket() {
			return this.cpu_per_socket;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public short operating_system;

		public short getOperating_system() {
			return this.operating_system;
		}

		public Object default_host;

		public Object getDefault_host() {
			return this.default_host;
		}

		public Boolean high_availability;

		public Boolean getHigh_availability() {
			return this.high_availability;
		}

		public Boolean initialized;

		public Boolean getInitialized() {
			return this.initialized;
		}

		public Boolean stateless;

		public Boolean getStateless() {
			return this.stateless;
		}

		public Boolean fail_back;

		public Boolean getFail_back() {
			return this.fail_back;
		}

		public Short usb_policy;

		public Short getUsb_policy() {
			return this.usb_policy;
		}

		public String time_zone;

		public String getTime_zone() {
			return this.time_zone;
		}

		public Object vm_pool_id;

		public Object getVm_pool_id() {
			return this.vm_pool_id;
		}

		public String vm_pool_name;

		public String getVm_pool_name() {
			return this.vm_pool_name;
		}

		public Object created_by_user_id;

		public Object getCreated_by_user_id() {
			return this.created_by_user_id;
		}

		public Integer cluster_configuration_version;

		public Integer getCluster_configuration_version() {
			return this.cluster_configuration_version;
		}

		public Integer default_host_configuration_version;

		public Integer getDefault_host_configuration_version() {
			return this.default_host_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_id = (Object) dis.readObject();

					this.vm_name = readString(dis);

					this.vm_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_type = null;
					} else {
						this.vm_type = dis.readShort();
					}

					this.cluster_id = (Object) dis.readObject();

					this.template_id = (Object) dis.readObject();

					this.template_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.cpu_per_socket = null;
					} else {
						this.cpu_per_socket = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					this.memory_size_mb = readInteger(dis);

					this.operating_system = dis.readShort();

					this.default_host = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.high_availability = null;
					} else {
						this.high_availability = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.initialized = null;
					} else {
						this.initialized = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.stateless = null;
					} else {
						this.stateless = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.fail_back = null;
					} else {
						this.fail_back = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.usb_policy = null;
					} else {
						this.usb_policy = dis.readShort();
					}

					this.time_zone = readString(dis);

					this.vm_pool_id = (Object) dis.readObject();

					this.vm_pool_name = readString(dis);

					this.created_by_user_id = (Object) dis.readObject();

					this.cluster_configuration_version = readInteger(dis);

					this.default_host_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_name, dos);

				// String

				writeString(this.vm_description, dos);

				// Short

				if (this.vm_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_type);
				}

				// Object

				dos.writeObject(this.cluster_id);

				// Object

				dos.writeObject(this.template_id);

				// String

				writeString(this.template_name, dos);

				// Short

				if (this.cpu_per_socket == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_per_socket);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// short

				dos.writeShort(this.operating_system);

				// Object

				dos.writeObject(this.default_host);

				// Boolean

				if (this.high_availability == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.high_availability);
				}

				// Boolean

				if (this.initialized == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.initialized);
				}

				// Boolean

				if (this.stateless == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.stateless);
				}

				// Boolean

				if (this.fail_back == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.fail_back);
				}

				// Short

				if (this.usb_policy == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.usb_policy);
				}

				// String

				writeString(this.time_zone, dos);

				// Object

				dos.writeObject(this.vm_pool_id);

				// String

				writeString(this.vm_pool_name, dos);

				// Object

				dos.writeObject(this.created_by_user_id);

				// Integer

				writeInteger(this.cluster_configuration_version, dos);

				// Integer

				writeInteger(this.default_host_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_name=" + vm_name);
			sb.append(",vm_description=" + vm_description);
			sb.append(",vm_type=" + String.valueOf(vm_type));
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",template_id=" + String.valueOf(template_id));
			sb.append(",template_name=" + template_name);
			sb.append(",cpu_per_socket=" + String.valueOf(cpu_per_socket));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",operating_system=" + String.valueOf(operating_system));
			sb.append(",default_host=" + String.valueOf(default_host));
			sb.append(",high_availability=" + String.valueOf(high_availability));
			sb.append(",initialized=" + String.valueOf(initialized));
			sb.append(",stateless=" + String.valueOf(stateless));
			sb.append(",fail_back=" + String.valueOf(fail_back));
			sb.append(",usb_policy=" + String.valueOf(usb_policy));
			sb.append(",time_zone=" + time_zone);
			sb.append(",vm_pool_id=" + String.valueOf(vm_pool_id));
			sb.append(",vm_pool_name=" + vm_pool_name);
			sb.append(",created_by_user_id="
					+ String.valueOf(created_by_user_id));
			sb.append(",cluster_configuration_version="
					+ String.valueOf(cluster_configuration_version));
			sb.append(",default_host_configuration_version="
					+ String.valueOf(default_host_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_vmsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		public String vm_name;

		public String getVm_name() {
			return this.vm_name;
		}

		public String vm_description;

		public String getVm_description() {
			return this.vm_description;
		}

		public Short vm_type;

		public Short getVm_type() {
			return this.vm_type;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public Object template_id;

		public Object getTemplate_id() {
			return this.template_id;
		}

		public String template_name;

		public String getTemplate_name() {
			return this.template_name;
		}

		public Short cpu_per_socket;

		public Short getCpu_per_socket() {
			return this.cpu_per_socket;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public Short operating_system;

		public Short getOperating_system() {
			return this.operating_system;
		}

		public Object default_host;

		public Object getDefault_host() {
			return this.default_host;
		}

		public Boolean high_availability;

		public Boolean getHigh_availability() {
			return this.high_availability;
		}

		public Boolean initialized;

		public Boolean getInitialized() {
			return this.initialized;
		}

		public Boolean stateless;

		public Boolean getStateless() {
			return this.stateless;
		}

		public Boolean fail_back;

		public Boolean getFail_back() {
			return this.fail_back;
		}

		public Short usb_policy;

		public Short getUsb_policy() {
			return this.usb_policy;
		}

		public String time_zone;

		public String getTime_zone() {
			return this.time_zone;
		}

		public Object vm_pool_id;

		public Object getVm_pool_id() {
			return this.vm_pool_id;
		}

		public String vm_pool_name;

		public String getVm_pool_name() {
			return this.vm_pool_name;
		}

		public Object created_by_user_id;

		public Object getCreated_by_user_id() {
			return this.created_by_user_id;
		}

		public Integer cluster_configuration_version;

		public Integer getCluster_configuration_version() {
			return this.cluster_configuration_version;
		}

		public Integer default_host_configuration_version;

		public Integer getDefault_host_configuration_version() {
			return this.default_host_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

					this.vm_name = readString(dis);

					this.vm_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_type = null;
					} else {
						this.vm_type = dis.readShort();
					}

					this.cluster_id = (Object) dis.readObject();

					this.template_id = (Object) dis.readObject();

					this.template_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.cpu_per_socket = null;
					} else {
						this.cpu_per_socket = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					this.memory_size_mb = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.operating_system = null;
					} else {
						this.operating_system = dis.readShort();
					}

					this.default_host = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.high_availability = null;
					} else {
						this.high_availability = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.initialized = null;
					} else {
						this.initialized = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.stateless = null;
					} else {
						this.stateless = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.fail_back = null;
					} else {
						this.fail_back = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.usb_policy = null;
					} else {
						this.usb_policy = dis.readShort();
					}

					this.time_zone = readString(dis);

					this.vm_pool_id = (Object) dis.readObject();

					this.vm_pool_name = readString(dis);

					this.created_by_user_id = (Object) dis.readObject();

					this.cluster_configuration_version = readInteger(dis);

					this.default_host_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

				// String

				writeString(this.vm_name, dos);

				// String

				writeString(this.vm_description, dos);

				// Short

				if (this.vm_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_type);
				}

				// Object

				dos.writeObject(this.cluster_id);

				// Object

				dos.writeObject(this.template_id);

				// String

				writeString(this.template_name, dos);

				// Short

				if (this.cpu_per_socket == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_per_socket);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// Short

				if (this.operating_system == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.operating_system);
				}

				// Object

				dos.writeObject(this.default_host);

				// Boolean

				if (this.high_availability == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.high_availability);
				}

				// Boolean

				if (this.initialized == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.initialized);
				}

				// Boolean

				if (this.stateless == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.stateless);
				}

				// Boolean

				if (this.fail_back == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.fail_back);
				}

				// Short

				if (this.usb_policy == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.usb_policy);
				}

				// String

				writeString(this.time_zone, dos);

				// Object

				dos.writeObject(this.vm_pool_id);

				// String

				writeString(this.vm_pool_name, dos);

				// Object

				dos.writeObject(this.created_by_user_id);

				// Integer

				writeInteger(this.cluster_configuration_version, dos);

				// Integer

				writeInteger(this.default_host_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append(",vm_name=" + vm_name);
			sb.append(",vm_description=" + vm_description);
			sb.append(",vm_type=" + String.valueOf(vm_type));
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",template_id=" + String.valueOf(template_id));
			sb.append(",template_name=" + template_name);
			sb.append(",cpu_per_socket=" + String.valueOf(cpu_per_socket));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",operating_system=" + String.valueOf(operating_system));
			sb.append(",default_host=" + String.valueOf(default_host));
			sb.append(",high_availability=" + String.valueOf(high_availability));
			sb.append(",initialized=" + String.valueOf(initialized));
			sb.append(",stateless=" + String.valueOf(stateless));
			sb.append(",fail_back=" + String.valueOf(fail_back));
			sb.append(",usb_policy=" + String.valueOf(usb_policy));
			sb.append(",time_zone=" + time_zone);
			sb.append(",vm_pool_id=" + String.valueOf(vm_pool_id));
			sb.append(",vm_pool_name=" + vm_pool_name);
			sb.append(",created_by_user_id="
					+ String.valueOf(created_by_user_id));
			sb.append(",cluster_configuration_version="
					+ String.valueOf(cluster_configuration_version));
			sb.append(",default_host_configuration_version="
					+ String.valueOf(default_host_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_26Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_26Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		public String vm_name;

		public String getVm_name() {
			return this.vm_name;
		}

		public String vm_description;

		public String getVm_description() {
			return this.vm_description;
		}

		public Short vm_type;

		public Short getVm_type() {
			return this.vm_type;
		}

		public Object cluster_id;

		public Object getCluster_id() {
			return this.cluster_id;
		}

		public Object template_id;

		public Object getTemplate_id() {
			return this.template_id;
		}

		public String template_name;

		public String getTemplate_name() {
			return this.template_name;
		}

		public Short cpu_per_socket;

		public Short getCpu_per_socket() {
			return this.cpu_per_socket;
		}

		public Short number_of_sockets;

		public Short getNumber_of_sockets() {
			return this.number_of_sockets;
		}

		public Integer memory_size_mb;

		public Integer getMemory_size_mb() {
			return this.memory_size_mb;
		}

		public Short operating_system;

		public Short getOperating_system() {
			return this.operating_system;
		}

		public Object default_host;

		public Object getDefault_host() {
			return this.default_host;
		}

		public Boolean high_availability;

		public Boolean getHigh_availability() {
			return this.high_availability;
		}

		public Boolean initialized;

		public Boolean getInitialized() {
			return this.initialized;
		}

		public Boolean stateless;

		public Boolean getStateless() {
			return this.stateless;
		}

		public Boolean fail_back;

		public Boolean getFail_back() {
			return this.fail_back;
		}

		public Short usb_policy;

		public Short getUsb_policy() {
			return this.usb_policy;
		}

		public String time_zone;

		public String getTime_zone() {
			return this.time_zone;
		}

		public Object vm_pool_id;

		public Object getVm_pool_id() {
			return this.vm_pool_id;
		}

		public String vm_pool_name;

		public String getVm_pool_name() {
			return this.vm_pool_name;
		}

		public Object created_by_user_id;

		public Object getCreated_by_user_id() {
			return this.created_by_user_id;
		}

		public Integer cluster_configuration_version;

		public Integer getCluster_configuration_version() {
			return this.cluster_configuration_version;
		}

		public Integer default_host_configuration_version;

		public Integer getDefault_host_configuration_version() {
			return this.default_host_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

					this.vm_name = readString(dis);

					this.vm_description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_type = null;
					} else {
						this.vm_type = dis.readShort();
					}

					this.cluster_id = (Object) dis.readObject();

					this.template_id = (Object) dis.readObject();

					this.template_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.cpu_per_socket = null;
					} else {
						this.cpu_per_socket = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.number_of_sockets = null;
					} else {
						this.number_of_sockets = dis.readShort();
					}

					this.memory_size_mb = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.operating_system = null;
					} else {
						this.operating_system = dis.readShort();
					}

					this.default_host = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.high_availability = null;
					} else {
						this.high_availability = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.initialized = null;
					} else {
						this.initialized = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.stateless = null;
					} else {
						this.stateless = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.fail_back = null;
					} else {
						this.fail_back = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.usb_policy = null;
					} else {
						this.usb_policy = dis.readShort();
					}

					this.time_zone = readString(dis);

					this.vm_pool_id = (Object) dis.readObject();

					this.vm_pool_name = readString(dis);

					this.created_by_user_id = (Object) dis.readObject();

					this.cluster_configuration_version = readInteger(dis);

					this.default_host_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

				// String

				writeString(this.vm_name, dos);

				// String

				writeString(this.vm_description, dos);

				// Short

				if (this.vm_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_type);
				}

				// Object

				dos.writeObject(this.cluster_id);

				// Object

				dos.writeObject(this.template_id);

				// String

				writeString(this.template_name, dos);

				// Short

				if (this.cpu_per_socket == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.cpu_per_socket);
				}

				// Short

				if (this.number_of_sockets == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.number_of_sockets);
				}

				// Integer

				writeInteger(this.memory_size_mb, dos);

				// Short

				if (this.operating_system == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.operating_system);
				}

				// Object

				dos.writeObject(this.default_host);

				// Boolean

				if (this.high_availability == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.high_availability);
				}

				// Boolean

				if (this.initialized == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.initialized);
				}

				// Boolean

				if (this.stateless == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.stateless);
				}

				// Boolean

				if (this.fail_back == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.fail_back);
				}

				// Short

				if (this.usb_policy == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.usb_policy);
				}

				// String

				writeString(this.time_zone, dos);

				// Object

				dos.writeObject(this.vm_pool_id);

				// String

				writeString(this.vm_pool_name, dos);

				// Object

				dos.writeObject(this.created_by_user_id);

				// Integer

				writeInteger(this.cluster_configuration_version, dos);

				// Integer

				writeInteger(this.default_host_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append(",vm_name=" + vm_name);
			sb.append(",vm_description=" + vm_description);
			sb.append(",vm_type=" + String.valueOf(vm_type));
			sb.append(",cluster_id=" + String.valueOf(cluster_id));
			sb.append(",template_id=" + String.valueOf(template_id));
			sb.append(",template_name=" + template_name);
			sb.append(",cpu_per_socket=" + String.valueOf(cpu_per_socket));
			sb.append(",number_of_sockets=" + String.valueOf(number_of_sockets));
			sb.append(",memory_size_mb=" + String.valueOf(memory_size_mb));
			sb.append(",operating_system=" + String.valueOf(operating_system));
			sb.append(",default_host=" + String.valueOf(default_host));
			sb.append(",high_availability=" + String.valueOf(high_availability));
			sb.append(",initialized=" + String.valueOf(initialized));
			sb.append(",stateless=" + String.valueOf(stateless));
			sb.append(",fail_back=" + String.valueOf(fail_back));
			sb.append(",usb_policy=" + String.valueOf(usb_policy));
			sb.append(",time_zone=" + time_zone);
			sb.append(",vm_pool_id=" + String.valueOf(vm_pool_id));
			sb.append(",vm_pool_name=" + vm_pool_name);
			sb.append(",created_by_user_id="
					+ String.valueOf(created_by_user_id));
			sb.append(",cluster_configuration_version="
					+ String.valueOf(cluster_configuration_version));
			sb.append(",default_host_configuration_version="
					+ String.valueOf(default_host_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_26Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_26_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_25Process(globalMap);

				row25Struct row25 = new row25Struct();
				delete_vmsStruct delete_vms = new delete_vmsStruct();

				/**
				 * [tJDBCOutput_19 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_19", false);
				start_Hash.put("tJDBCOutput_19", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_19";

				int tos_count_tJDBCOutput_19 = 0;

				int nb_line_tJDBCOutput_19 = 0;
				int nb_line_update_tJDBCOutput_19 = 0;
				int nb_line_inserted_tJDBCOutput_19 = 0;
				int nb_line_deleted_tJDBCOutput_19 = 0;
				int nb_line_rejected_tJDBCOutput_19 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_19 = 0;

				int deletedCount_tJDBCOutput_19 = 0;
				int updatedCount_tJDBCOutput_19 = 0;
				int insertedCount_tJDBCOutput_19 = 0;
				int rejectedCount_tJDBCOutput_19 = 0;

				boolean whetherReject_tJDBCOutput_19 = false;

				java.sql.Connection connection_tJDBCOutput_19 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_19 = 10000;
				int batchSizeCounter_tJDBCOutput_19 = 0;

				String insert_tJDBCOutput_19 = "INSERT INTO "
						+ "vm_configuration"
						+ " (vm_id,vm_name,vm_description,vm_type,cluster_id,template_id,template_name,cpu_per_socket,number_of_sockets,memory_size_mb,operating_system,default_host,high_availability,initialized,stateless,fail_back,usb_policy,time_zone,vm_pool_id,vm_pool_name,created_by_user_id,cluster_configuration_version,default_host_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_19 = connection_tJDBCOutput_19
						.prepareStatement(insert_tJDBCOutput_19);

				/**
				 * [tJDBCOutput_19 begin ] stop
				 */

				/**
				 * [tMap_19 begin ] start
				 */

				ok_Hash.put("tMap_19", false);
				start_Hash.put("tMap_19", System.currentTimeMillis());

				currentComponent = "tMap_19";

				int tos_count_tMap_19 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) globalMap
						.get("tHash_Lookup_row24"));

				row24Struct row24HashKey = new row24Struct();
				row24Struct row24Default = new row24Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_19__Struct {
				}
				Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_vmsStruct delete_vms_tmp = new delete_vmsStruct();
				// ###############################

				/**
				 * [tMap_19 begin ] stop
				 */

				/**
				 * [tJDBCInput_26 begin ] start
				 */

				ok_Hash.put("tJDBCInput_26", false);
				start_Hash.put("tJDBCInput_26", System.currentTimeMillis());

				currentComponent = "tJDBCInput_26";

				int tos_count_tJDBCInput_26 = 0;

				int nb_line_tJDBCInput_26 = 0;
				java.sql.Connection conn_tJDBCInput_26 = null;
				conn_tJDBCInput_26 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_26 = conn_tJDBCInput_26
						.createStatement();

				String dbquery_tJDBCInput_26 = "SELECT history_id,   		vm_id,   		upper(cast(vm_id as char(36))) as vm_join_id,  		vm_name,   		vm_description,   		vm_type,   		cluster_id,   		template_id,   		template_name,   		cpu_per_socket,   		number_of_sockets,   		memory_size_mb,   		operating_system,   		default_host,   		high_availability,   		initialized,   		stateless,   		fail_back,   		usb_policy,   		time_zone,  		vm_pool_id,  		vm_pool_name, 		created_by_user_id,  		cluster_configuration_version,   		default_host_configuration_version,   		create_date,   		update_date  FROM v3_5_latest_configuration_vms";

				globalMap.put("tJDBCInput_26_QUERY", dbquery_tJDBCInput_26);
				java.sql.ResultSet rs_tJDBCInput_26 = null;
				try {
					rs_tJDBCInput_26 = stmt_tJDBCInput_26
							.executeQuery(dbquery_tJDBCInput_26);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_26 = rs_tJDBCInput_26
							.getMetaData();
					int colQtyInRs_tJDBCInput_26 = rsmd_tJDBCInput_26
							.getColumnCount();

					String tmpContent_tJDBCInput_26 = null;
					int column_index_tJDBCInput_26 = 1;

					while (rs_tJDBCInput_26.next()) {
						nb_line_tJDBCInput_26++;

						column_index_tJDBCInput_26 = 1;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.history_id = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.history_id = rs_tJDBCInput_26
										.getInt(column_index_tJDBCInput_26);
							} else {
								row25.history_id = null;
							}

						}

						column_index_tJDBCInput_26 = 2;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.vm_id = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.vm_id = rs_tJDBCInput_26
										.getObject(column_index_tJDBCInput_26);
							} else {
								row25.vm_id = null;
							}

						}

						column_index_tJDBCInput_26 = 3;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_26 = rs_tJDBCInput_26
									.getString(column_index_tJDBCInput_26);
							if (tmpContent_tJDBCInput_26 != null) {
								row25.vm_join_id = tmpContent_tJDBCInput_26;
							} else {
								row25.vm_join_id = null;
							}

						}

						column_index_tJDBCInput_26 = 4;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.vm_name = null;
						} else {

							tmpContent_tJDBCInput_26 = rs_tJDBCInput_26
									.getString(column_index_tJDBCInput_26);
							if (tmpContent_tJDBCInput_26 != null) {
								row25.vm_name = tmpContent_tJDBCInput_26;
							} else {
								row25.vm_name = null;
							}

						}

						column_index_tJDBCInput_26 = 5;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.vm_description = null;
						} else {

							tmpContent_tJDBCInput_26 = rs_tJDBCInput_26
									.getString(column_index_tJDBCInput_26);
							if (tmpContent_tJDBCInput_26 != null) {
								row25.vm_description = tmpContent_tJDBCInput_26;
							} else {
								row25.vm_description = null;
							}

						}

						column_index_tJDBCInput_26 = 6;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.vm_type = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.vm_type = rs_tJDBCInput_26
										.getShort(column_index_tJDBCInput_26);
							} else {
								row25.vm_type = null;
							}

						}

						column_index_tJDBCInput_26 = 7;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.cluster_id = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.cluster_id = rs_tJDBCInput_26
										.getObject(column_index_tJDBCInput_26);
							} else {
								row25.cluster_id = null;
							}

						}

						column_index_tJDBCInput_26 = 8;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.template_id = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.template_id = rs_tJDBCInput_26
										.getObject(column_index_tJDBCInput_26);
							} else {
								row25.template_id = null;
							}

						}

						column_index_tJDBCInput_26 = 9;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.template_name = null;
						} else {

							tmpContent_tJDBCInput_26 = rs_tJDBCInput_26
									.getString(column_index_tJDBCInput_26);
							if (tmpContent_tJDBCInput_26 != null) {
								row25.template_name = tmpContent_tJDBCInput_26;
							} else {
								row25.template_name = null;
							}

						}

						column_index_tJDBCInput_26 = 10;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.cpu_per_socket = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.cpu_per_socket = rs_tJDBCInput_26
										.getShort(column_index_tJDBCInput_26);
							} else {
								row25.cpu_per_socket = null;
							}

						}

						column_index_tJDBCInput_26 = 11;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.number_of_sockets = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.number_of_sockets = rs_tJDBCInput_26
										.getShort(column_index_tJDBCInput_26);
							} else {
								row25.number_of_sockets = null;
							}

						}

						column_index_tJDBCInput_26 = 12;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.memory_size_mb = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.memory_size_mb = rs_tJDBCInput_26
										.getInt(column_index_tJDBCInput_26);
							} else {
								row25.memory_size_mb = null;
							}

						}

						column_index_tJDBCInput_26 = 13;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.operating_system = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.operating_system = rs_tJDBCInput_26
										.getShort(column_index_tJDBCInput_26);
							} else {
								row25.operating_system = null;
							}

						}

						column_index_tJDBCInput_26 = 14;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.default_host = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.default_host = rs_tJDBCInput_26
										.getObject(column_index_tJDBCInput_26);
							} else {
								row25.default_host = null;
							}

						}

						column_index_tJDBCInput_26 = 15;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.high_availability = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.high_availability = rs_tJDBCInput_26
										.getBoolean(column_index_tJDBCInput_26);
							} else {
								row25.high_availability = null;
							}

						}

						column_index_tJDBCInput_26 = 16;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.initialized = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.initialized = rs_tJDBCInput_26
										.getBoolean(column_index_tJDBCInput_26);
							} else {
								row25.initialized = null;
							}

						}

						column_index_tJDBCInput_26 = 17;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.stateless = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.stateless = rs_tJDBCInput_26
										.getBoolean(column_index_tJDBCInput_26);
							} else {
								row25.stateless = null;
							}

						}

						column_index_tJDBCInput_26 = 18;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.fail_back = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.fail_back = rs_tJDBCInput_26
										.getBoolean(column_index_tJDBCInput_26);
							} else {
								row25.fail_back = null;
							}

						}

						column_index_tJDBCInput_26 = 19;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.usb_policy = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.usb_policy = rs_tJDBCInput_26
										.getShort(column_index_tJDBCInput_26);
							} else {
								row25.usb_policy = null;
							}

						}

						column_index_tJDBCInput_26 = 20;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.time_zone = null;
						} else {

							tmpContent_tJDBCInput_26 = rs_tJDBCInput_26
									.getString(column_index_tJDBCInput_26);
							if (tmpContent_tJDBCInput_26 != null) {
								row25.time_zone = tmpContent_tJDBCInput_26;
							} else {
								row25.time_zone = null;
							}

						}

						column_index_tJDBCInput_26 = 21;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.vm_pool_id = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.vm_pool_id = rs_tJDBCInput_26
										.getObject(column_index_tJDBCInput_26);
							} else {
								row25.vm_pool_id = null;
							}

						}

						column_index_tJDBCInput_26 = 22;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.vm_pool_name = null;
						} else {

							tmpContent_tJDBCInput_26 = rs_tJDBCInput_26
									.getString(column_index_tJDBCInput_26);
							if (tmpContent_tJDBCInput_26 != null) {
								row25.vm_pool_name = tmpContent_tJDBCInput_26;
							} else {
								row25.vm_pool_name = null;
							}

						}

						column_index_tJDBCInput_26 = 23;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.created_by_user_id = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.created_by_user_id = rs_tJDBCInput_26
										.getObject(column_index_tJDBCInput_26);
							} else {
								row25.created_by_user_id = null;
							}

						}

						column_index_tJDBCInput_26 = 24;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.cluster_configuration_version = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.cluster_configuration_version = rs_tJDBCInput_26
										.getInt(column_index_tJDBCInput_26);
							} else {
								row25.cluster_configuration_version = null;
							}

						}

						column_index_tJDBCInput_26 = 25;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.default_host_configuration_version = null;
						} else {

							if (rs_tJDBCInput_26
									.getObject(column_index_tJDBCInput_26) != null) {
								row25.default_host_configuration_version = rs_tJDBCInput_26
										.getInt(column_index_tJDBCInput_26);
							} else {
								row25.default_host_configuration_version = null;
							}

						}

						column_index_tJDBCInput_26 = 26;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_26 = null;
							try {
								date_tJDBCInput_26 = rs_tJDBCInput_26
										.getTimestamp(column_index_tJDBCInput_26);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_26 = rs_tJDBCInput_26
										.getDate(column_index_tJDBCInput_26);
							}
							row25.create_date = date_tJDBCInput_26;

						}

						column_index_tJDBCInput_26 = 27;

						if (colQtyInRs_tJDBCInput_26 < column_index_tJDBCInput_26) {
							row25.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_26 = null;
							try {
								date_tJDBCInput_26 = rs_tJDBCInput_26
										.getTimestamp(column_index_tJDBCInput_26);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_26 = rs_tJDBCInput_26
										.getDate(column_index_tJDBCInput_26);
							}
							row25.update_date = date_tJDBCInput_26;

						}

						/**
						 * [tJDBCInput_26 begin ] stop
						 */
						/**
						 * [tJDBCInput_26 main ] start
						 */

						currentComponent = "tJDBCInput_26";

						tos_count_tJDBCInput_26++;

						/**
						 * [tJDBCInput_26 main ] stop
						 */

						/**
						 * [tMap_19 main ] start
						 */

						currentComponent = "tMap_19";

						boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_19 = false;
						boolean mainRowRejected_tMap_19 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row24"
						// /////////////////////////////////////////////

						boolean forceLooprow24 = false;

						row24Struct row24ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_19) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_19 = false;

							row24HashKey.vm_join_id = row25.vm_join_id;

							row24HashKey.hashCodeDirty = true;

							tHash_Lookup_row24.lookup(row24HashKey);

							if (!tHash_Lookup_row24.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_19 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row24 != null
								&& tHash_Lookup_row24.getCount(row24HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row24' and it contains more one result from keys :  row24.vm_join_id = '"
							// + row24HashKey.vm_join_id + "'");
						} // G 071

						row24Struct row24 = null;

						row24Struct fromLookup_row24 = null;
						row24 = row24Default;

						if (tHash_Lookup_row24 != null
								&& tHash_Lookup_row24.hasNext()) { // G 099

							fromLookup_row24 = tHash_Lookup_row24.next();

						} // G 099

						if (fromLookup_row24 != null) {
							row24 = fromLookup_row24;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
							// ###############################
							// # Output tables

							delete_vms = null;

							if (!rejectedInnerJoin_tMap_19) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'delete_vms'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_19) {
								delete_vms_tmp.vm_id = row25.vm_id;
								delete_vms_tmp.vm_name = row25.vm_name;
								delete_vms_tmp.vm_description = row25.vm_description;
								delete_vms_tmp.vm_type = row25.vm_type;
								delete_vms_tmp.cluster_id = row25.cluster_id;
								delete_vms_tmp.template_id = row25.template_id;
								delete_vms_tmp.template_name = row25.template_name;
								delete_vms_tmp.cpu_per_socket = row25.cpu_per_socket;
								delete_vms_tmp.number_of_sockets = row25.number_of_sockets;
								delete_vms_tmp.memory_size_mb = row25.memory_size_mb;
								delete_vms_tmp.operating_system = row25.operating_system;
								delete_vms_tmp.default_host = row25.default_host;
								delete_vms_tmp.high_availability = row25.high_availability;
								delete_vms_tmp.initialized = row25.initialized;
								delete_vms_tmp.stateless = row25.stateless;
								delete_vms_tmp.fail_back = row25.fail_back;
								delete_vms_tmp.usb_policy = row25.usb_policy;
								delete_vms_tmp.time_zone = row25.time_zone;
								delete_vms_tmp.vm_pool_id = row25.vm_pool_id;
								delete_vms_tmp.vm_pool_name = row25.vm_pool_name;
								delete_vms_tmp.created_by_user_id = row25.created_by_user_id;
								delete_vms_tmp.cluster_configuration_version = row25.cluster_configuration_version;
								delete_vms_tmp.default_host_configuration_version = row25.default_host_configuration_version;
								delete_vms_tmp.create_date = row25.create_date;
								delete_vms_tmp.update_date = context.runTime;
								delete_vms_tmp.delete_date = context.runTime;
								delete_vms = delete_vms_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_19 = false;

						tos_count_tMap_19++;

						/**
						 * [tMap_19 main ] stop
						 */
						// Start of branch "delete_vms"
						if (delete_vms != null) {

							/**
							 * [tJDBCOutput_19 main ] start
							 */

							currentComponent = "tJDBCOutput_19";

							whetherReject_tJDBCOutput_19 = false;
							if (delete_vms.vm_id == null) {
								pstmt_tJDBCOutput_19.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_19.setObject(1,
										delete_vms.vm_id);
							}

							if (delete_vms.vm_name == null) {
								pstmt_tJDBCOutput_19.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_19.setString(2,
										delete_vms.vm_name);
							}

							if (delete_vms.vm_description == null) {
								pstmt_tJDBCOutput_19.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_19.setString(3,
										delete_vms.vm_description);
							}

							if (delete_vms.vm_type == null) {
								pstmt_tJDBCOutput_19.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_19.setShort(4,
										delete_vms.vm_type);
							}

							if (delete_vms.cluster_id == null) {
								pstmt_tJDBCOutput_19.setNull(5,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_19.setObject(5,
										delete_vms.cluster_id);
							}

							if (delete_vms.template_id == null) {
								pstmt_tJDBCOutput_19.setNull(6,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_19.setObject(6,
										delete_vms.template_id);
							}

							if (delete_vms.template_name == null) {
								pstmt_tJDBCOutput_19.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_19.setString(7,
										delete_vms.template_name);
							}

							if (delete_vms.cpu_per_socket == null) {
								pstmt_tJDBCOutput_19.setNull(8,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_19.setShort(8,
										delete_vms.cpu_per_socket);
							}

							if (delete_vms.number_of_sockets == null) {
								pstmt_tJDBCOutput_19.setNull(9,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_19.setShort(9,
										delete_vms.number_of_sockets);
							}

							if (delete_vms.memory_size_mb == null) {
								pstmt_tJDBCOutput_19.setNull(10,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_19.setInt(10,
										delete_vms.memory_size_mb);
							}

							pstmt_tJDBCOutput_19.setShort(11,
									delete_vms.operating_system);

							if (delete_vms.default_host == null) {
								pstmt_tJDBCOutput_19.setNull(12,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_19.setObject(12,
										delete_vms.default_host);
							}

							if (delete_vms.high_availability == null) {
								pstmt_tJDBCOutput_19.setNull(13,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tJDBCOutput_19.setBoolean(13,
										delete_vms.high_availability);
							}

							if (delete_vms.initialized == null) {
								pstmt_tJDBCOutput_19.setNull(14,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tJDBCOutput_19.setBoolean(14,
										delete_vms.initialized);
							}

							if (delete_vms.stateless == null) {
								pstmt_tJDBCOutput_19.setNull(15,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tJDBCOutput_19.setBoolean(15,
										delete_vms.stateless);
							}

							if (delete_vms.fail_back == null) {
								pstmt_tJDBCOutput_19.setNull(16,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tJDBCOutput_19.setBoolean(16,
										delete_vms.fail_back);
							}

							if (delete_vms.usb_policy == null) {
								pstmt_tJDBCOutput_19.setNull(17,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_19.setShort(17,
										delete_vms.usb_policy);
							}

							if (delete_vms.time_zone == null) {
								pstmt_tJDBCOutput_19.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_19.setString(18,
										delete_vms.time_zone);
							}

							if (delete_vms.vm_pool_id == null) {
								pstmt_tJDBCOutput_19.setNull(19,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_19.setObject(19,
										delete_vms.vm_pool_id);
							}

							if (delete_vms.vm_pool_name == null) {
								pstmt_tJDBCOutput_19.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_19.setString(20,
										delete_vms.vm_pool_name);
							}

							if (delete_vms.created_by_user_id == null) {
								pstmt_tJDBCOutput_19.setNull(21,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_19.setObject(21,
										delete_vms.created_by_user_id);
							}

							if (delete_vms.cluster_configuration_version == null) {
								pstmt_tJDBCOutput_19.setNull(22,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_19
										.setInt(22,
												delete_vms.cluster_configuration_version);
							}

							if (delete_vms.default_host_configuration_version == null) {
								pstmt_tJDBCOutput_19.setNull(23,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_19
										.setInt(23,
												delete_vms.default_host_configuration_version);
							}

							if (delete_vms.create_date != null) {
								pstmt_tJDBCOutput_19.setTimestamp(
										24,
										new java.sql.Timestamp(
												delete_vms.create_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_19.setNull(24,
										java.sql.Types.DATE);
							}

							if (delete_vms.update_date != null) {
								pstmt_tJDBCOutput_19.setTimestamp(
										25,
										new java.sql.Timestamp(
												delete_vms.update_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_19.setNull(25,
										java.sql.Types.DATE);
							}

							if (delete_vms.delete_date != null) {
								pstmt_tJDBCOutput_19.setTimestamp(
										26,
										new java.sql.Timestamp(
												delete_vms.delete_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_19.setNull(26,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tJDBCOutput_19 = insertedCount_tJDBCOutput_19
										+ pstmt_tJDBCOutput_19.executeUpdate();
								nb_line_tJDBCOutput_19++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_19 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_19++;

							/**
							 * [tJDBCOutput_19 main ] stop
							 */

						} // End of branch "delete_vms"

						/**
						 * [tJDBCInput_26 end ] start
						 */

						currentComponent = "tJDBCInput_26";

					}
				} finally {
					rs_tJDBCInput_26.close();
					stmt_tJDBCInput_26.close();

				}
				globalMap.put("tJDBCInput_26_NB_LINE", nb_line_tJDBCInput_26);

				ok_Hash.put("tJDBCInput_26", true);
				end_Hash.put("tJDBCInput_26", System.currentTimeMillis());

				/**
				 * [tJDBCInput_26 end ] stop
				 */

				/**
				 * [tMap_19 end ] start
				 */

				currentComponent = "tMap_19";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row24 != null) {
					tHash_Lookup_row24.endGet();
				}
				globalMap.remove("tHash_Lookup_row24");

				// ###############################

				ok_Hash.put("tMap_19", true);
				end_Hash.put("tMap_19", System.currentTimeMillis());

				/**
				 * [tMap_19 end ] stop
				 */

				/**
				 * [tJDBCOutput_19 end ] start
				 */

				currentComponent = "tJDBCOutput_19";

				if (pstmt_tJDBCOutput_19 != null) {

					pstmt_tJDBCOutput_19.close();

				}

				nb_line_deleted_tJDBCOutput_19 = nb_line_deleted_tJDBCOutput_19
						+ deletedCount_tJDBCOutput_19;
				nb_line_update_tJDBCOutput_19 = nb_line_update_tJDBCOutput_19
						+ updatedCount_tJDBCOutput_19;
				nb_line_inserted_tJDBCOutput_19 = nb_line_inserted_tJDBCOutput_19
						+ insertedCount_tJDBCOutput_19;
				nb_line_rejected_tJDBCOutput_19 = nb_line_rejected_tJDBCOutput_19
						+ rejectedCount_tJDBCOutput_19;

				globalMap.put("tJDBCOutput_19_NB_LINE", nb_line_tJDBCOutput_19);
				globalMap.put("tJDBCOutput_19_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_19);
				globalMap.put("tJDBCOutput_19_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_19);
				globalMap.put("tJDBCOutput_19_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_19);
				globalMap.put("tJDBCOutput_19_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_19);

				ok_Hash.put("tJDBCOutput_19", true);
				end_Hash.put("tJDBCOutput_19", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_19 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_26:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_19"
			globalMap.remove("tHash_Lookup_row24");

			try {

				/**
				 * [tJDBCInput_26 finally ] start
				 */

				currentComponent = "tJDBCInput_26";

				/**
				 * [tJDBCInput_26 finally ] stop
				 */

				/**
				 * [tMap_19 finally ] start
				 */

				currentComponent = "tMap_19";

				/**
				 * [tMap_19 finally ] stop
				 */

				/**
				 * [tJDBCOutput_19 finally ] start
				 */

				currentComponent = "tJDBCOutput_19";

				/**
				 * [tJDBCOutput_19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_26_SUBPROCESS_STATE", 1);
	}

	public static class vm_disk_configurationStruct implements
			routines.system.IPersistableRow<vm_disk_configurationStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object image_id;

		public Object getImage_id() {
			return this.image_id;
		}

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public String vm_disk_description;

		public String getVm_disk_description() {
			return this.vm_disk_description;
		}

		public Integer vm_disk_size_mb;

		public Integer getVm_disk_size_mb() {
			return this.vm_disk_size_mb;
		}

		public Short vm_disk_type;

		public Short getVm_disk_type() {
			return this.vm_disk_type;
		}

		public Short vm_disk_format;

		public Short getVm_disk_format() {
			return this.vm_disk_format;
		}

		public Short vm_disk_interface;

		public Short getVm_disk_interface() {
			return this.vm_disk_interface;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public String vm_disk_name;

		public String getVm_disk_name() {
			return this.vm_disk_name;
		}

		public Boolean is_shared;

		public Boolean getIs_shared() {
			return this.is_shared;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.image_id = (Object) dis.readObject();

					this.storage_domain_id = (Object) dis.readObject();

					this.vm_disk_description = readString(dis);

					this.vm_disk_size_mb = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_type = null;
					} else {
						this.vm_disk_type = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_format = null;
					} else {
						this.vm_disk_format = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_interface = null;
					} else {
						this.vm_disk_interface = dis.readShort();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

					this.vm_disk_id = (Object) dis.readObject();

					this.vm_disk_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_shared = null;
					} else {
						this.is_shared = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.image_id);

				// Object

				dos.writeObject(this.storage_domain_id);

				// String

				writeString(this.vm_disk_description, dos);

				// Integer

				writeInteger(this.vm_disk_size_mb, dos);

				// Short

				if (this.vm_disk_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_type);
				}

				// Short

				if (this.vm_disk_format == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_format);
				}

				// Short

				if (this.vm_disk_interface == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_interface);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

				// Object

				dos.writeObject(this.vm_disk_id);

				// String

				writeString(this.vm_disk_name, dos);

				// Boolean

				if (this.is_shared == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_shared);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("image_id=" + String.valueOf(image_id));
			sb.append(",storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",vm_disk_description=" + vm_disk_description);
			sb.append(",vm_disk_size_mb=" + String.valueOf(vm_disk_size_mb));
			sb.append(",vm_disk_type=" + String.valueOf(vm_disk_type));
			sb.append(",vm_disk_format=" + String.valueOf(vm_disk_format));
			sb.append(",vm_disk_interface=" + String.valueOf(vm_disk_interface));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append(",vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_name=" + vm_disk_name);
			sb.append(",is_shared=" + String.valueOf(is_shared));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(vm_disk_configurationStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public String vm_disk_name;

		public String getVm_disk_name() {
			return this.vm_disk_name;
		}

		public String vm_disk_description;

		public String getVm_disk_description() {
			return this.vm_disk_description;
		}

		public Object image_id;

		public Object getImage_id() {
			return this.image_id;
		}

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public Integer vm_disk_size_mb;

		public Integer getVm_disk_size_mb() {
			return this.vm_disk_size_mb;
		}

		public Short vm_disk_type;

		public Short getVm_disk_type() {
			return this.vm_disk_type;
		}

		public Short vm_disk_format;

		public Short getVm_disk_format() {
			return this.vm_disk_format;
		}

		public Short vm_disk_interface;

		public Short getVm_disk_interface() {
			return this.vm_disk_interface;
		}

		public Boolean is_shared;

		public Boolean getIs_shared() {
			return this.is_shared;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_disk_id = (Object) dis.readObject();

					this.vm_disk_name = readString(dis);

					this.vm_disk_description = readString(dis);

					this.image_id = (Object) dis.readObject();

					this.storage_domain_id = (Object) dis.readObject();

					this.vm_disk_size_mb = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_type = null;
					} else {
						this.vm_disk_type = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_format = null;
					} else {
						this.vm_disk_format = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_interface = null;
					} else {
						this.vm_disk_interface = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_shared = null;
					} else {
						this.is_shared = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_disk_id);

				// String

				writeString(this.vm_disk_name, dos);

				// String

				writeString(this.vm_disk_description, dos);

				// Object

				dos.writeObject(this.image_id);

				// Object

				dos.writeObject(this.storage_domain_id);

				// Integer

				writeInteger(this.vm_disk_size_mb, dos);

				// Short

				if (this.vm_disk_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_type);
				}

				// Short

				if (this.vm_disk_format == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_format);
				}

				// Short

				if (this.vm_disk_interface == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_interface);
				}

				// Boolean

				if (this.is_shared == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_shared);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_name=" + vm_disk_name);
			sb.append(",vm_disk_description=" + vm_disk_description);
			sb.append(",image_id=" + String.valueOf(image_id));
			sb.append(",storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",vm_disk_size_mb=" + String.valueOf(vm_disk_size_mb));
			sb.append(",vm_disk_type=" + String.valueOf(vm_disk_type));
			sb.append(",vm_disk_format=" + String.valueOf(vm_disk_format));
			sb.append(",vm_disk_interface=" + String.valueOf(vm_disk_interface));
			sb.append(",is_shared=" + String.valueOf(is_shared));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				vm_disk_configurationStruct vm_disk_configuration = new vm_disk_configurationStruct();

				/**
				 * [tJDBCOutput_7 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_7", false);
				start_Hash.put("tJDBCOutput_7", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_7";

				int tos_count_tJDBCOutput_7 = 0;

				int nb_line_tJDBCOutput_7 = 0;
				int nb_line_update_tJDBCOutput_7 = 0;
				int nb_line_inserted_tJDBCOutput_7 = 0;
				int nb_line_deleted_tJDBCOutput_7 = 0;
				int nb_line_rejected_tJDBCOutput_7 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_7 = 0;

				int deletedCount_tJDBCOutput_7 = 0;
				int updatedCount_tJDBCOutput_7 = 0;
				int insertedCount_tJDBCOutput_7 = 0;
				int rejectedCount_tJDBCOutput_7 = 0;

				boolean whetherReject_tJDBCOutput_7 = false;

				java.sql.Connection connection_tJDBCOutput_7 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_7 = 10000;
				int batchSizeCounter_tJDBCOutput_7 = 0;

				String insert_tJDBCOutput_7 = "INSERT INTO "
						+ "vm_disk_configuration"
						+ " (image_id,storage_domain_id,vm_disk_description,vm_disk_size_mb,vm_disk_type,vm_disk_format,vm_disk_interface,create_date,update_date,delete_date,vm_disk_id,vm_disk_name,is_shared) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_7 = connection_tJDBCOutput_7
						.prepareStatement(insert_tJDBCOutput_7);

				/**
				 * [tJDBCOutput_7 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				vm_disk_configurationStruct vm_disk_configuration_tmp = new vm_disk_configurationStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tJDBCInput_7 begin ] start
				 */

				ok_Hash.put("tJDBCInput_7", false);
				start_Hash.put("tJDBCInput_7", System.currentTimeMillis());

				currentComponent = "tJDBCInput_7";

				int tos_count_tJDBCInput_7 = 0;

				int nb_line_tJDBCInput_7 = 0;
				java.sql.Connection conn_tJDBCInput_7 = null;
				conn_tJDBCInput_7 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_7 = conn_tJDBCInput_7
						.createStatement();

				String dbquery_tJDBCInput_7 = "SELECT vm_disk_id,         vm_disk_name,         vm_disk_description,         image_id, 		storage_domain_id, 		vm_disk_size_mb, 		vm_disk_type, 		vm_disk_format, 		vm_disk_interface,         is_shared, 		create_date, 		update_date  FROM dwh_vm_disk_configuration_history_view";

				globalMap.put("tJDBCInput_7_QUERY", dbquery_tJDBCInput_7);
				java.sql.ResultSet rs_tJDBCInput_7 = null;
				try {
					rs_tJDBCInput_7 = stmt_tJDBCInput_7
							.executeQuery(dbquery_tJDBCInput_7);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_7 = rs_tJDBCInput_7
							.getMetaData();
					int colQtyInRs_tJDBCInput_7 = rsmd_tJDBCInput_7
							.getColumnCount();

					String tmpContent_tJDBCInput_7 = null;
					int column_index_tJDBCInput_7 = 1;

					while (rs_tJDBCInput_7.next()) {
						nb_line_tJDBCInput_7++;

						column_index_tJDBCInput_7 = 1;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.vm_disk_id = null;
						} else {

							if (rs_tJDBCInput_7
									.getObject(column_index_tJDBCInput_7) != null) {
								row6.vm_disk_id = rs_tJDBCInput_7
										.getObject(column_index_tJDBCInput_7);
							} else {
								row6.vm_disk_id = null;
							}

						}

						column_index_tJDBCInput_7 = 2;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.vm_disk_name = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row6.vm_disk_name = tmpContent_tJDBCInput_7;
							} else {
								row6.vm_disk_name = null;
							}

						}

						column_index_tJDBCInput_7 = 3;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.vm_disk_description = null;
						} else {

							tmpContent_tJDBCInput_7 = rs_tJDBCInput_7
									.getString(column_index_tJDBCInput_7);
							if (tmpContent_tJDBCInput_7 != null) {
								row6.vm_disk_description = tmpContent_tJDBCInput_7;
							} else {
								row6.vm_disk_description = null;
							}

						}

						column_index_tJDBCInput_7 = 4;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.image_id = null;
						} else {

							if (rs_tJDBCInput_7
									.getObject(column_index_tJDBCInput_7) != null) {
								row6.image_id = rs_tJDBCInput_7
										.getObject(column_index_tJDBCInput_7);
							} else {
								row6.image_id = null;
							}

						}

						column_index_tJDBCInput_7 = 5;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.storage_domain_id = null;
						} else {

							if (rs_tJDBCInput_7
									.getObject(column_index_tJDBCInput_7) != null) {
								row6.storage_domain_id = rs_tJDBCInput_7
										.getObject(column_index_tJDBCInput_7);
							} else {
								row6.storage_domain_id = null;
							}

						}

						column_index_tJDBCInput_7 = 6;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.vm_disk_size_mb = null;
						} else {

							if (rs_tJDBCInput_7
									.getObject(column_index_tJDBCInput_7) != null) {
								row6.vm_disk_size_mb = rs_tJDBCInput_7
										.getInt(column_index_tJDBCInput_7);
							} else {
								row6.vm_disk_size_mb = null;
							}

						}

						column_index_tJDBCInput_7 = 7;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.vm_disk_type = null;
						} else {

							if (rs_tJDBCInput_7
									.getObject(column_index_tJDBCInput_7) != null) {
								row6.vm_disk_type = rs_tJDBCInput_7
										.getShort(column_index_tJDBCInput_7);
							} else {
								row6.vm_disk_type = null;
							}

						}

						column_index_tJDBCInput_7 = 8;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.vm_disk_format = null;
						} else {

							if (rs_tJDBCInput_7
									.getObject(column_index_tJDBCInput_7) != null) {
								row6.vm_disk_format = rs_tJDBCInput_7
										.getShort(column_index_tJDBCInput_7);
							} else {
								row6.vm_disk_format = null;
							}

						}

						column_index_tJDBCInput_7 = 9;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.vm_disk_interface = null;
						} else {

							if (rs_tJDBCInput_7
									.getObject(column_index_tJDBCInput_7) != null) {
								row6.vm_disk_interface = rs_tJDBCInput_7
										.getShort(column_index_tJDBCInput_7);
							} else {
								row6.vm_disk_interface = null;
							}

						}

						column_index_tJDBCInput_7 = 10;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.is_shared = null;
						} else {

							if (rs_tJDBCInput_7
									.getObject(column_index_tJDBCInput_7) != null) {
								row6.is_shared = rs_tJDBCInput_7
										.getBoolean(column_index_tJDBCInput_7);
							} else {
								row6.is_shared = null;
							}

						}

						column_index_tJDBCInput_7 = 11;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_7 = null;
							try {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getTimestamp(column_index_tJDBCInput_7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getDate(column_index_tJDBCInput_7);
							}
							row6.create_date = date_tJDBCInput_7;

						}

						column_index_tJDBCInput_7 = 12;

						if (colQtyInRs_tJDBCInput_7 < column_index_tJDBCInput_7) {
							row6.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_7 = null;
							try {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getTimestamp(column_index_tJDBCInput_7);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_7 = rs_tJDBCInput_7
										.getDate(column_index_tJDBCInput_7);
							}
							row6.update_date = date_tJDBCInput_7;

						}

						/**
						 * [tJDBCInput_7 begin ] stop
						 */
						/**
						 * [tJDBCInput_7 main ] start
						 */

						currentComponent = "tJDBCInput_7";

						tos_count_tJDBCInput_7++;

						/**
						 * [tJDBCInput_7 main ] stop
						 */

						/**
						 * [tMap_7 main ] start
						 */

						currentComponent = "tMap_7";

						boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_7 = false;
						boolean mainRowRejected_tMap_7 = false;

						if (

						(

						row6.update_date == null ? TalendDate.compareDate(
								row6.create_date, context.runTime) <= 0
								: TalendDate.compareDate(row6.update_date,
										context.runTime) <= 0

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row6'
							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
								// ###############################
								// # Output tables

								vm_disk_configuration = null;

								// # Output table : 'vm_disk_configuration'
								vm_disk_configuration_tmp.image_id = row6.image_id;
								vm_disk_configuration_tmp.storage_domain_id = row6.storage_domain_id;
								vm_disk_configuration_tmp.vm_disk_description = StringHandling
										.TRIM(row6.vm_disk_description);
								vm_disk_configuration_tmp.vm_disk_size_mb = row6.vm_disk_size_mb;
								vm_disk_configuration_tmp.vm_disk_type = row6.vm_disk_type;
								vm_disk_configuration_tmp.vm_disk_format = row6.vm_disk_format;
								vm_disk_configuration_tmp.vm_disk_interface = row6.vm_disk_interface;
								vm_disk_configuration_tmp.create_date = row6.create_date;
								vm_disk_configuration_tmp.update_date = row6.update_date;
								vm_disk_configuration_tmp.delete_date = null;
								vm_disk_configuration_tmp.vm_disk_id = row6.vm_disk_id;
								vm_disk_configuration_tmp.vm_disk_name = row6.vm_disk_name;
								vm_disk_configuration_tmp.is_shared = row6.is_shared;
								vm_disk_configuration = vm_disk_configuration_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */
							// Start of branch "vm_disk_configuration"
							if (vm_disk_configuration != null) {

								/**
								 * [tJDBCOutput_7 main ] start
								 */

								currentComponent = "tJDBCOutput_7";

								whetherReject_tJDBCOutput_7 = false;
								if (vm_disk_configuration.image_id == null) {
									pstmt_tJDBCOutput_7.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_7.setObject(1,
											vm_disk_configuration.image_id);
								}

								if (vm_disk_configuration.storage_domain_id == null) {
									pstmt_tJDBCOutput_7.setNull(2,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_7
											.setObject(
													2,
													vm_disk_configuration.storage_domain_id);
								}

								if (vm_disk_configuration.vm_disk_description == null) {
									pstmt_tJDBCOutput_7.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_7
											.setString(
													3,
													vm_disk_configuration.vm_disk_description);
								}

								if (vm_disk_configuration.vm_disk_size_mb == null) {
									pstmt_tJDBCOutput_7.setNull(4,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_7
											.setInt(4,
													vm_disk_configuration.vm_disk_size_mb);
								}

								if (vm_disk_configuration.vm_disk_type == null) {
									pstmt_tJDBCOutput_7.setNull(5,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_7.setShort(5,
											vm_disk_configuration.vm_disk_type);
								}

								if (vm_disk_configuration.vm_disk_format == null) {
									pstmt_tJDBCOutput_7.setNull(6,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_7
											.setShort(
													6,
													vm_disk_configuration.vm_disk_format);
								}

								if (vm_disk_configuration.vm_disk_interface == null) {
									pstmt_tJDBCOutput_7.setNull(7,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_7
											.setShort(
													7,
													vm_disk_configuration.vm_disk_interface);
								}

								if (vm_disk_configuration.create_date != null) {
									pstmt_tJDBCOutput_7
											.setTimestamp(
													8,
													new java.sql.Timestamp(
															vm_disk_configuration.create_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_7.setNull(8,
											java.sql.Types.DATE);
								}

								if (vm_disk_configuration.update_date != null) {
									pstmt_tJDBCOutput_7
											.setTimestamp(
													9,
													new java.sql.Timestamp(
															vm_disk_configuration.update_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_7.setNull(9,
											java.sql.Types.DATE);
								}

								if (vm_disk_configuration.delete_date != null) {
									pstmt_tJDBCOutput_7
											.setTimestamp(
													10,
													new java.sql.Timestamp(
															vm_disk_configuration.delete_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_7.setNull(10,
											java.sql.Types.DATE);
								}

								if (vm_disk_configuration.vm_disk_id == null) {
									pstmt_tJDBCOutput_7.setNull(11,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_7.setObject(11,
											vm_disk_configuration.vm_disk_id);
								}

								if (vm_disk_configuration.vm_disk_name == null) {
									pstmt_tJDBCOutput_7.setNull(12,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_7.setString(12,
											vm_disk_configuration.vm_disk_name);
								}

								if (vm_disk_configuration.is_shared == null) {
									pstmt_tJDBCOutput_7.setNull(13,
											java.sql.Types.BOOLEAN);
								} else {
									pstmt_tJDBCOutput_7.setBoolean(13,
											vm_disk_configuration.is_shared);
								}

								try {
									insertedCount_tJDBCOutput_7 = insertedCount_tJDBCOutput_7
											+ pstmt_tJDBCOutput_7
													.executeUpdate();
									nb_line_tJDBCOutput_7++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_7 = true;
									throw (e);
								}

								tos_count_tJDBCOutput_7++;

								/**
								 * [tJDBCOutput_7 main ] stop
								 */

							} // End of branch "vm_disk_configuration"

						} // G_TM_M_280 close main tMap filter for table 'row6'

						/**
						 * [tJDBCInput_7 end ] start
						 */

						currentComponent = "tJDBCInput_7";

					}
				} finally {
					rs_tJDBCInput_7.close();
					stmt_tJDBCInput_7.close();

				}
				globalMap.put("tJDBCInput_7_NB_LINE", nb_line_tJDBCInput_7);

				ok_Hash.put("tJDBCInput_7", true);
				end_Hash.put("tJDBCInput_7", System.currentTimeMillis());

				/**
				 * [tJDBCInput_7 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tJDBCOutput_7 end ] start
				 */

				currentComponent = "tJDBCOutput_7";

				if (pstmt_tJDBCOutput_7 != null) {

					pstmt_tJDBCOutput_7.close();

				}

				nb_line_deleted_tJDBCOutput_7 = nb_line_deleted_tJDBCOutput_7
						+ deletedCount_tJDBCOutput_7;
				nb_line_update_tJDBCOutput_7 = nb_line_update_tJDBCOutput_7
						+ updatedCount_tJDBCOutput_7;
				nb_line_inserted_tJDBCOutput_7 = nb_line_inserted_tJDBCOutput_7
						+ insertedCount_tJDBCOutput_7;
				nb_line_rejected_tJDBCOutput_7 = nb_line_rejected_tJDBCOutput_7
						+ rejectedCount_tJDBCOutput_7;

				globalMap.put("tJDBCOutput_7_NB_LINE", nb_line_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_7);
				globalMap.put("tJDBCOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_7);

				ok_Hash.put("tJDBCOutput_7", true);
				end_Hash.put("tJDBCOutput_7", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_7:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_28Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_7 finally ] start
				 */

				currentComponent = "tJDBCInput_7";

				/**
				 * [tJDBCInput_7 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tJDBCOutput_7 finally ] start
				 */

				currentComponent = "tJDBCOutput_7";

				/**
				 * [tJDBCOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_7_SUBPROCESS_STATE", 1);
	}

	public static class delete_disksStruct implements
			routines.system.IPersistableRow<delete_disksStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object image_id;

		public Object getImage_id() {
			return this.image_id;
		}

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public String vm_disk_description;

		public String getVm_disk_description() {
			return this.vm_disk_description;
		}

		public Integer vm_disk_size_mb;

		public Integer getVm_disk_size_mb() {
			return this.vm_disk_size_mb;
		}

		public Short vm_disk_type;

		public Short getVm_disk_type() {
			return this.vm_disk_type;
		}

		public Short vm_disk_format;

		public Short getVm_disk_format() {
			return this.vm_disk_format;
		}

		public Short vm_disk_interface;

		public Short getVm_disk_interface() {
			return this.vm_disk_interface;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public String vm_disk_name;

		public String getVm_disk_name() {
			return this.vm_disk_name;
		}

		public Boolean is_shared;

		public Boolean getIs_shared() {
			return this.is_shared;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.image_id = (Object) dis.readObject();

					this.storage_domain_id = (Object) dis.readObject();

					this.vm_disk_description = readString(dis);

					this.vm_disk_size_mb = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_type = null;
					} else {
						this.vm_disk_type = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_format = null;
					} else {
						this.vm_disk_format = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_interface = null;
					} else {
						this.vm_disk_interface = dis.readShort();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

					this.vm_disk_id = (Object) dis.readObject();

					this.vm_disk_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_shared = null;
					} else {
						this.is_shared = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.image_id);

				// Object

				dos.writeObject(this.storage_domain_id);

				// String

				writeString(this.vm_disk_description, dos);

				// Integer

				writeInteger(this.vm_disk_size_mb, dos);

				// Short

				if (this.vm_disk_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_type);
				}

				// Short

				if (this.vm_disk_format == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_format);
				}

				// Short

				if (this.vm_disk_interface == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_interface);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

				// Object

				dos.writeObject(this.vm_disk_id);

				// String

				writeString(this.vm_disk_name, dos);

				// Boolean

				if (this.is_shared == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_shared);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("image_id=" + String.valueOf(image_id));
			sb.append(",storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",vm_disk_description=" + vm_disk_description);
			sb.append(",vm_disk_size_mb=" + String.valueOf(vm_disk_size_mb));
			sb.append(",vm_disk_type=" + String.valueOf(vm_disk_type));
			sb.append(",vm_disk_format=" + String.valueOf(vm_disk_format));
			sb.append(",vm_disk_interface=" + String.valueOf(vm_disk_interface));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append(",vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_name=" + vm_disk_name);
			sb.append(",is_shared=" + String.valueOf(is_shared));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_disksStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public String vm_disk_join_id;

		public String getVm_disk_join_id() {
			return this.vm_disk_join_id;
		}

		public String vm_disk_name;

		public String getVm_disk_name() {
			return this.vm_disk_name;
		}

		public String vm_disk_description;

		public String getVm_disk_description() {
			return this.vm_disk_description;
		}

		public Object image_id;

		public Object getImage_id() {
			return this.image_id;
		}

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public Integer vm_disk_size_mb;

		public Integer getVm_disk_size_mb() {
			return this.vm_disk_size_mb;
		}

		public Short vm_disk_type;

		public Short getVm_disk_type() {
			return this.vm_disk_type;
		}

		public Short vm_disk_format;

		public Short getVm_disk_format() {
			return this.vm_disk_format;
		}

		public Short vm_disk_interface;

		public Short getVm_disk_interface() {
			return this.vm_disk_interface;
		}

		public Boolean is_shared;

		public Boolean getIs_shared() {
			return this.is_shared;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.vm_disk_id = (Object) dis.readObject();

					this.vm_disk_join_id = readString(dis);

					this.vm_disk_name = readString(dis);

					this.vm_disk_description = readString(dis);

					this.image_id = (Object) dis.readObject();

					this.storage_domain_id = (Object) dis.readObject();

					this.vm_disk_size_mb = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_type = null;
					} else {
						this.vm_disk_type = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_format = null;
					} else {
						this.vm_disk_format = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_interface = null;
					} else {
						this.vm_disk_interface = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_shared = null;
					} else {
						this.is_shared = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.vm_disk_id);

				// String

				writeString(this.vm_disk_join_id, dos);

				// String

				writeString(this.vm_disk_name, dos);

				// String

				writeString(this.vm_disk_description, dos);

				// Object

				dos.writeObject(this.image_id);

				// Object

				dos.writeObject(this.storage_domain_id);

				// Integer

				writeInteger(this.vm_disk_size_mb, dos);

				// Short

				if (this.vm_disk_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_type);
				}

				// Short

				if (this.vm_disk_format == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_format);
				}

				// Short

				if (this.vm_disk_interface == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_interface);
				}

				// Boolean

				if (this.is_shared == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_shared);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_join_id=" + vm_disk_join_id);
			sb.append(",vm_disk_name=" + vm_disk_name);
			sb.append(",vm_disk_description=" + vm_disk_description);
			sb.append(",image_id=" + String.valueOf(image_id));
			sb.append(",storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",vm_disk_size_mb=" + String.valueOf(vm_disk_size_mb));
			sb.append(",vm_disk_type=" + String.valueOf(vm_disk_type));
			sb.append(",vm_disk_format=" + String.valueOf(vm_disk_format));
			sb.append(",vm_disk_interface=" + String.valueOf(vm_disk_interface));
			sb.append(",is_shared=" + String.valueOf(is_shared));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_28Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_28Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public String vm_disk_join_id;

		public String getVm_disk_join_id() {
			return this.vm_disk_join_id;
		}

		public String vm_disk_name;

		public String getVm_disk_name() {
			return this.vm_disk_name;
		}

		public String vm_disk_description;

		public String getVm_disk_description() {
			return this.vm_disk_description;
		}

		public Object image_id;

		public Object getImage_id() {
			return this.image_id;
		}

		public Object storage_domain_id;

		public Object getStorage_domain_id() {
			return this.storage_domain_id;
		}

		public Integer vm_disk_size_mb;

		public Integer getVm_disk_size_mb() {
			return this.vm_disk_size_mb;
		}

		public Short vm_disk_type;

		public Short getVm_disk_type() {
			return this.vm_disk_type;
		}

		public Short vm_disk_format;

		public Short getVm_disk_format() {
			return this.vm_disk_format;
		}

		public Short vm_disk_interface;

		public Short getVm_disk_interface() {
			return this.vm_disk_interface;
		}

		public Boolean is_shared;

		public Boolean getIs_shared() {
			return this.is_shared;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.vm_disk_id = (Object) dis.readObject();

					this.vm_disk_join_id = readString(dis);

					this.vm_disk_name = readString(dis);

					this.vm_disk_description = readString(dis);

					this.image_id = (Object) dis.readObject();

					this.storage_domain_id = (Object) dis.readObject();

					this.vm_disk_size_mb = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_type = null;
					} else {
						this.vm_disk_type = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_format = null;
					} else {
						this.vm_disk_format = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.vm_disk_interface = null;
					} else {
						this.vm_disk_interface = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_shared = null;
					} else {
						this.is_shared = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.vm_disk_id);

				// String

				writeString(this.vm_disk_join_id, dos);

				// String

				writeString(this.vm_disk_name, dos);

				// String

				writeString(this.vm_disk_description, dos);

				// Object

				dos.writeObject(this.image_id);

				// Object

				dos.writeObject(this.storage_domain_id);

				// Integer

				writeInteger(this.vm_disk_size_mb, dos);

				// Short

				if (this.vm_disk_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_type);
				}

				// Short

				if (this.vm_disk_format == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_format);
				}

				// Short

				if (this.vm_disk_interface == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_disk_interface);
				}

				// Boolean

				if (this.is_shared == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_shared);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_join_id=" + vm_disk_join_id);
			sb.append(",vm_disk_name=" + vm_disk_name);
			sb.append(",vm_disk_description=" + vm_disk_description);
			sb.append(",image_id=" + String.valueOf(image_id));
			sb.append(",storage_domain_id=" + String.valueOf(storage_domain_id));
			sb.append(",vm_disk_size_mb=" + String.valueOf(vm_disk_size_mb));
			sb.append(",vm_disk_type=" + String.valueOf(vm_disk_type));
			sb.append(",vm_disk_format=" + String.valueOf(vm_disk_format));
			sb.append(",vm_disk_interface=" + String.valueOf(vm_disk_interface));
			sb.append(",is_shared=" + String.valueOf(is_shared));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_28Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_28_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_27Process(globalMap);

				row27Struct row27 = new row27Struct();
				delete_disksStruct delete_disks = new delete_disksStruct();

				/**
				 * [tJDBCOutput_20 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_20", false);
				start_Hash.put("tJDBCOutput_20", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_20";

				int tos_count_tJDBCOutput_20 = 0;

				int nb_line_tJDBCOutput_20 = 0;
				int nb_line_update_tJDBCOutput_20 = 0;
				int nb_line_inserted_tJDBCOutput_20 = 0;
				int nb_line_deleted_tJDBCOutput_20 = 0;
				int nb_line_rejected_tJDBCOutput_20 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_20 = 0;

				int deletedCount_tJDBCOutput_20 = 0;
				int updatedCount_tJDBCOutput_20 = 0;
				int insertedCount_tJDBCOutput_20 = 0;
				int rejectedCount_tJDBCOutput_20 = 0;

				boolean whetherReject_tJDBCOutput_20 = false;

				java.sql.Connection connection_tJDBCOutput_20 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_20 = 10000;
				int batchSizeCounter_tJDBCOutput_20 = 0;

				String insert_tJDBCOutput_20 = "INSERT INTO "
						+ "vm_disk_configuration"
						+ " (image_id,storage_domain_id,vm_disk_description,vm_disk_size_mb,vm_disk_type,vm_disk_format,vm_disk_interface,create_date,update_date,delete_date,vm_disk_id,vm_disk_name,is_shared) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_20 = connection_tJDBCOutput_20
						.prepareStatement(insert_tJDBCOutput_20);

				/**
				 * [tJDBCOutput_20 begin ] stop
				 */

				/**
				 * [tMap_20 begin ] start
				 */

				ok_Hash.put("tMap_20", false);
				start_Hash.put("tMap_20", System.currentTimeMillis());

				currentComponent = "tMap_20";

				int tos_count_tMap_20 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) globalMap
						.get("tHash_Lookup_row26"));

				row26Struct row26HashKey = new row26Struct();
				row26Struct row26Default = new row26Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_20__Struct {
				}
				Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_disksStruct delete_disks_tmp = new delete_disksStruct();
				// ###############################

				/**
				 * [tMap_20 begin ] stop
				 */

				/**
				 * [tJDBCInput_28 begin ] start
				 */

				ok_Hash.put("tJDBCInput_28", false);
				start_Hash.put("tJDBCInput_28", System.currentTimeMillis());

				currentComponent = "tJDBCInput_28";

				int tos_count_tJDBCInput_28 = 0;

				int nb_line_tJDBCInput_28 = 0;
				java.sql.Connection conn_tJDBCInput_28 = null;
				conn_tJDBCInput_28 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_28 = conn_tJDBCInput_28
						.createStatement();

				String dbquery_tJDBCInput_28 = "SELECT	history_id,   		vm_disk_id,   		upper(cast(vm_disk_id as char(36))) as vm_disk_join_id,         vm_disk_name,         vm_disk_description,         image_id,  		storage_domain_id,  		vm_disk_size_mb,  		vm_disk_type,   		vm_disk_format,    		vm_disk_interface,         is_shared,  		create_date,   		update_date  FROM v3_5_latest_configuration_vms_disks";

				globalMap.put("tJDBCInput_28_QUERY", dbquery_tJDBCInput_28);
				java.sql.ResultSet rs_tJDBCInput_28 = null;
				try {
					rs_tJDBCInput_28 = stmt_tJDBCInput_28
							.executeQuery(dbquery_tJDBCInput_28);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_28 = rs_tJDBCInput_28
							.getMetaData();
					int colQtyInRs_tJDBCInput_28 = rsmd_tJDBCInput_28
							.getColumnCount();

					String tmpContent_tJDBCInput_28 = null;
					int column_index_tJDBCInput_28 = 1;

					while (rs_tJDBCInput_28.next()) {
						nb_line_tJDBCInput_28++;

						column_index_tJDBCInput_28 = 1;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.history_id = null;
						} else {

							if (rs_tJDBCInput_28
									.getObject(column_index_tJDBCInput_28) != null) {
								row27.history_id = rs_tJDBCInput_28
										.getInt(column_index_tJDBCInput_28);
							} else {
								row27.history_id = null;
							}

						}

						column_index_tJDBCInput_28 = 2;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.vm_disk_id = null;
						} else {

							if (rs_tJDBCInput_28
									.getObject(column_index_tJDBCInput_28) != null) {
								row27.vm_disk_id = rs_tJDBCInput_28
										.getObject(column_index_tJDBCInput_28);
							} else {
								row27.vm_disk_id = null;
							}

						}

						column_index_tJDBCInput_28 = 3;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.vm_disk_join_id = null;
						} else {

							tmpContent_tJDBCInput_28 = rs_tJDBCInput_28
									.getString(column_index_tJDBCInput_28);
							if (tmpContent_tJDBCInput_28 != null) {
								row27.vm_disk_join_id = tmpContent_tJDBCInput_28;
							} else {
								row27.vm_disk_join_id = null;
							}

						}

						column_index_tJDBCInput_28 = 4;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.vm_disk_name = null;
						} else {

							tmpContent_tJDBCInput_28 = rs_tJDBCInput_28
									.getString(column_index_tJDBCInput_28);
							if (tmpContent_tJDBCInput_28 != null) {
								row27.vm_disk_name = tmpContent_tJDBCInput_28;
							} else {
								row27.vm_disk_name = null;
							}

						}

						column_index_tJDBCInput_28 = 5;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.vm_disk_description = null;
						} else {

							tmpContent_tJDBCInput_28 = rs_tJDBCInput_28
									.getString(column_index_tJDBCInput_28);
							if (tmpContent_tJDBCInput_28 != null) {
								row27.vm_disk_description = tmpContent_tJDBCInput_28;
							} else {
								row27.vm_disk_description = null;
							}

						}

						column_index_tJDBCInput_28 = 6;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.image_id = null;
						} else {

							if (rs_tJDBCInput_28
									.getObject(column_index_tJDBCInput_28) != null) {
								row27.image_id = rs_tJDBCInput_28
										.getObject(column_index_tJDBCInput_28);
							} else {
								row27.image_id = null;
							}

						}

						column_index_tJDBCInput_28 = 7;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.storage_domain_id = null;
						} else {

							if (rs_tJDBCInput_28
									.getObject(column_index_tJDBCInput_28) != null) {
								row27.storage_domain_id = rs_tJDBCInput_28
										.getObject(column_index_tJDBCInput_28);
							} else {
								row27.storage_domain_id = null;
							}

						}

						column_index_tJDBCInput_28 = 8;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.vm_disk_size_mb = null;
						} else {

							if (rs_tJDBCInput_28
									.getObject(column_index_tJDBCInput_28) != null) {
								row27.vm_disk_size_mb = rs_tJDBCInput_28
										.getInt(column_index_tJDBCInput_28);
							} else {
								row27.vm_disk_size_mb = null;
							}

						}

						column_index_tJDBCInput_28 = 9;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.vm_disk_type = null;
						} else {

							if (rs_tJDBCInput_28
									.getObject(column_index_tJDBCInput_28) != null) {
								row27.vm_disk_type = rs_tJDBCInput_28
										.getShort(column_index_tJDBCInput_28);
							} else {
								row27.vm_disk_type = null;
							}

						}

						column_index_tJDBCInput_28 = 10;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.vm_disk_format = null;
						} else {

							if (rs_tJDBCInput_28
									.getObject(column_index_tJDBCInput_28) != null) {
								row27.vm_disk_format = rs_tJDBCInput_28
										.getShort(column_index_tJDBCInput_28);
							} else {
								row27.vm_disk_format = null;
							}

						}

						column_index_tJDBCInput_28 = 11;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.vm_disk_interface = null;
						} else {

							if (rs_tJDBCInput_28
									.getObject(column_index_tJDBCInput_28) != null) {
								row27.vm_disk_interface = rs_tJDBCInput_28
										.getShort(column_index_tJDBCInput_28);
							} else {
								row27.vm_disk_interface = null;
							}

						}

						column_index_tJDBCInput_28 = 12;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.is_shared = null;
						} else {

							if (rs_tJDBCInput_28
									.getObject(column_index_tJDBCInput_28) != null) {
								row27.is_shared = rs_tJDBCInput_28
										.getBoolean(column_index_tJDBCInput_28);
							} else {
								row27.is_shared = null;
							}

						}

						column_index_tJDBCInput_28 = 13;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_28 = null;
							try {
								date_tJDBCInput_28 = rs_tJDBCInput_28
										.getTimestamp(column_index_tJDBCInput_28);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_28 = rs_tJDBCInput_28
										.getDate(column_index_tJDBCInput_28);
							}
							row27.create_date = date_tJDBCInput_28;

						}

						column_index_tJDBCInput_28 = 14;

						if (colQtyInRs_tJDBCInput_28 < column_index_tJDBCInput_28) {
							row27.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_28 = null;
							try {
								date_tJDBCInput_28 = rs_tJDBCInput_28
										.getTimestamp(column_index_tJDBCInput_28);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_28 = rs_tJDBCInput_28
										.getDate(column_index_tJDBCInput_28);
							}
							row27.update_date = date_tJDBCInput_28;

						}

						/**
						 * [tJDBCInput_28 begin ] stop
						 */
						/**
						 * [tJDBCInput_28 main ] start
						 */

						currentComponent = "tJDBCInput_28";

						tos_count_tJDBCInput_28++;

						/**
						 * [tJDBCInput_28 main ] stop
						 */

						/**
						 * [tMap_20 main ] start
						 */

						currentComponent = "tMap_20";

						boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_20 = false;
						boolean mainRowRejected_tMap_20 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row26"
						// /////////////////////////////////////////////

						boolean forceLooprow26 = false;

						row26Struct row26ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_20) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_20 = false;

							row26HashKey.vm_disk_join_id = row27.vm_disk_join_id;

							row26HashKey.hashCodeDirty = true;

							tHash_Lookup_row26.lookup(row26HashKey);

							if (!tHash_Lookup_row26.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_20 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row26 != null
								&& tHash_Lookup_row26.getCount(row26HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row26' and it contains more one result from keys :  row26.vm_disk_join_id = '"
							// + row26HashKey.vm_disk_join_id + "'");
						} // G 071

						row26Struct row26 = null;

						row26Struct fromLookup_row26 = null;
						row26 = row26Default;

						if (tHash_Lookup_row26 != null
								&& tHash_Lookup_row26.hasNext()) { // G 099

							fromLookup_row26 = tHash_Lookup_row26.next();

						} // G 099

						if (fromLookup_row26 != null) {
							row26 = fromLookup_row26;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
							// ###############################
							// # Output tables

							delete_disks = null;

							if (!rejectedInnerJoin_tMap_20) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'delete_disks'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_20) {
								delete_disks_tmp.image_id = row27.image_id;
								delete_disks_tmp.storage_domain_id = row27.storage_domain_id;
								delete_disks_tmp.vm_disk_description = row27.vm_disk_description;
								delete_disks_tmp.vm_disk_size_mb = row27.vm_disk_size_mb;
								delete_disks_tmp.vm_disk_type = row27.vm_disk_type;
								delete_disks_tmp.vm_disk_format = row27.vm_disk_format;
								delete_disks_tmp.vm_disk_interface = row27.vm_disk_interface;
								delete_disks_tmp.create_date = row27.create_date;
								delete_disks_tmp.update_date = context.runTime;
								delete_disks_tmp.delete_date = context.runTime;
								delete_disks_tmp.vm_disk_id = row27.vm_disk_id;
								delete_disks_tmp.vm_disk_name = row27.vm_disk_name;
								delete_disks_tmp.is_shared = row27.is_shared;
								delete_disks = delete_disks_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_20 = false;

						tos_count_tMap_20++;

						/**
						 * [tMap_20 main ] stop
						 */
						// Start of branch "delete_disks"
						if (delete_disks != null) {

							/**
							 * [tJDBCOutput_20 main ] start
							 */

							currentComponent = "tJDBCOutput_20";

							whetherReject_tJDBCOutput_20 = false;
							if (delete_disks.image_id == null) {
								pstmt_tJDBCOutput_20.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_20.setObject(1,
										delete_disks.image_id);
							}

							if (delete_disks.storage_domain_id == null) {
								pstmt_tJDBCOutput_20.setNull(2,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_20.setObject(2,
										delete_disks.storage_domain_id);
							}

							if (delete_disks.vm_disk_description == null) {
								pstmt_tJDBCOutput_20.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_20.setString(3,
										delete_disks.vm_disk_description);
							}

							if (delete_disks.vm_disk_size_mb == null) {
								pstmt_tJDBCOutput_20.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_20.setInt(4,
										delete_disks.vm_disk_size_mb);
							}

							if (delete_disks.vm_disk_type == null) {
								pstmt_tJDBCOutput_20.setNull(5,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_20.setShort(5,
										delete_disks.vm_disk_type);
							}

							if (delete_disks.vm_disk_format == null) {
								pstmt_tJDBCOutput_20.setNull(6,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_20.setShort(6,
										delete_disks.vm_disk_format);
							}

							if (delete_disks.vm_disk_interface == null) {
								pstmt_tJDBCOutput_20.setNull(7,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_20.setShort(7,
										delete_disks.vm_disk_interface);
							}

							if (delete_disks.create_date != null) {
								pstmt_tJDBCOutput_20.setTimestamp(
										8,
										new java.sql.Timestamp(
												delete_disks.create_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_20.setNull(8,
										java.sql.Types.DATE);
							}

							if (delete_disks.update_date != null) {
								pstmt_tJDBCOutput_20.setTimestamp(
										9,
										new java.sql.Timestamp(
												delete_disks.update_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_20.setNull(9,
										java.sql.Types.DATE);
							}

							if (delete_disks.delete_date != null) {
								pstmt_tJDBCOutput_20.setTimestamp(
										10,
										new java.sql.Timestamp(
												delete_disks.delete_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_20.setNull(10,
										java.sql.Types.DATE);
							}

							if (delete_disks.vm_disk_id == null) {
								pstmt_tJDBCOutput_20.setNull(11,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_20.setObject(11,
										delete_disks.vm_disk_id);
							}

							if (delete_disks.vm_disk_name == null) {
								pstmt_tJDBCOutput_20.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_20.setString(12,
										delete_disks.vm_disk_name);
							}

							if (delete_disks.is_shared == null) {
								pstmt_tJDBCOutput_20.setNull(13,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tJDBCOutput_20.setBoolean(13,
										delete_disks.is_shared);
							}

							try {
								insertedCount_tJDBCOutput_20 = insertedCount_tJDBCOutput_20
										+ pstmt_tJDBCOutput_20.executeUpdate();
								nb_line_tJDBCOutput_20++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_20 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_20++;

							/**
							 * [tJDBCOutput_20 main ] stop
							 */

						} // End of branch "delete_disks"

						/**
						 * [tJDBCInput_28 end ] start
						 */

						currentComponent = "tJDBCInput_28";

					}
				} finally {
					rs_tJDBCInput_28.close();
					stmt_tJDBCInput_28.close();

				}
				globalMap.put("tJDBCInput_28_NB_LINE", nb_line_tJDBCInput_28);

				ok_Hash.put("tJDBCInput_28", true);
				end_Hash.put("tJDBCInput_28", System.currentTimeMillis());

				/**
				 * [tJDBCInput_28 end ] stop
				 */

				/**
				 * [tMap_20 end ] start
				 */

				currentComponent = "tMap_20";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row26 != null) {
					tHash_Lookup_row26.endGet();
				}
				globalMap.remove("tHash_Lookup_row26");

				// ###############################

				ok_Hash.put("tMap_20", true);
				end_Hash.put("tMap_20", System.currentTimeMillis());

				/**
				 * [tMap_20 end ] stop
				 */

				/**
				 * [tJDBCOutput_20 end ] start
				 */

				currentComponent = "tJDBCOutput_20";

				if (pstmt_tJDBCOutput_20 != null) {

					pstmt_tJDBCOutput_20.close();

				}

				nb_line_deleted_tJDBCOutput_20 = nb_line_deleted_tJDBCOutput_20
						+ deletedCount_tJDBCOutput_20;
				nb_line_update_tJDBCOutput_20 = nb_line_update_tJDBCOutput_20
						+ updatedCount_tJDBCOutput_20;
				nb_line_inserted_tJDBCOutput_20 = nb_line_inserted_tJDBCOutput_20
						+ insertedCount_tJDBCOutput_20;
				nb_line_rejected_tJDBCOutput_20 = nb_line_rejected_tJDBCOutput_20
						+ rejectedCount_tJDBCOutput_20;

				globalMap.put("tJDBCOutput_20_NB_LINE", nb_line_tJDBCOutput_20);
				globalMap.put("tJDBCOutput_20_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_20);
				globalMap.put("tJDBCOutput_20_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_20);
				globalMap.put("tJDBCOutput_20_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_20);
				globalMap.put("tJDBCOutput_20_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_20);

				ok_Hash.put("tJDBCOutput_20", true);
				end_Hash.put("tJDBCOutput_20", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_20 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_28:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_61Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_20"
			globalMap.remove("tHash_Lookup_row26");

			try {

				/**
				 * [tJDBCInput_28 finally ] start
				 */

				currentComponent = "tJDBCInput_28";

				/**
				 * [tJDBCInput_28 finally ] stop
				 */

				/**
				 * [tMap_20 finally ] start
				 */

				currentComponent = "tMap_20";

				/**
				 * [tMap_20 finally ] stop
				 */

				/**
				 * [tJDBCOutput_20 finally ] start
				 */

				currentComponent = "tJDBCOutput_20";

				/**
				 * [tJDBCOutput_20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_28_SUBPROCESS_STATE", 1);
	}

	public static class insert_new_vm_disk_connectionStruct
			implements
			routines.system.IPersistableRow<insert_new_vm_disk_connectionStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		public java.util.Date detach_date;

		public java.util.Date getDetach_date() {
			return this.detach_date;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_disk_id = (Object) dis.readObject();

					this.vm_id = (Object) dis.readObject();

					this.attach_date = readDate(dis);

					this.detach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_disk_id);

				// Object

				dos.writeObject(this.vm_id);

				// java.util.Date

				writeDate(this.attach_date, dos);

				// java.util.Date

				writeDate(this.detach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append(",detach_date=" + String.valueOf(detach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_new_vm_disk_connectionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row49Struct implements
			routines.system.IPersistableRow<row49Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public String vm_disk_join_id;

		public String getVm_disk_join_id() {
			return this.vm_disk_join_id;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_disk_id = (Object) dis.readObject();

					this.vm_disk_join_id = readString(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_disk_id);

				// String

				writeString(this.vm_disk_join_id, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_join_id=" + vm_disk_join_id);
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row49Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_61Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_61Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public String vm_disk_join_id;

		public String getVm_disk_join_id() {
			return this.vm_disk_join_id;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_disk_id = (Object) dis.readObject();

					this.vm_disk_join_id = readString(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_disk_id);

				// String

				writeString(this.vm_disk_join_id, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_join_id=" + vm_disk_join_id);
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_61Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_61Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_61_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_63Process(globalMap);

				row49Struct row49 = new row49Struct();
				insert_new_vm_disk_connectionStruct insert_new_vm_disk_connection = new insert_new_vm_disk_connectionStruct();

				/**
				 * [tJDBCOutput_35 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_35", false);
				start_Hash.put("tJDBCOutput_35", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_35";

				int tos_count_tJDBCOutput_35 = 0;

				int nb_line_tJDBCOutput_35 = 0;
				int nb_line_update_tJDBCOutput_35 = 0;
				int nb_line_inserted_tJDBCOutput_35 = 0;
				int nb_line_deleted_tJDBCOutput_35 = 0;
				int nb_line_rejected_tJDBCOutput_35 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_35 = 0;

				int deletedCount_tJDBCOutput_35 = 0;
				int updatedCount_tJDBCOutput_35 = 0;
				int insertedCount_tJDBCOutput_35 = 0;
				int rejectedCount_tJDBCOutput_35 = 0;

				boolean whetherReject_tJDBCOutput_35 = false;

				java.sql.Connection connection_tJDBCOutput_35 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_35 = 10000;
				int batchSizeCounter_tJDBCOutput_35 = 0;

				String insert_tJDBCOutput_35 = "INSERT INTO "
						+ "disks_vm_map"
						+ " (vm_disk_id,vm_id,attach_date,detach_date) VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_35 = connection_tJDBCOutput_35
						.prepareStatement(insert_tJDBCOutput_35);

				/**
				 * [tJDBCOutput_35 begin ] stop
				 */

				/**
				 * [tMap_33 begin ] start
				 */

				ok_Hash.put("tMap_33", false);
				start_Hash.put("tMap_33", System.currentTimeMillis());

				currentComponent = "tMap_33";

				int tos_count_tMap_33 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct> tHash_Lookup_row51 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct>) globalMap
						.get("tHash_Lookup_row51"));

				row51Struct row51HashKey = new row51Struct();
				row51Struct row51Default = new row51Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_33__Struct {
				}
				Var__tMap_33__Struct Var__tMap_33 = new Var__tMap_33__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				insert_new_vm_disk_connectionStruct insert_new_vm_disk_connection_tmp = new insert_new_vm_disk_connectionStruct();
				// ###############################

				/**
				 * [tMap_33 begin ] stop
				 */

				/**
				 * [tJDBCInput_61 begin ] start
				 */

				ok_Hash.put("tJDBCInput_61", false);
				start_Hash.put("tJDBCInput_61", System.currentTimeMillis());

				currentComponent = "tJDBCInput_61";

				int tos_count_tJDBCInput_61 = 0;

				int nb_line_tJDBCInput_61 = 0;
				java.sql.Connection conn_tJDBCInput_61 = null;
				conn_tJDBCInput_61 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_61 = conn_tJDBCInput_61
						.createStatement();

				String dbquery_tJDBCInput_61 = "SELECT    vm_disk_id,    upper(cast(vm_disk_id as char(36))) as vm_disk_join_id,    vm_id,    upper(cast(vm_id as char(36))) as vm_join_id FROM dwh_disk_vm_map_history_view";

				globalMap.put("tJDBCInput_61_QUERY", dbquery_tJDBCInput_61);
				java.sql.ResultSet rs_tJDBCInput_61 = null;
				try {
					rs_tJDBCInput_61 = stmt_tJDBCInput_61
							.executeQuery(dbquery_tJDBCInput_61);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_61 = rs_tJDBCInput_61
							.getMetaData();
					int colQtyInRs_tJDBCInput_61 = rsmd_tJDBCInput_61
							.getColumnCount();

					String tmpContent_tJDBCInput_61 = null;
					int column_index_tJDBCInput_61 = 1;

					while (rs_tJDBCInput_61.next()) {
						nb_line_tJDBCInput_61++;

						column_index_tJDBCInput_61 = 1;

						if (colQtyInRs_tJDBCInput_61 < column_index_tJDBCInput_61) {
							row49.vm_disk_id = null;
						} else {

							if (rs_tJDBCInput_61
									.getObject(column_index_tJDBCInput_61) != null) {
								row49.vm_disk_id = rs_tJDBCInput_61
										.getObject(column_index_tJDBCInput_61);
							} else {
								row49.vm_disk_id = null;
							}

						}

						column_index_tJDBCInput_61 = 2;

						if (colQtyInRs_tJDBCInput_61 < column_index_tJDBCInput_61) {
							row49.vm_disk_join_id = null;
						} else {

							tmpContent_tJDBCInput_61 = rs_tJDBCInput_61
									.getString(column_index_tJDBCInput_61);
							if (tmpContent_tJDBCInput_61 != null) {
								row49.vm_disk_join_id = tmpContent_tJDBCInput_61;
							} else {
								row49.vm_disk_join_id = null;
							}

						}

						column_index_tJDBCInput_61 = 3;

						if (colQtyInRs_tJDBCInput_61 < column_index_tJDBCInput_61) {
							row49.vm_id = null;
						} else {

							if (rs_tJDBCInput_61
									.getObject(column_index_tJDBCInput_61) != null) {
								row49.vm_id = rs_tJDBCInput_61
										.getObject(column_index_tJDBCInput_61);
							} else {
								row49.vm_id = null;
							}

						}

						column_index_tJDBCInput_61 = 4;

						if (colQtyInRs_tJDBCInput_61 < column_index_tJDBCInput_61) {
							row49.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_61 = rs_tJDBCInput_61
									.getString(column_index_tJDBCInput_61);
							if (tmpContent_tJDBCInput_61 != null) {
								row49.vm_join_id = tmpContent_tJDBCInput_61;
							} else {
								row49.vm_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_61 begin ] stop
						 */
						/**
						 * [tJDBCInput_61 main ] start
						 */

						currentComponent = "tJDBCInput_61";

						tos_count_tJDBCInput_61++;

						/**
						 * [tJDBCInput_61 main ] stop
						 */

						/**
						 * [tMap_33 main ] start
						 */

						currentComponent = "tMap_33";

						boolean hasCasePrimitiveKeyWithNull_tMap_33 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_33 = false;
						boolean mainRowRejected_tMap_33 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row51"
						// /////////////////////////////////////////////

						boolean forceLooprow51 = false;

						row51Struct row51ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_33) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_33 = false;

							row51HashKey.vm_disk_join_id = row49.vm_disk_join_id;

							row51HashKey.vm_join_id = row49.vm_join_id;

							row51HashKey.hashCodeDirty = true;

							tHash_Lookup_row51.lookup(row51HashKey);

							if (!tHash_Lookup_row51.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_33 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row51 != null
								&& tHash_Lookup_row51.getCount(row51HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row51' and it contains more one result from keys :  row51.vm_disk_join_id = '"
							// + row51HashKey.vm_disk_join_id +
							// "', row51.vm_join_id = '" +
							// row51HashKey.vm_join_id + "'");
						} // G 071

						row51Struct row51 = null;

						row51Struct fromLookup_row51 = null;
						row51 = row51Default;

						if (tHash_Lookup_row51 != null
								&& tHash_Lookup_row51.hasNext()) { // G 099

							fromLookup_row51 = tHash_Lookup_row51.next();

						} // G 099

						if (fromLookup_row51 != null) {
							row51 = fromLookup_row51;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_33__Struct Var = Var__tMap_33;// ###############################
							// ###############################
							// # Output tables

							insert_new_vm_disk_connection = null;

							if (!rejectedInnerJoin_tMap_33) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table :
							// 'insert_new_vm_disk_connection'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_33) {
								insert_new_vm_disk_connection_tmp.vm_disk_id = row49.vm_disk_id;
								insert_new_vm_disk_connection_tmp.vm_id = row49.vm_id;
								insert_new_vm_disk_connection_tmp.attach_date = context.runTime;
								insert_new_vm_disk_connection_tmp.detach_date = null;
								insert_new_vm_disk_connection = insert_new_vm_disk_connection_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_33 = false;

						tos_count_tMap_33++;

						/**
						 * [tMap_33 main ] stop
						 */
						// Start of branch "insert_new_vm_disk_connection"
						if (insert_new_vm_disk_connection != null) {

							/**
							 * [tJDBCOutput_35 main ] start
							 */

							currentComponent = "tJDBCOutput_35";

							whetherReject_tJDBCOutput_35 = false;
							if (insert_new_vm_disk_connection.vm_disk_id == null) {
								pstmt_tJDBCOutput_35.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_35
										.setObject(
												1,
												insert_new_vm_disk_connection.vm_disk_id);
							}

							if (insert_new_vm_disk_connection.vm_id == null) {
								pstmt_tJDBCOutput_35.setNull(2,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_35.setObject(2,
										insert_new_vm_disk_connection.vm_id);
							}

							if (insert_new_vm_disk_connection.attach_date != null) {
								pstmt_tJDBCOutput_35
										.setTimestamp(
												3,
												new java.sql.Timestamp(
														insert_new_vm_disk_connection.attach_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_35.setNull(3,
										java.sql.Types.DATE);
							}

							if (insert_new_vm_disk_connection.detach_date != null) {
								pstmt_tJDBCOutput_35
										.setTimestamp(
												4,
												new java.sql.Timestamp(
														insert_new_vm_disk_connection.detach_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_35.setNull(4,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tJDBCOutput_35 = insertedCount_tJDBCOutput_35
										+ pstmt_tJDBCOutput_35.executeUpdate();
								nb_line_tJDBCOutput_35++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_35 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_35++;

							/**
							 * [tJDBCOutput_35 main ] stop
							 */

						} // End of branch "insert_new_vm_disk_connection"

						/**
						 * [tJDBCInput_61 end ] start
						 */

						currentComponent = "tJDBCInput_61";

					}
				} finally {
					rs_tJDBCInput_61.close();
					stmt_tJDBCInput_61.close();

				}
				globalMap.put("tJDBCInput_61_NB_LINE", nb_line_tJDBCInput_61);

				ok_Hash.put("tJDBCInput_61", true);
				end_Hash.put("tJDBCInput_61", System.currentTimeMillis());

				/**
				 * [tJDBCInput_61 end ] stop
				 */

				/**
				 * [tMap_33 end ] start
				 */

				currentComponent = "tMap_33";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row51 != null) {
					tHash_Lookup_row51.endGet();
				}
				globalMap.remove("tHash_Lookup_row51");

				// ###############################

				ok_Hash.put("tMap_33", true);
				end_Hash.put("tMap_33", System.currentTimeMillis());

				/**
				 * [tMap_33 end ] stop
				 */

				/**
				 * [tJDBCOutput_35 end ] start
				 */

				currentComponent = "tJDBCOutput_35";

				if (pstmt_tJDBCOutput_35 != null) {

					pstmt_tJDBCOutput_35.close();

				}

				nb_line_deleted_tJDBCOutput_35 = nb_line_deleted_tJDBCOutput_35
						+ deletedCount_tJDBCOutput_35;
				nb_line_update_tJDBCOutput_35 = nb_line_update_tJDBCOutput_35
						+ updatedCount_tJDBCOutput_35;
				nb_line_inserted_tJDBCOutput_35 = nb_line_inserted_tJDBCOutput_35
						+ insertedCount_tJDBCOutput_35;
				nb_line_rejected_tJDBCOutput_35 = nb_line_rejected_tJDBCOutput_35
						+ rejectedCount_tJDBCOutput_35;

				globalMap.put("tJDBCOutput_35_NB_LINE", nb_line_tJDBCOutput_35);
				globalMap.put("tJDBCOutput_35_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_35);
				globalMap.put("tJDBCOutput_35_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_35);
				globalMap.put("tJDBCOutput_35_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_35);
				globalMap.put("tJDBCOutput_35_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_35);

				ok_Hash.put("tJDBCOutput_35", true);
				end_Hash.put("tJDBCOutput_35", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_35 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_61:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_62Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_33"
			globalMap.remove("tHash_Lookup_row51");

			try {

				/**
				 * [tJDBCInput_61 finally ] start
				 */

				currentComponent = "tJDBCInput_61";

				/**
				 * [tJDBCInput_61 finally ] stop
				 */

				/**
				 * [tMap_33 finally ] start
				 */

				currentComponent = "tMap_33";

				/**
				 * [tMap_33 finally ] stop
				 */

				/**
				 * [tJDBCOutput_35 finally ] start
				 */

				currentComponent = "tJDBCOutput_35";

				/**
				 * [tJDBCOutput_35 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_61_SUBPROCESS_STATE", 1);
	}

	public static class delete_vm_disk_connectionStruct implements
			routines.system.IPersistableRow<delete_vm_disk_connectionStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		public java.util.Date detach_date;

		public java.util.Date getDetach_date() {
			return this.detach_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.vm_disk_id == null) ? 0 : this.vm_disk_id
								.hashCode());

				result = prime * result
						+ ((this.vm_id == null) ? 0 : this.vm_id.hashCode());

				result = prime
						* result
						+ ((this.attach_date == null) ? 0 : this.attach_date
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final delete_vm_disk_connectionStruct other = (delete_vm_disk_connectionStruct) obj;

			if (this.vm_disk_id == null) {
				if (other.vm_disk_id != null)
					return false;

			} else if (!this.vm_disk_id.equals(other.vm_disk_id))

				return false;

			if (this.vm_id == null) {
				if (other.vm_id != null)
					return false;

			} else if (!this.vm_id.equals(other.vm_id))

				return false;

			if (this.attach_date == null) {
				if (other.attach_date != null)
					return false;

			} else if (!this.attach_date.equals(other.attach_date))

				return false;

			return true;
		}

		public void copyDataTo(delete_vm_disk_connectionStruct other) {

			other.vm_disk_id = this.vm_disk_id;
			other.vm_id = this.vm_id;
			other.attach_date = this.attach_date;
			other.detach_date = this.detach_date;

		}

		public void copyKeysDataTo(delete_vm_disk_connectionStruct other) {

			other.vm_disk_id = this.vm_disk_id;
			other.vm_id = this.vm_id;
			other.attach_date = this.attach_date;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_disk_id = (Object) dis.readObject();

					this.vm_id = (Object) dis.readObject();

					this.attach_date = readDate(dis);

					this.detach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_disk_id);

				// Object

				dos.writeObject(this.vm_id);

				// java.util.Date

				writeDate(this.attach_date, dos);

				// java.util.Date

				writeDate(this.detach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append(",detach_date=" + String.valueOf(detach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_vm_disk_connectionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.vm_disk_id,
					other.vm_disk_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.vm_id, other.vm_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.attach_date,
					other.attach_date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row50Struct implements
			routines.system.IPersistableRow<row50Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public String vm_disk_join_id;

		public String getVm_disk_join_id() {
			return this.vm_disk_join_id;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.vm_disk_id = (Object) dis.readObject();

					this.vm_disk_join_id = readString(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

					this.attach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.vm_disk_id);

				// String

				writeString(this.vm_disk_join_id, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

				// java.util.Date

				writeDate(this.attach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_join_id=" + vm_disk_join_id);
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row50Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_62Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_62Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object vm_disk_id;

		public Object getVm_disk_id() {
			return this.vm_disk_id;
		}

		public String vm_disk_join_id;

		public String getVm_disk_join_id() {
			return this.vm_disk_join_id;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.vm_disk_id = (Object) dis.readObject();

					this.vm_disk_join_id = readString(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

					this.attach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.vm_disk_id);

				// String

				writeString(this.vm_disk_join_id, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

				// java.util.Date

				writeDate(this.attach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_disk_id=" + String.valueOf(vm_disk_id));
			sb.append(",vm_disk_join_id=" + vm_disk_join_id);
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_62Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_62Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_62_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_64Process(globalMap);

				row50Struct row50 = new row50Struct();
				delete_vm_disk_connectionStruct delete_vm_disk_connection = new delete_vm_disk_connectionStruct();

				/**
				 * [tJDBCOutput_36 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_36", false);
				start_Hash.put("tJDBCOutput_36", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_36";

				int tos_count_tJDBCOutput_36 = 0;

				int updateKeyCount_tJDBCOutput_36 = 3;
				if (updateKeyCount_tJDBCOutput_36 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_36 = 0;
				int nb_line_update_tJDBCOutput_36 = 0;
				int nb_line_inserted_tJDBCOutput_36 = 0;
				int nb_line_deleted_tJDBCOutput_36 = 0;
				int nb_line_rejected_tJDBCOutput_36 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_36 = 0;

				int deletedCount_tJDBCOutput_36 = 0;
				int updatedCount_tJDBCOutput_36 = 0;
				int insertedCount_tJDBCOutput_36 = 0;
				int rejectedCount_tJDBCOutput_36 = 0;

				boolean whetherReject_tJDBCOutput_36 = false;

				java.sql.Connection connection_tJDBCOutput_36 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_36 = 10000;
				int batchSizeCounter_tJDBCOutput_36 = 0;

				String update_tJDBCOutput_36 = "UPDATE "
						+ "disks_vm_map"
						+ " SET detach_date = ? WHERE vm_disk_id = ? AND vm_id = ? AND attach_date = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_36 = connection_tJDBCOutput_36
						.prepareStatement(update_tJDBCOutput_36);

				/**
				 * [tJDBCOutput_36 begin ] stop
				 */

				/**
				 * [tMap_34 begin ] start
				 */

				ok_Hash.put("tMap_34", false);
				start_Hash.put("tMap_34", System.currentTimeMillis());

				currentComponent = "tMap_34";

				int tos_count_tMap_34 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct> tHash_Lookup_row52 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct>) globalMap
						.get("tHash_Lookup_row52"));

				row52Struct row52HashKey = new row52Struct();
				row52Struct row52Default = new row52Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_34__Struct {
				}
				Var__tMap_34__Struct Var__tMap_34 = new Var__tMap_34__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_vm_disk_connectionStruct delete_vm_disk_connection_tmp = new delete_vm_disk_connectionStruct();
				// ###############################

				/**
				 * [tMap_34 begin ] stop
				 */

				/**
				 * [tJDBCInput_62 begin ] start
				 */

				ok_Hash.put("tJDBCInput_62", false);
				start_Hash.put("tJDBCInput_62", System.currentTimeMillis());

				currentComponent = "tJDBCInput_62";

				int tos_count_tJDBCInput_62 = 0;

				int nb_line_tJDBCInput_62 = 0;
				java.sql.Connection conn_tJDBCInput_62 = null;
				conn_tJDBCInput_62 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_62 = conn_tJDBCInput_62
						.createStatement();

				String dbquery_tJDBCInput_62 = "SELECT    	history_id,    	vm_disk_id,  	upper(cast(vm_disk_id as char(36))) as vm_disk_join_id,   	vm_id,   	upper(cast(vm_id as char(36))) as vm_join_id,   	attach_date FROM v3_0_latest_disks_vm_map_view";

				globalMap.put("tJDBCInput_62_QUERY", dbquery_tJDBCInput_62);
				java.sql.ResultSet rs_tJDBCInput_62 = null;
				try {
					rs_tJDBCInput_62 = stmt_tJDBCInput_62
							.executeQuery(dbquery_tJDBCInput_62);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_62 = rs_tJDBCInput_62
							.getMetaData();
					int colQtyInRs_tJDBCInput_62 = rsmd_tJDBCInput_62
							.getColumnCount();

					String tmpContent_tJDBCInput_62 = null;
					int column_index_tJDBCInput_62 = 1;

					while (rs_tJDBCInput_62.next()) {
						nb_line_tJDBCInput_62++;

						column_index_tJDBCInput_62 = 1;

						if (colQtyInRs_tJDBCInput_62 < column_index_tJDBCInput_62) {
							row50.history_id = null;
						} else {

							if (rs_tJDBCInput_62
									.getObject(column_index_tJDBCInput_62) != null) {
								row50.history_id = rs_tJDBCInput_62
										.getInt(column_index_tJDBCInput_62);
							} else {
								row50.history_id = null;
							}

						}

						column_index_tJDBCInput_62 = 2;

						if (colQtyInRs_tJDBCInput_62 < column_index_tJDBCInput_62) {
							row50.vm_disk_id = null;
						} else {

							if (rs_tJDBCInput_62
									.getObject(column_index_tJDBCInput_62) != null) {
								row50.vm_disk_id = rs_tJDBCInput_62
										.getObject(column_index_tJDBCInput_62);
							} else {
								row50.vm_disk_id = null;
							}

						}

						column_index_tJDBCInput_62 = 3;

						if (colQtyInRs_tJDBCInput_62 < column_index_tJDBCInput_62) {
							row50.vm_disk_join_id = null;
						} else {

							tmpContent_tJDBCInput_62 = rs_tJDBCInput_62
									.getString(column_index_tJDBCInput_62);
							if (tmpContent_tJDBCInput_62 != null) {
								row50.vm_disk_join_id = tmpContent_tJDBCInput_62;
							} else {
								row50.vm_disk_join_id = null;
							}

						}

						column_index_tJDBCInput_62 = 4;

						if (colQtyInRs_tJDBCInput_62 < column_index_tJDBCInput_62) {
							row50.vm_id = null;
						} else {

							if (rs_tJDBCInput_62
									.getObject(column_index_tJDBCInput_62) != null) {
								row50.vm_id = rs_tJDBCInput_62
										.getObject(column_index_tJDBCInput_62);
							} else {
								row50.vm_id = null;
							}

						}

						column_index_tJDBCInput_62 = 5;

						if (colQtyInRs_tJDBCInput_62 < column_index_tJDBCInput_62) {
							row50.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_62 = rs_tJDBCInput_62
									.getString(column_index_tJDBCInput_62);
							if (tmpContent_tJDBCInput_62 != null) {
								row50.vm_join_id = tmpContent_tJDBCInput_62;
							} else {
								row50.vm_join_id = null;
							}

						}

						column_index_tJDBCInput_62 = 6;

						if (colQtyInRs_tJDBCInput_62 < column_index_tJDBCInput_62) {
							row50.attach_date = null;
						} else {

							java.util.Date date_tJDBCInput_62 = null;
							try {
								date_tJDBCInput_62 = rs_tJDBCInput_62
										.getTimestamp(column_index_tJDBCInput_62);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_62 = rs_tJDBCInput_62
										.getDate(column_index_tJDBCInput_62);
							}
							row50.attach_date = date_tJDBCInput_62;

						}

						/**
						 * [tJDBCInput_62 begin ] stop
						 */
						/**
						 * [tJDBCInput_62 main ] start
						 */

						currentComponent = "tJDBCInput_62";

						tos_count_tJDBCInput_62++;

						/**
						 * [tJDBCInput_62 main ] stop
						 */

						/**
						 * [tMap_34 main ] start
						 */

						currentComponent = "tMap_34";

						boolean hasCasePrimitiveKeyWithNull_tMap_34 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_34 = false;
						boolean mainRowRejected_tMap_34 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row52"
						// /////////////////////////////////////////////

						boolean forceLooprow52 = false;

						row52Struct row52ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_34) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_34 = false;

							row52HashKey.vm_disk_join_id = row50.vm_disk_join_id;

							row52HashKey.vm_join_id = row50.vm_join_id;

							row52HashKey.hashCodeDirty = true;

							tHash_Lookup_row52.lookup(row52HashKey);

							if (!tHash_Lookup_row52.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_34 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row52 != null
								&& tHash_Lookup_row52.getCount(row52HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row52' and it contains more one result from keys :  row52.vm_disk_join_id = '"
							// + row52HashKey.vm_disk_join_id +
							// "', row52.vm_join_id = '" +
							// row52HashKey.vm_join_id + "'");
						} // G 071

						row52Struct row52 = null;

						row52Struct fromLookup_row52 = null;
						row52 = row52Default;

						if (tHash_Lookup_row52 != null
								&& tHash_Lookup_row52.hasNext()) { // G 099

							fromLookup_row52 = tHash_Lookup_row52.next();

						} // G 099

						if (fromLookup_row52 != null) {
							row52 = fromLookup_row52;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_34__Struct Var = Var__tMap_34;// ###############################
							// ###############################
							// # Output tables

							delete_vm_disk_connection = null;

							if (!rejectedInnerJoin_tMap_34) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table :
							// 'delete_vm_disk_connection'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_34) {
								delete_vm_disk_connection_tmp.vm_disk_id = row50.vm_disk_id;
								delete_vm_disk_connection_tmp.vm_id = row50.vm_id;
								delete_vm_disk_connection_tmp.attach_date = row50.attach_date;
								delete_vm_disk_connection_tmp.detach_date = context.runTime;
								delete_vm_disk_connection = delete_vm_disk_connection_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_34 = false;

						tos_count_tMap_34++;

						/**
						 * [tMap_34 main ] stop
						 */
						// Start of branch "delete_vm_disk_connection"
						if (delete_vm_disk_connection != null) {

							/**
							 * [tJDBCOutput_36 main ] start
							 */

							currentComponent = "tJDBCOutput_36";

							whetherReject_tJDBCOutput_36 = false;
							if (delete_vm_disk_connection.detach_date != null) {
								pstmt_tJDBCOutput_36
										.setTimestamp(
												1,
												new java.sql.Timestamp(
														delete_vm_disk_connection.detach_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_36.setNull(1,
										java.sql.Types.DATE);
							}

							if (delete_vm_disk_connection.vm_disk_id == null) {
								pstmt_tJDBCOutput_36.setNull(2,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_36.setObject(2,
										delete_vm_disk_connection.vm_disk_id);
							}

							if (delete_vm_disk_connection.vm_id == null) {
								pstmt_tJDBCOutput_36.setNull(3,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_36.setObject(3,
										delete_vm_disk_connection.vm_id);
							}

							if (delete_vm_disk_connection.attach_date != null) {
								pstmt_tJDBCOutput_36
										.setTimestamp(
												4,
												new java.sql.Timestamp(
														delete_vm_disk_connection.attach_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_36.setNull(4,
										java.sql.Types.DATE);
							}

							try {
								updatedCount_tJDBCOutput_36 = updatedCount_tJDBCOutput_36
										+ pstmt_tJDBCOutput_36.executeUpdate();
								nb_line_tJDBCOutput_36++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_36 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_36++;

							/**
							 * [tJDBCOutput_36 main ] stop
							 */

						} // End of branch "delete_vm_disk_connection"

						/**
						 * [tJDBCInput_62 end ] start
						 */

						currentComponent = "tJDBCInput_62";

					}
				} finally {
					rs_tJDBCInput_62.close();
					stmt_tJDBCInput_62.close();

				}
				globalMap.put("tJDBCInput_62_NB_LINE", nb_line_tJDBCInput_62);

				ok_Hash.put("tJDBCInput_62", true);
				end_Hash.put("tJDBCInput_62", System.currentTimeMillis());

				/**
				 * [tJDBCInput_62 end ] stop
				 */

				/**
				 * [tMap_34 end ] start
				 */

				currentComponent = "tMap_34";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row52 != null) {
					tHash_Lookup_row52.endGet();
				}
				globalMap.remove("tHash_Lookup_row52");

				// ###############################

				ok_Hash.put("tMap_34", true);
				end_Hash.put("tMap_34", System.currentTimeMillis());

				/**
				 * [tMap_34 end ] stop
				 */

				/**
				 * [tJDBCOutput_36 end ] start
				 */

				currentComponent = "tJDBCOutput_36";

				if (pstmt_tJDBCOutput_36 != null) {

					pstmt_tJDBCOutput_36.close();

				}

				nb_line_deleted_tJDBCOutput_36 = nb_line_deleted_tJDBCOutput_36
						+ deletedCount_tJDBCOutput_36;
				nb_line_update_tJDBCOutput_36 = nb_line_update_tJDBCOutput_36
						+ updatedCount_tJDBCOutput_36;
				nb_line_inserted_tJDBCOutput_36 = nb_line_inserted_tJDBCOutput_36
						+ insertedCount_tJDBCOutput_36;
				nb_line_rejected_tJDBCOutput_36 = nb_line_rejected_tJDBCOutput_36
						+ rejectedCount_tJDBCOutput_36;

				globalMap.put("tJDBCOutput_36_NB_LINE", nb_line_tJDBCOutput_36);
				globalMap.put("tJDBCOutput_36_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_36);
				globalMap.put("tJDBCOutput_36_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_36);
				globalMap.put("tJDBCOutput_36_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_36);
				globalMap.put("tJDBCOutput_36_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_36);

				ok_Hash.put("tJDBCOutput_36", true);
				end_Hash.put("tJDBCOutput_36", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_36 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_62:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_34"
			globalMap.remove("tHash_Lookup_row52");

			try {

				/**
				 * [tJDBCInput_62 finally ] start
				 */

				currentComponent = "tJDBCInput_62";

				/**
				 * [tJDBCInput_62 finally ] stop
				 */

				/**
				 * [tMap_34 finally ] start
				 */

				currentComponent = "tMap_34";

				/**
				 * [tMap_34 finally ] stop
				 */

				/**
				 * [tJDBCOutput_36 finally ] start
				 */

				currentComponent = "tJDBCOutput_36";

				/**
				 * [tJDBCOutput_36 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_62_SUBPROCESS_STATE", 1);
	}

	public static class vm_interface_configurationStruct implements
			routines.system.IPersistableRow<vm_interface_configurationStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_interface_id;

		public Object getVm_interface_id() {
			return this.vm_interface_id;
		}

		public String vm_interface_name;

		public String getVm_interface_name() {
			return this.vm_interface_name;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public Short vm_interface_type;

		public Short getVm_interface_type() {
			return this.vm_interface_type;
		}

		public Integer vm_interface_speed_bps;

		public Integer getVm_interface_speed_bps() {
			return this.vm_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_interface_id = (Object) dis.readObject();

					this.vm_interface_name = readString(dis);

					this.vm_id = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.vm_interface_type = null;
					} else {
						this.vm_interface_type = dis.readShort();
					}

					this.vm_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.vm_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_interface_id);

				// String

				writeString(this.vm_interface_name, dos);

				// Object

				dos.writeObject(this.vm_id);

				// Short

				if (this.vm_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_interface_type);
				}

				// Integer

				writeInteger(this.vm_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_interface_id=" + String.valueOf(vm_interface_id));
			sb.append(",vm_interface_name=" + vm_interface_name);
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_interface_type=" + String.valueOf(vm_interface_type));
			sb.append(",vm_interface_speed_bps="
					+ String.valueOf(vm_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(vm_interface_configurationStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_interface_id;

		public Object getVm_interface_id() {
			return this.vm_interface_id;
		}

		public String vm_interface_name;

		public String getVm_interface_name() {
			return this.vm_interface_name;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		public Short vm_interface_type;

		public Short getVm_interface_type() {
			return this.vm_interface_type;
		}

		public Integer vm_interface_speed_bps;

		public Integer getVm_interface_speed_bps() {
			return this.vm_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_interface_id = (Object) dis.readObject();

					this.vm_interface_name = readString(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_interface_type = null;
					} else {
						this.vm_interface_type = dis.readShort();
					}

					this.vm_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_interface_id);

				// String

				writeString(this.vm_interface_name, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

				// Short

				if (this.vm_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_interface_type);
				}

				// Integer

				writeInteger(this.vm_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_interface_id=" + String.valueOf(vm_interface_id));
			sb.append(",vm_interface_name=" + vm_interface_name);
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append(",vm_interface_type=" + String.valueOf(vm_interface_type));
			sb.append(",vm_interface_speed_bps="
					+ String.valueOf(vm_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_8Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_8Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_interface_id;

		public Object getVm_interface_id() {
			return this.vm_interface_id;
		}

		public String vm_interface_name;

		public String getVm_interface_name() {
			return this.vm_interface_name;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		public Short vm_interface_type;

		public Short getVm_interface_type() {
			return this.vm_interface_type;
		}

		public Integer vm_interface_speed_bps;

		public Integer getVm_interface_speed_bps() {
			return this.vm_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_interface_id = (Object) dis.readObject();

					this.vm_interface_name = readString(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_interface_type = null;
					} else {
						this.vm_interface_type = dis.readShort();
					}

					this.vm_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_interface_id);

				// String

				writeString(this.vm_interface_name, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

				// Short

				if (this.vm_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_interface_type);
				}

				// Integer

				writeInteger(this.vm_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_interface_id=" + String.valueOf(vm_interface_id));
			sb.append(",vm_interface_name=" + vm_interface_name);
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append(",vm_interface_type=" + String.valueOf(vm_interface_type));
			sb.append(",vm_interface_speed_bps="
					+ String.valueOf(vm_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_44Process(globalMap);

				row8Struct row8 = new row8Struct();
				vm_interface_configurationStruct vm_interface_configuration = new vm_interface_configurationStruct();

				/**
				 * [tJDBCOutput_8 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_8", false);
				start_Hash.put("tJDBCOutput_8", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_8";

				int tos_count_tJDBCOutput_8 = 0;

				int nb_line_tJDBCOutput_8 = 0;
				int nb_line_update_tJDBCOutput_8 = 0;
				int nb_line_inserted_tJDBCOutput_8 = 0;
				int nb_line_deleted_tJDBCOutput_8 = 0;
				int nb_line_rejected_tJDBCOutput_8 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_8 = 0;

				int deletedCount_tJDBCOutput_8 = 0;
				int updatedCount_tJDBCOutput_8 = 0;
				int insertedCount_tJDBCOutput_8 = 0;
				int rejectedCount_tJDBCOutput_8 = 0;

				boolean whetherReject_tJDBCOutput_8 = false;

				java.sql.Connection connection_tJDBCOutput_8 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_8 = 10000;
				int batchSizeCounter_tJDBCOutput_8 = 0;

				String insert_tJDBCOutput_8 = "INSERT INTO "
						+ "vm_interface_configuration"
						+ " (vm_interface_id,vm_interface_name,vm_id,vm_interface_type,vm_interface_speed_bps,mac_address,logical_network_name,vm_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_8 = connection_tJDBCOutput_8
						.prepareStatement(insert_tJDBCOutput_8);

				/**
				 * [tJDBCOutput_8 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				int tos_count_tMap_8 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) globalMap
						.get("tHash_Lookup_row40"));

				row40Struct row40HashKey = new row40Struct();
				row40Struct row40Default = new row40Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				vm_interface_configurationStruct vm_interface_configuration_tmp = new vm_interface_configurationStruct();
				// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tJDBCInput_8 begin ] start
				 */

				ok_Hash.put("tJDBCInput_8", false);
				start_Hash.put("tJDBCInput_8", System.currentTimeMillis());

				currentComponent = "tJDBCInput_8";

				int tos_count_tJDBCInput_8 = 0;

				int nb_line_tJDBCInput_8 = 0;
				java.sql.Connection conn_tJDBCInput_8 = null;
				conn_tJDBCInput_8 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_8 = conn_tJDBCInput_8
						.createStatement();

				String dbquery_tJDBCInput_8 = "SELECT     vm_interface_id,     vm_interface_name,     vm_id,     upper(cast(vm_id as char(36))) as vm_join_id,    vm_interface_type,     vm_interface_speed_bps,     mac_address,     logical_network_name,     create_date,     update_date  FROM dwh_vm_interface_configuration_history_view";

				globalMap.put("tJDBCInput_8_QUERY", dbquery_tJDBCInput_8);
				java.sql.ResultSet rs_tJDBCInput_8 = null;
				try {
					rs_tJDBCInput_8 = stmt_tJDBCInput_8
							.executeQuery(dbquery_tJDBCInput_8);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_8 = rs_tJDBCInput_8
							.getMetaData();
					int colQtyInRs_tJDBCInput_8 = rsmd_tJDBCInput_8
							.getColumnCount();

					String tmpContent_tJDBCInput_8 = null;
					int column_index_tJDBCInput_8 = 1;

					while (rs_tJDBCInput_8.next()) {
						nb_line_tJDBCInput_8++;

						column_index_tJDBCInput_8 = 1;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row8.vm_interface_id = null;
						} else {

							if (rs_tJDBCInput_8
									.getObject(column_index_tJDBCInput_8) != null) {
								row8.vm_interface_id = rs_tJDBCInput_8
										.getObject(column_index_tJDBCInput_8);
							} else {
								row8.vm_interface_id = null;
							}

						}

						column_index_tJDBCInput_8 = 2;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row8.vm_interface_name = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row8.vm_interface_name = tmpContent_tJDBCInput_8;
							} else {
								row8.vm_interface_name = null;
							}

						}

						column_index_tJDBCInput_8 = 3;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row8.vm_id = null;
						} else {

							if (rs_tJDBCInput_8
									.getObject(column_index_tJDBCInput_8) != null) {
								row8.vm_id = rs_tJDBCInput_8
										.getObject(column_index_tJDBCInput_8);
							} else {
								row8.vm_id = null;
							}

						}

						column_index_tJDBCInput_8 = 4;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row8.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row8.vm_join_id = tmpContent_tJDBCInput_8;
							} else {
								row8.vm_join_id = null;
							}

						}

						column_index_tJDBCInput_8 = 5;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row8.vm_interface_type = null;
						} else {

							if (rs_tJDBCInput_8
									.getObject(column_index_tJDBCInput_8) != null) {
								row8.vm_interface_type = rs_tJDBCInput_8
										.getShort(column_index_tJDBCInput_8);
							} else {
								row8.vm_interface_type = null;
							}

						}

						column_index_tJDBCInput_8 = 6;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row8.vm_interface_speed_bps = null;
						} else {

							if (rs_tJDBCInput_8
									.getObject(column_index_tJDBCInput_8) != null) {
								row8.vm_interface_speed_bps = rs_tJDBCInput_8
										.getInt(column_index_tJDBCInput_8);
							} else {
								row8.vm_interface_speed_bps = null;
							}

						}

						column_index_tJDBCInput_8 = 7;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row8.mac_address = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row8.mac_address = tmpContent_tJDBCInput_8;
							} else {
								row8.mac_address = null;
							}

						}

						column_index_tJDBCInput_8 = 8;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row8.logical_network_name = null;
						} else {

							tmpContent_tJDBCInput_8 = rs_tJDBCInput_8
									.getString(column_index_tJDBCInput_8);
							if (tmpContent_tJDBCInput_8 != null) {
								row8.logical_network_name = tmpContent_tJDBCInput_8;
							} else {
								row8.logical_network_name = null;
							}

						}

						column_index_tJDBCInput_8 = 9;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row8.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(column_index_tJDBCInput_8);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getDate(column_index_tJDBCInput_8);
							}
							row8.create_date = date_tJDBCInput_8;

						}

						column_index_tJDBCInput_8 = 10;

						if (colQtyInRs_tJDBCInput_8 < column_index_tJDBCInput_8) {
							row8.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_8 = null;
							try {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getTimestamp(column_index_tJDBCInput_8);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_8 = rs_tJDBCInput_8
										.getDate(column_index_tJDBCInput_8);
							}
							row8.update_date = date_tJDBCInput_8;

						}

						/**
						 * [tJDBCInput_8 begin ] stop
						 */
						/**
						 * [tJDBCInput_8 main ] start
						 */

						currentComponent = "tJDBCInput_8";

						tos_count_tJDBCInput_8++;

						/**
						 * [tJDBCInput_8 main ] stop
						 */

						/**
						 * [tMap_8 main ] start
						 */

						currentComponent = "tMap_8";

						boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_8 = false;
						boolean mainRowRejected_tMap_8 = false;

						if (

						(

						row8.update_date == null ? TalendDate.compareDate(
								row8.create_date, context.runTime) <= 0
								: TalendDate.compareDate(row8.update_date,
										context.runTime) <= 0

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row8'

							// /////////////////////////////////////////////
							// Starting Lookup Table "row40"
							// /////////////////////////////////////////////

							boolean forceLooprow40 = false;

							row40Struct row40ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_8 = false;

								row40HashKey.vm_join_id = row8.vm_join_id;

								row40HashKey.hashCodeDirty = true;

								tHash_Lookup_row40.lookup(row40HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row40 != null
									&& tHash_Lookup_row40
											.getCount(row40HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row40' and it contains more one result from keys :  row40.vm_join_id = '"
								// + row40HashKey.vm_join_id + "'");
							} // G 071

							row40Struct row40 = null;

							row40Struct fromLookup_row40 = null;
							row40 = row40Default;

							if (tHash_Lookup_row40 != null
									&& tHash_Lookup_row40.hasNext()) { // G 099

								fromLookup_row40 = tHash_Lookup_row40.next();

							} // G 099

							if (fromLookup_row40 != null) {
								row40 = fromLookup_row40;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
								// ###############################
								// # Output tables

								vm_interface_configuration = null;

								// # Output table : 'vm_interface_configuration'
								vm_interface_configuration_tmp.vm_interface_id = row8.vm_interface_id;
								vm_interface_configuration_tmp.vm_interface_name = StringHandling
										.TRIM(row8.vm_interface_name);
								vm_interface_configuration_tmp.vm_id = row8.vm_id;
								vm_interface_configuration_tmp.vm_interface_type = row8.vm_interface_type;
								vm_interface_configuration_tmp.vm_interface_speed_bps = row8.vm_interface_speed_bps;
								vm_interface_configuration_tmp.mac_address = StringHandling
										.TRIM(row8.mac_address);
								vm_interface_configuration_tmp.logical_network_name = StringHandling
										.TRIM(row8.logical_network_name);
								vm_interface_configuration_tmp.vm_configuration_version = row40.history_id;
								vm_interface_configuration_tmp.create_date = row8.create_date;
								vm_interface_configuration_tmp.update_date = row8.update_date;
								vm_interface_configuration_tmp.delete_date = null;
								vm_interface_configuration = vm_interface_configuration_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_8 = false;

							tos_count_tMap_8++;

							/**
							 * [tMap_8 main ] stop
							 */
							// Start of branch "vm_interface_configuration"
							if (vm_interface_configuration != null) {

								/**
								 * [tJDBCOutput_8 main ] start
								 */

								currentComponent = "tJDBCOutput_8";

								whetherReject_tJDBCOutput_8 = false;
								if (vm_interface_configuration.vm_interface_id == null) {
									pstmt_tJDBCOutput_8.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_8
											.setObject(
													1,
													vm_interface_configuration.vm_interface_id);
								}

								if (vm_interface_configuration.vm_interface_name == null) {
									pstmt_tJDBCOutput_8.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_8
											.setString(
													2,
													vm_interface_configuration.vm_interface_name);
								}

								if (vm_interface_configuration.vm_id == null) {
									pstmt_tJDBCOutput_8.setNull(3,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_8.setObject(3,
											vm_interface_configuration.vm_id);
								}

								if (vm_interface_configuration.vm_interface_type == null) {
									pstmt_tJDBCOutput_8.setNull(4,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_8
											.setShort(
													4,
													vm_interface_configuration.vm_interface_type);
								}

								if (vm_interface_configuration.vm_interface_speed_bps == null) {
									pstmt_tJDBCOutput_8.setNull(5,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_8
											.setInt(5,
													vm_interface_configuration.vm_interface_speed_bps);
								}

								if (vm_interface_configuration.mac_address == null) {
									pstmt_tJDBCOutput_8.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_8
											.setString(
													6,
													vm_interface_configuration.mac_address);
								}

								if (vm_interface_configuration.logical_network_name == null) {
									pstmt_tJDBCOutput_8.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_8
											.setString(
													7,
													vm_interface_configuration.logical_network_name);
								}

								if (vm_interface_configuration.vm_configuration_version == null) {
									pstmt_tJDBCOutput_8.setNull(8,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_8
											.setInt(8,
													vm_interface_configuration.vm_configuration_version);
								}

								if (vm_interface_configuration.create_date != null) {
									pstmt_tJDBCOutput_8
											.setTimestamp(
													9,
													new java.sql.Timestamp(
															vm_interface_configuration.create_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_8.setNull(9,
											java.sql.Types.DATE);
								}

								if (vm_interface_configuration.update_date != null) {
									pstmt_tJDBCOutput_8
											.setTimestamp(
													10,
													new java.sql.Timestamp(
															vm_interface_configuration.update_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_8.setNull(10,
											java.sql.Types.DATE);
								}

								if (vm_interface_configuration.delete_date != null) {
									pstmt_tJDBCOutput_8
											.setTimestamp(
													11,
													new java.sql.Timestamp(
															vm_interface_configuration.delete_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_8.setNull(11,
											java.sql.Types.DATE);
								}

								try {
									insertedCount_tJDBCOutput_8 = insertedCount_tJDBCOutput_8
											+ pstmt_tJDBCOutput_8
													.executeUpdate();
									nb_line_tJDBCOutput_8++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_8 = true;
									throw (e);
								}

								tos_count_tJDBCOutput_8++;

								/**
								 * [tJDBCOutput_8 main ] stop
								 */

							} // End of branch "vm_interface_configuration"

						} // G_TM_M_280 close main tMap filter for table 'row8'

						/**
						 * [tJDBCInput_8 end ] start
						 */

						currentComponent = "tJDBCInput_8";

					}
				} finally {
					rs_tJDBCInput_8.close();
					stmt_tJDBCInput_8.close();

				}
				globalMap.put("tJDBCInput_8_NB_LINE", nb_line_tJDBCInput_8);

				ok_Hash.put("tJDBCInput_8", true);
				end_Hash.put("tJDBCInput_8", System.currentTimeMillis());

				/**
				 * [tJDBCInput_8 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row40 != null) {
					tHash_Lookup_row40.endGet();
				}
				globalMap.remove("tHash_Lookup_row40");

				// ###############################

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tJDBCOutput_8 end ] start
				 */

				currentComponent = "tJDBCOutput_8";

				if (pstmt_tJDBCOutput_8 != null) {

					pstmt_tJDBCOutput_8.close();

				}

				nb_line_deleted_tJDBCOutput_8 = nb_line_deleted_tJDBCOutput_8
						+ deletedCount_tJDBCOutput_8;
				nb_line_update_tJDBCOutput_8 = nb_line_update_tJDBCOutput_8
						+ updatedCount_tJDBCOutput_8;
				nb_line_inserted_tJDBCOutput_8 = nb_line_inserted_tJDBCOutput_8
						+ insertedCount_tJDBCOutput_8;
				nb_line_rejected_tJDBCOutput_8 = nb_line_rejected_tJDBCOutput_8
						+ rejectedCount_tJDBCOutput_8;

				globalMap.put("tJDBCOutput_8_NB_LINE", nb_line_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_8);
				globalMap.put("tJDBCOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_8);

				ok_Hash.put("tJDBCOutput_8", true);
				end_Hash.put("tJDBCOutput_8", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_8 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_30Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row40");

			try {

				/**
				 * [tJDBCInput_8 finally ] start
				 */

				currentComponent = "tJDBCInput_8";

				/**
				 * [tJDBCInput_8 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tJDBCOutput_8 finally ] start
				 */

				currentComponent = "tJDBCOutput_8";

				/**
				 * [tJDBCOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_8_SUBPROCESS_STATE", 1);
	}

	public static class delete_vm_interfaceStruct implements
			routines.system.IPersistableRow<delete_vm_interfaceStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_interface_id;

		public Object getVm_interface_id() {
			return this.vm_interface_id;
		}

		public String vm_interface_name;

		public String getVm_interface_name() {
			return this.vm_interface_name;
		}

		public Short vm_interface_type;

		public Short getVm_interface_type() {
			return this.vm_interface_type;
		}

		public Integer vm_interface_speed_bps;

		public Integer getVm_interface_speed_bps() {
			return this.vm_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_interface_id = (Object) dis.readObject();

					this.vm_interface_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_interface_type = null;
					} else {
						this.vm_interface_type = dis.readShort();
					}

					this.vm_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.vm_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_interface_id);

				// String

				writeString(this.vm_interface_name, dos);

				// Short

				if (this.vm_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_interface_type);
				}

				// Integer

				writeInteger(this.vm_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_interface_id=" + String.valueOf(vm_interface_id));
			sb.append(",vm_interface_name=" + vm_interface_name);
			sb.append(",vm_interface_type=" + String.valueOf(vm_interface_type));
			sb.append(",vm_interface_speed_bps="
					+ String.valueOf(vm_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_vm_interfaceStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object vm_interface_id;

		public Object getVm_interface_id() {
			return this.vm_interface_id;
		}

		public String vm_interface_join_id;

		public String getVm_interface_join_id() {
			return this.vm_interface_join_id;
		}

		public String vm_interface_name;

		public String getVm_interface_name() {
			return this.vm_interface_name;
		}

		public Short vm_interface_type;

		public Short getVm_interface_type() {
			return this.vm_interface_type;
		}

		public Integer vm_interface_speed_bps;

		public Integer getVm_interface_speed_bps() {
			return this.vm_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.vm_interface_id = (Object) dis.readObject();

					this.vm_interface_join_id = readString(dis);

					this.vm_interface_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_interface_type = null;
					} else {
						this.vm_interface_type = dis.readShort();
					}

					this.vm_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.vm_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.vm_interface_id);

				// String

				writeString(this.vm_interface_join_id, dos);

				// String

				writeString(this.vm_interface_name, dos);

				// Short

				if (this.vm_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_interface_type);
				}

				// Integer

				writeInteger(this.vm_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_interface_id=" + String.valueOf(vm_interface_id));
			sb.append(",vm_interface_join_id=" + vm_interface_join_id);
			sb.append(",vm_interface_name=" + vm_interface_name);
			sb.append(",vm_interface_type=" + String.valueOf(vm_interface_type));
			sb.append(",vm_interface_speed_bps="
					+ String.valueOf(vm_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_30Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_30Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object vm_interface_id;

		public Object getVm_interface_id() {
			return this.vm_interface_id;
		}

		public String vm_interface_join_id;

		public String getVm_interface_join_id() {
			return this.vm_interface_join_id;
		}

		public String vm_interface_name;

		public String getVm_interface_name() {
			return this.vm_interface_name;
		}

		public Short vm_interface_type;

		public Short getVm_interface_type() {
			return this.vm_interface_type;
		}

		public Integer vm_interface_speed_bps;

		public Integer getVm_interface_speed_bps() {
			return this.vm_interface_speed_bps;
		}

		public String mac_address;

		public String getMac_address() {
			return this.mac_address;
		}

		public String logical_network_name;

		public String getLogical_network_name() {
			return this.logical_network_name;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.vm_interface_id = (Object) dis.readObject();

					this.vm_interface_join_id = readString(dis);

					this.vm_interface_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.vm_interface_type = null;
					} else {
						this.vm_interface_type = dis.readShort();
					}

					this.vm_interface_speed_bps = readInteger(dis);

					this.mac_address = readString(dis);

					this.logical_network_name = readString(dis);

					this.vm_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.vm_interface_id);

				// String

				writeString(this.vm_interface_join_id, dos);

				// String

				writeString(this.vm_interface_name, dos);

				// Short

				if (this.vm_interface_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.vm_interface_type);
				}

				// Integer

				writeInteger(this.vm_interface_speed_bps, dos);

				// String

				writeString(this.mac_address, dos);

				// String

				writeString(this.logical_network_name, dos);

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_interface_id=" + String.valueOf(vm_interface_id));
			sb.append(",vm_interface_join_id=" + vm_interface_join_id);
			sb.append(",vm_interface_name=" + vm_interface_name);
			sb.append(",vm_interface_type=" + String.valueOf(vm_interface_type));
			sb.append(",vm_interface_speed_bps="
					+ String.valueOf(vm_interface_speed_bps));
			sb.append(",mac_address=" + mac_address);
			sb.append(",logical_network_name=" + logical_network_name);
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_30Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_30_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_29Process(globalMap);

				row29Struct row29 = new row29Struct();
				delete_vm_interfaceStruct delete_vm_interface = new delete_vm_interfaceStruct();

				/**
				 * [tJDBCOutput_21 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_21", false);
				start_Hash.put("tJDBCOutput_21", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_21";

				int tos_count_tJDBCOutput_21 = 0;

				int nb_line_tJDBCOutput_21 = 0;
				int nb_line_update_tJDBCOutput_21 = 0;
				int nb_line_inserted_tJDBCOutput_21 = 0;
				int nb_line_deleted_tJDBCOutput_21 = 0;
				int nb_line_rejected_tJDBCOutput_21 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_21 = 0;

				int deletedCount_tJDBCOutput_21 = 0;
				int updatedCount_tJDBCOutput_21 = 0;
				int insertedCount_tJDBCOutput_21 = 0;
				int rejectedCount_tJDBCOutput_21 = 0;

				boolean whetherReject_tJDBCOutput_21 = false;

				java.sql.Connection connection_tJDBCOutput_21 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_21 = 10000;
				int batchSizeCounter_tJDBCOutput_21 = 0;

				String insert_tJDBCOutput_21 = "INSERT INTO "
						+ "vm_interface_configuration"
						+ " (vm_interface_id,vm_interface_name,vm_interface_type,vm_interface_speed_bps,mac_address,logical_network_name,vm_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_21 = connection_tJDBCOutput_21
						.prepareStatement(insert_tJDBCOutput_21);

				/**
				 * [tJDBCOutput_21 begin ] stop
				 */

				/**
				 * [tMap_21 begin ] start
				 */

				ok_Hash.put("tMap_21", false);
				start_Hash.put("tMap_21", System.currentTimeMillis());

				currentComponent = "tMap_21";

				int tos_count_tMap_21 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) globalMap
						.get("tHash_Lookup_row28"));

				row28Struct row28HashKey = new row28Struct();
				row28Struct row28Default = new row28Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_21__Struct {
				}
				Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_vm_interfaceStruct delete_vm_interface_tmp = new delete_vm_interfaceStruct();
				// ###############################

				/**
				 * [tMap_21 begin ] stop
				 */

				/**
				 * [tJDBCInput_30 begin ] start
				 */

				ok_Hash.put("tJDBCInput_30", false);
				start_Hash.put("tJDBCInput_30", System.currentTimeMillis());

				currentComponent = "tJDBCInput_30";

				int tos_count_tJDBCInput_30 = 0;

				int nb_line_tJDBCInput_30 = 0;
				java.sql.Connection conn_tJDBCInput_30 = null;
				conn_tJDBCInput_30 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_30 = conn_tJDBCInput_30
						.createStatement();

				String dbquery_tJDBCInput_30 = "SELECT     history_id,     vm_interface_id,     upper(cast(vm_interface_id as char(36))) as vm_interface_join_id,    vm_interface_name,     vm_interface_type,     vm_interface_speed_bps,     mac_address,     logical_network_name,     vm_configuration_version,     create_date,     update_date  FROM v3_5_latest_configuration_vms_interfaces";

				globalMap.put("tJDBCInput_30_QUERY", dbquery_tJDBCInput_30);
				java.sql.ResultSet rs_tJDBCInput_30 = null;
				try {
					rs_tJDBCInput_30 = stmt_tJDBCInput_30
							.executeQuery(dbquery_tJDBCInput_30);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_30 = rs_tJDBCInput_30
							.getMetaData();
					int colQtyInRs_tJDBCInput_30 = rsmd_tJDBCInput_30
							.getColumnCount();

					String tmpContent_tJDBCInput_30 = null;
					int column_index_tJDBCInput_30 = 1;

					while (rs_tJDBCInput_30.next()) {
						nb_line_tJDBCInput_30++;

						column_index_tJDBCInput_30 = 1;

						if (colQtyInRs_tJDBCInput_30 < column_index_tJDBCInput_30) {
							row29.history_id = null;
						} else {

							if (rs_tJDBCInput_30
									.getObject(column_index_tJDBCInput_30) != null) {
								row29.history_id = rs_tJDBCInput_30
										.getInt(column_index_tJDBCInput_30);
							} else {
								row29.history_id = null;
							}

						}

						column_index_tJDBCInput_30 = 2;

						if (colQtyInRs_tJDBCInput_30 < column_index_tJDBCInput_30) {
							row29.vm_interface_id = null;
						} else {

							if (rs_tJDBCInput_30
									.getObject(column_index_tJDBCInput_30) != null) {
								row29.vm_interface_id = rs_tJDBCInput_30
										.getObject(column_index_tJDBCInput_30);
							} else {
								row29.vm_interface_id = null;
							}

						}

						column_index_tJDBCInput_30 = 3;

						if (colQtyInRs_tJDBCInput_30 < column_index_tJDBCInput_30) {
							row29.vm_interface_join_id = null;
						} else {

							tmpContent_tJDBCInput_30 = rs_tJDBCInput_30
									.getString(column_index_tJDBCInput_30);
							if (tmpContent_tJDBCInput_30 != null) {
								row29.vm_interface_join_id = tmpContent_tJDBCInput_30;
							} else {
								row29.vm_interface_join_id = null;
							}

						}

						column_index_tJDBCInput_30 = 4;

						if (colQtyInRs_tJDBCInput_30 < column_index_tJDBCInput_30) {
							row29.vm_interface_name = null;
						} else {

							tmpContent_tJDBCInput_30 = rs_tJDBCInput_30
									.getString(column_index_tJDBCInput_30);
							if (tmpContent_tJDBCInput_30 != null) {
								row29.vm_interface_name = tmpContent_tJDBCInput_30;
							} else {
								row29.vm_interface_name = null;
							}

						}

						column_index_tJDBCInput_30 = 5;

						if (colQtyInRs_tJDBCInput_30 < column_index_tJDBCInput_30) {
							row29.vm_interface_type = null;
						} else {

							if (rs_tJDBCInput_30
									.getObject(column_index_tJDBCInput_30) != null) {
								row29.vm_interface_type = rs_tJDBCInput_30
										.getShort(column_index_tJDBCInput_30);
							} else {
								row29.vm_interface_type = null;
							}

						}

						column_index_tJDBCInput_30 = 6;

						if (colQtyInRs_tJDBCInput_30 < column_index_tJDBCInput_30) {
							row29.vm_interface_speed_bps = null;
						} else {

							if (rs_tJDBCInput_30
									.getObject(column_index_tJDBCInput_30) != null) {
								row29.vm_interface_speed_bps = rs_tJDBCInput_30
										.getInt(column_index_tJDBCInput_30);
							} else {
								row29.vm_interface_speed_bps = null;
							}

						}

						column_index_tJDBCInput_30 = 7;

						if (colQtyInRs_tJDBCInput_30 < column_index_tJDBCInput_30) {
							row29.mac_address = null;
						} else {

							tmpContent_tJDBCInput_30 = rs_tJDBCInput_30
									.getString(column_index_tJDBCInput_30);
							if (tmpContent_tJDBCInput_30 != null) {
								row29.mac_address = tmpContent_tJDBCInput_30;
							} else {
								row29.mac_address = null;
							}

						}

						column_index_tJDBCInput_30 = 8;

						if (colQtyInRs_tJDBCInput_30 < column_index_tJDBCInput_30) {
							row29.logical_network_name = null;
						} else {

							tmpContent_tJDBCInput_30 = rs_tJDBCInput_30
									.getString(column_index_tJDBCInput_30);
							if (tmpContent_tJDBCInput_30 != null) {
								row29.logical_network_name = tmpContent_tJDBCInput_30;
							} else {
								row29.logical_network_name = null;
							}

						}

						column_index_tJDBCInput_30 = 9;

						if (colQtyInRs_tJDBCInput_30 < column_index_tJDBCInput_30) {
							row29.vm_configuration_version = null;
						} else {

							if (rs_tJDBCInput_30
									.getObject(column_index_tJDBCInput_30) != null) {
								row29.vm_configuration_version = rs_tJDBCInput_30
										.getInt(column_index_tJDBCInput_30);
							} else {
								row29.vm_configuration_version = null;
							}

						}

						column_index_tJDBCInput_30 = 10;

						if (colQtyInRs_tJDBCInput_30 < column_index_tJDBCInput_30) {
							row29.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_30 = null;
							try {
								date_tJDBCInput_30 = rs_tJDBCInput_30
										.getTimestamp(column_index_tJDBCInput_30);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_30 = rs_tJDBCInput_30
										.getDate(column_index_tJDBCInput_30);
							}
							row29.create_date = date_tJDBCInput_30;

						}

						column_index_tJDBCInput_30 = 11;

						if (colQtyInRs_tJDBCInput_30 < column_index_tJDBCInput_30) {
							row29.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_30 = null;
							try {
								date_tJDBCInput_30 = rs_tJDBCInput_30
										.getTimestamp(column_index_tJDBCInput_30);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_30 = rs_tJDBCInput_30
										.getDate(column_index_tJDBCInput_30);
							}
							row29.update_date = date_tJDBCInput_30;

						}

						/**
						 * [tJDBCInput_30 begin ] stop
						 */
						/**
						 * [tJDBCInput_30 main ] start
						 */

						currentComponent = "tJDBCInput_30";

						tos_count_tJDBCInput_30++;

						/**
						 * [tJDBCInput_30 main ] stop
						 */

						/**
						 * [tMap_21 main ] start
						 */

						currentComponent = "tMap_21";

						boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_21 = false;
						boolean mainRowRejected_tMap_21 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row28"
						// /////////////////////////////////////////////

						boolean forceLooprow28 = false;

						row28Struct row28ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_21) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_21 = false;

							row28HashKey.vm_interface_join_id = row29.vm_interface_join_id;

							row28HashKey.hashCodeDirty = true;

							tHash_Lookup_row28.lookup(row28HashKey);

							if (!tHash_Lookup_row28.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_21 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row28 != null
								&& tHash_Lookup_row28.getCount(row28HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row28' and it contains more one result from keys :  row28.vm_interface_join_id = '"
							// + row28HashKey.vm_interface_join_id + "'");
						} // G 071

						row28Struct row28 = null;

						row28Struct fromLookup_row28 = null;
						row28 = row28Default;

						if (tHash_Lookup_row28 != null
								&& tHash_Lookup_row28.hasNext()) { // G 099

							fromLookup_row28 = tHash_Lookup_row28.next();

						} // G 099

						if (fromLookup_row28 != null) {
							row28 = fromLookup_row28;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
							// ###############################
							// # Output tables

							delete_vm_interface = null;

							if (!rejectedInnerJoin_tMap_21) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'delete_vm_interface'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_21) {
								delete_vm_interface_tmp.vm_interface_id = row29.vm_interface_id;
								delete_vm_interface_tmp.vm_interface_name = row29.vm_interface_name;
								delete_vm_interface_tmp.vm_interface_type = row29.vm_interface_type;
								delete_vm_interface_tmp.vm_interface_speed_bps = row29.vm_interface_speed_bps;
								delete_vm_interface_tmp.mac_address = row29.mac_address;
								delete_vm_interface_tmp.logical_network_name = row29.logical_network_name;
								delete_vm_interface_tmp.vm_configuration_version = row29.vm_configuration_version;
								delete_vm_interface_tmp.create_date = row29.create_date;
								delete_vm_interface_tmp.update_date = context.runTime;
								delete_vm_interface_tmp.delete_date = context.runTime;
								delete_vm_interface = delete_vm_interface_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_21 = false;

						tos_count_tMap_21++;

						/**
						 * [tMap_21 main ] stop
						 */
						// Start of branch "delete_vm_interface"
						if (delete_vm_interface != null) {

							/**
							 * [tJDBCOutput_21 main ] start
							 */

							currentComponent = "tJDBCOutput_21";

							whetherReject_tJDBCOutput_21 = false;
							if (delete_vm_interface.vm_interface_id == null) {
								pstmt_tJDBCOutput_21.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_21.setObject(1,
										delete_vm_interface.vm_interface_id);
							}

							if (delete_vm_interface.vm_interface_name == null) {
								pstmt_tJDBCOutput_21.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_21.setString(2,
										delete_vm_interface.vm_interface_name);
							}

							if (delete_vm_interface.vm_interface_type == null) {
								pstmt_tJDBCOutput_21.setNull(3,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_21.setShort(3,
										delete_vm_interface.vm_interface_type);
							}

							if (delete_vm_interface.vm_interface_speed_bps == null) {
								pstmt_tJDBCOutput_21.setNull(4,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_21
										.setInt(4,
												delete_vm_interface.vm_interface_speed_bps);
							}

							if (delete_vm_interface.mac_address == null) {
								pstmt_tJDBCOutput_21.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_21.setString(5,
										delete_vm_interface.mac_address);
							}

							if (delete_vm_interface.logical_network_name == null) {
								pstmt_tJDBCOutput_21.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_21
										.setString(
												6,
												delete_vm_interface.logical_network_name);
							}

							if (delete_vm_interface.vm_configuration_version == null) {
								pstmt_tJDBCOutput_21.setNull(7,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_21
										.setInt(7,
												delete_vm_interface.vm_configuration_version);
							}

							if (delete_vm_interface.create_date != null) {
								pstmt_tJDBCOutput_21.setTimestamp(
										8,
										new java.sql.Timestamp(
												delete_vm_interface.create_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_21.setNull(8,
										java.sql.Types.DATE);
							}

							if (delete_vm_interface.update_date != null) {
								pstmt_tJDBCOutput_21.setTimestamp(
										9,
										new java.sql.Timestamp(
												delete_vm_interface.update_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_21.setNull(9,
										java.sql.Types.DATE);
							}

							if (delete_vm_interface.delete_date != null) {
								pstmt_tJDBCOutput_21.setTimestamp(
										10,
										new java.sql.Timestamp(
												delete_vm_interface.delete_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_21.setNull(10,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tJDBCOutput_21 = insertedCount_tJDBCOutput_21
										+ pstmt_tJDBCOutput_21.executeUpdate();
								nb_line_tJDBCOutput_21++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_21 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_21++;

							/**
							 * [tJDBCOutput_21 main ] stop
							 */

						} // End of branch "delete_vm_interface"

						/**
						 * [tJDBCInput_30 end ] start
						 */

						currentComponent = "tJDBCInput_30";

					}
				} finally {
					rs_tJDBCInput_30.close();
					stmt_tJDBCInput_30.close();

				}
				globalMap.put("tJDBCInput_30_NB_LINE", nb_line_tJDBCInput_30);

				ok_Hash.put("tJDBCInput_30", true);
				end_Hash.put("tJDBCInput_30", System.currentTimeMillis());

				/**
				 * [tJDBCInput_30 end ] stop
				 */

				/**
				 * [tMap_21 end ] start
				 */

				currentComponent = "tMap_21";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row28 != null) {
					tHash_Lookup_row28.endGet();
				}
				globalMap.remove("tHash_Lookup_row28");

				// ###############################

				ok_Hash.put("tMap_21", true);
				end_Hash.put("tMap_21", System.currentTimeMillis());

				/**
				 * [tMap_21 end ] stop
				 */

				/**
				 * [tJDBCOutput_21 end ] start
				 */

				currentComponent = "tJDBCOutput_21";

				if (pstmt_tJDBCOutput_21 != null) {

					pstmt_tJDBCOutput_21.close();

				}

				nb_line_deleted_tJDBCOutput_21 = nb_line_deleted_tJDBCOutput_21
						+ deletedCount_tJDBCOutput_21;
				nb_line_update_tJDBCOutput_21 = nb_line_update_tJDBCOutput_21
						+ updatedCount_tJDBCOutput_21;
				nb_line_inserted_tJDBCOutput_21 = nb_line_inserted_tJDBCOutput_21
						+ insertedCount_tJDBCOutput_21;
				nb_line_rejected_tJDBCOutput_21 = nb_line_rejected_tJDBCOutput_21
						+ rejectedCount_tJDBCOutput_21;

				globalMap.put("tJDBCOutput_21_NB_LINE", nb_line_tJDBCOutput_21);
				globalMap.put("tJDBCOutput_21_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_21);
				globalMap.put("tJDBCOutput_21_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_21);
				globalMap.put("tJDBCOutput_21_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_21);
				globalMap.put("tJDBCOutput_21_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_21);

				ok_Hash.put("tJDBCOutput_21", true);
				end_Hash.put("tJDBCOutput_21", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_21 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_30:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_53Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_21"
			globalMap.remove("tHash_Lookup_row28");

			try {

				/**
				 * [tJDBCInput_30 finally ] start
				 */

				currentComponent = "tJDBCInput_30";

				/**
				 * [tJDBCInput_30 finally ] stop
				 */

				/**
				 * [tMap_21 finally ] start
				 */

				currentComponent = "tMap_21";

				/**
				 * [tMap_21 finally ] stop
				 */

				/**
				 * [tJDBCOutput_21 finally ] start
				 */

				currentComponent = "tJDBCOutput_21";

				/**
				 * [tJDBCOutput_21 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_30_SUBPROCESS_STATE", 1);
	}

	public static class insert_new_vm_device_connectionStruct
			implements
			routines.system.IPersistableRow<insert_new_vm_device_connectionStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public Object device_id;

		public Object getDevice_id() {
			return this.device_id;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public boolean is_managed;

		public boolean getIs_managed() {
			return this.is_managed;
		}

		public Boolean is_plugged;

		public Boolean getIs_plugged() {
			return this.is_plugged;
		}

		public boolean is_readonly;

		public boolean getIs_readonly() {
			return this.is_readonly;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public Integer device_configuration_version;

		public Integer getDevice_configuration_version() {
			return this.device_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_id = (Object) dis.readObject();

					this.device_id = (Object) dis.readObject();

					this.type = readString(dis);

					this.address = readString(dis);

					this.is_managed = dis.readBoolean();

					length = dis.readByte();
					if (length == -1) {
						this.is_plugged = null;
					} else {
						this.is_plugged = dis.readBoolean();
					}

					this.is_readonly = dis.readBoolean();

					this.vm_configuration_version = readInteger(dis);

					this.device_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_id);

				// Object

				dos.writeObject(this.device_id);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.address, dos);

				// boolean

				dos.writeBoolean(this.is_managed);

				// Boolean

				if (this.is_plugged == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_plugged);
				}

				// boolean

				dos.writeBoolean(this.is_readonly);

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// Integer

				writeInteger(this.device_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_id=" + String.valueOf(vm_id));
			sb.append(",device_id=" + String.valueOf(device_id));
			sb.append(",type=" + type);
			sb.append(",address=" + address);
			sb.append(",is_managed=" + String.valueOf(is_managed));
			sb.append(",is_plugged=" + String.valueOf(is_plugged));
			sb.append(",is_readonly=" + String.valueOf(is_readonly));
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",device_configuration_version="
					+ String.valueOf(device_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert_new_vm_device_connectionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row45Struct implements
			routines.system.IPersistableRow<row45Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object device_id;

		public Object getDevice_id() {
			return this.device_id;
		}

		public String device_join_id;

		public String getDevice_join_id() {
			return this.device_join_id;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public Boolean is_managed;

		public Boolean getIs_managed() {
			return this.is_managed;
		}

		public Boolean is_plugged;

		public Boolean getIs_plugged() {
			return this.is_plugged;
		}

		public Boolean is_readonly;

		public Boolean getIs_readonly() {
			return this.is_readonly;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.device_id = (Object) dis.readObject();

					this.device_join_id = readString(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

					this.type = readString(dis);

					this.address = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_managed = null;
					} else {
						this.is_managed = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_plugged = null;
					} else {
						this.is_plugged = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_readonly = null;
					} else {
						this.is_readonly = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.device_id);

				// String

				writeString(this.device_join_id, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.address, dos);

				// Boolean

				if (this.is_managed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_managed);
				}

				// Boolean

				if (this.is_plugged == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_plugged);
				}

				// Boolean

				if (this.is_readonly == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_readonly);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("device_id=" + String.valueOf(device_id));
			sb.append(",device_join_id=" + device_join_id);
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append(",type=" + type);
			sb.append(",address=" + address);
			sb.append(",is_managed=" + String.valueOf(is_managed));
			sb.append(",is_plugged=" + String.valueOf(is_plugged));
			sb.append(",is_readonly=" + String.valueOf(is_readonly));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_53Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_53Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object device_id;

		public Object getDevice_id() {
			return this.device_id;
		}

		public String device_join_id;

		public String getDevice_join_id() {
			return this.device_join_id;
		}

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public Boolean is_managed;

		public Boolean getIs_managed() {
			return this.is_managed;
		}

		public Boolean is_plugged;

		public Boolean getIs_plugged() {
			return this.is_plugged;
		}

		public Boolean is_readonly;

		public Boolean getIs_readonly() {
			return this.is_readonly;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.device_id = (Object) dis.readObject();

					this.device_join_id = readString(dis);

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

					this.type = readString(dis);

					this.address = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_managed = null;
					} else {
						this.is_managed = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_plugged = null;
					} else {
						this.is_plugged = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_readonly = null;
					} else {
						this.is_readonly = dis.readBoolean();
					}

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.device_id);

				// String

				writeString(this.device_join_id, dos);

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.address, dos);

				// Boolean

				if (this.is_managed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_managed);
				}

				// Boolean

				if (this.is_plugged == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_plugged);
				}

				// Boolean

				if (this.is_readonly == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_readonly);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("device_id=" + String.valueOf(device_id));
			sb.append(",device_join_id=" + device_join_id);
			sb.append(",vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append(",type=" + type);
			sb.append(",address=" + address);
			sb.append(",is_managed=" + String.valueOf(is_managed));
			sb.append(",is_plugged=" + String.valueOf(is_plugged));
			sb.append(",is_readonly=" + String.valueOf(is_readonly));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_53Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_53Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_53_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_54Process(globalMap);
				tJDBCInput_65Process(globalMap);
				tJDBCInput_66Process(globalMap);

				row45Struct row45 = new row45Struct();
				insert_new_vm_device_connectionStruct insert_new_vm_device_connection = new insert_new_vm_device_connectionStruct();

				/**
				 * [tJDBCOutput_31 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_31", false);
				start_Hash.put("tJDBCOutput_31", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_31";

				int tos_count_tJDBCOutput_31 = 0;

				int nb_line_tJDBCOutput_31 = 0;
				int nb_line_update_tJDBCOutput_31 = 0;
				int nb_line_inserted_tJDBCOutput_31 = 0;
				int nb_line_deleted_tJDBCOutput_31 = 0;
				int nb_line_rejected_tJDBCOutput_31 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_31 = 0;

				int deletedCount_tJDBCOutput_31 = 0;
				int updatedCount_tJDBCOutput_31 = 0;
				int insertedCount_tJDBCOutput_31 = 0;
				int rejectedCount_tJDBCOutput_31 = 0;

				boolean whetherReject_tJDBCOutput_31 = false;

				java.sql.Connection connection_tJDBCOutput_31 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_31 = 10000;
				int batchSizeCounter_tJDBCOutput_31 = 0;

				String insert_tJDBCOutput_31 = "INSERT INTO "
						+ "vm_device_history"
						+ " (vm_id,device_id,type,address,is_managed,is_plugged,is_readonly,vm_configuration_version,device_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_31 = connection_tJDBCOutput_31
						.prepareStatement(insert_tJDBCOutput_31);

				/**
				 * [tJDBCOutput_31 begin ] stop
				 */

				/**
				 * [tMap_31 begin ] start
				 */

				ok_Hash.put("tMap_31", false);
				start_Hash.put("tMap_31", System.currentTimeMillis());

				currentComponent = "tMap_31";

				int tos_count_tMap_31 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) globalMap
						.get("tHash_Lookup_row46"));

				row46Struct row46HashKey = new row46Struct();
				row46Struct row46Default = new row46Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct> tHash_Lookup_row53 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct>) globalMap
						.get("tHash_Lookup_row53"));

				row53Struct row53HashKey = new row53Struct();
				row53Struct row53Default = new row53Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row54Struct> tHash_Lookup_row54 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row54Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row54Struct>) globalMap
						.get("tHash_Lookup_row54"));

				row54Struct row54HashKey = new row54Struct();
				row54Struct row54Default = new row54Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_31__Struct {
				}
				Var__tMap_31__Struct Var__tMap_31 = new Var__tMap_31__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				insert_new_vm_device_connectionStruct insert_new_vm_device_connection_tmp = new insert_new_vm_device_connectionStruct();
				// ###############################

				/**
				 * [tMap_31 begin ] stop
				 */

				/**
				 * [tJDBCInput_53 begin ] start
				 */

				ok_Hash.put("tJDBCInput_53", false);
				start_Hash.put("tJDBCInput_53", System.currentTimeMillis());

				currentComponent = "tJDBCInput_53";

				int tos_count_tJDBCInput_53 = 0;

				int nb_line_tJDBCInput_53 = 0;
				java.sql.Connection conn_tJDBCInput_53 = null;
				conn_tJDBCInput_53 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_53 = conn_tJDBCInput_53
						.createStatement();

				String dbquery_tJDBCInput_53 = "SELECT    device_id,   upper(cast(device_id as char(36))) as device_join_id,   vm_id,   upper(cast(vm_id as char(36))) as vm_join_id,   type,    address,    is_managed,    is_plugged,    is_readonly,   create_date,   update_date FROM dwh_vm_device_history_view";

				globalMap.put("tJDBCInput_53_QUERY", dbquery_tJDBCInput_53);
				java.sql.ResultSet rs_tJDBCInput_53 = null;
				try {
					rs_tJDBCInput_53 = stmt_tJDBCInput_53
							.executeQuery(dbquery_tJDBCInput_53);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_53 = rs_tJDBCInput_53
							.getMetaData();
					int colQtyInRs_tJDBCInput_53 = rsmd_tJDBCInput_53
							.getColumnCount();

					String tmpContent_tJDBCInput_53 = null;
					int column_index_tJDBCInput_53 = 1;

					while (rs_tJDBCInput_53.next()) {
						nb_line_tJDBCInput_53++;

						column_index_tJDBCInput_53 = 1;

						if (colQtyInRs_tJDBCInput_53 < column_index_tJDBCInput_53) {
							row45.device_id = null;
						} else {

							if (rs_tJDBCInput_53
									.getObject(column_index_tJDBCInput_53) != null) {
								row45.device_id = rs_tJDBCInput_53
										.getObject(column_index_tJDBCInput_53);
							} else {
								row45.device_id = null;
							}

						}

						column_index_tJDBCInput_53 = 2;

						if (colQtyInRs_tJDBCInput_53 < column_index_tJDBCInput_53) {
							row45.device_join_id = null;
						} else {

							tmpContent_tJDBCInput_53 = rs_tJDBCInput_53
									.getString(column_index_tJDBCInput_53);
							if (tmpContent_tJDBCInput_53 != null) {
								row45.device_join_id = tmpContent_tJDBCInput_53;
							} else {
								row45.device_join_id = null;
							}

						}

						column_index_tJDBCInput_53 = 3;

						if (colQtyInRs_tJDBCInput_53 < column_index_tJDBCInput_53) {
							row45.vm_id = null;
						} else {

							if (rs_tJDBCInput_53
									.getObject(column_index_tJDBCInput_53) != null) {
								row45.vm_id = rs_tJDBCInput_53
										.getObject(column_index_tJDBCInput_53);
							} else {
								row45.vm_id = null;
							}

						}

						column_index_tJDBCInput_53 = 4;

						if (colQtyInRs_tJDBCInput_53 < column_index_tJDBCInput_53) {
							row45.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_53 = rs_tJDBCInput_53
									.getString(column_index_tJDBCInput_53);
							if (tmpContent_tJDBCInput_53 != null) {
								row45.vm_join_id = tmpContent_tJDBCInput_53;
							} else {
								row45.vm_join_id = null;
							}

						}

						column_index_tJDBCInput_53 = 5;

						if (colQtyInRs_tJDBCInput_53 < column_index_tJDBCInput_53) {
							row45.type = null;
						} else {

							tmpContent_tJDBCInput_53 = rs_tJDBCInput_53
									.getString(column_index_tJDBCInput_53);
							if (tmpContent_tJDBCInput_53 != null) {
								row45.type = tmpContent_tJDBCInput_53;
							} else {
								row45.type = null;
							}

						}

						column_index_tJDBCInput_53 = 6;

						if (colQtyInRs_tJDBCInput_53 < column_index_tJDBCInput_53) {
							row45.address = null;
						} else {

							tmpContent_tJDBCInput_53 = rs_tJDBCInput_53
									.getString(column_index_tJDBCInput_53);
							if (tmpContent_tJDBCInput_53 != null) {
								row45.address = tmpContent_tJDBCInput_53;
							} else {
								row45.address = null;
							}

						}

						column_index_tJDBCInput_53 = 7;

						if (colQtyInRs_tJDBCInput_53 < column_index_tJDBCInput_53) {
							row45.is_managed = null;
						} else {

							if (rs_tJDBCInput_53
									.getObject(column_index_tJDBCInput_53) != null) {
								row45.is_managed = rs_tJDBCInput_53
										.getBoolean(column_index_tJDBCInput_53);
							} else {
								row45.is_managed = null;
							}

						}

						column_index_tJDBCInput_53 = 8;

						if (colQtyInRs_tJDBCInput_53 < column_index_tJDBCInput_53) {
							row45.is_plugged = null;
						} else {

							if (rs_tJDBCInput_53
									.getObject(column_index_tJDBCInput_53) != null) {
								row45.is_plugged = rs_tJDBCInput_53
										.getBoolean(column_index_tJDBCInput_53);
							} else {
								row45.is_plugged = null;
							}

						}

						column_index_tJDBCInput_53 = 9;

						if (colQtyInRs_tJDBCInput_53 < column_index_tJDBCInput_53) {
							row45.is_readonly = null;
						} else {

							if (rs_tJDBCInput_53
									.getObject(column_index_tJDBCInput_53) != null) {
								row45.is_readonly = rs_tJDBCInput_53
										.getBoolean(column_index_tJDBCInput_53);
							} else {
								row45.is_readonly = null;
							}

						}

						column_index_tJDBCInput_53 = 10;

						if (colQtyInRs_tJDBCInput_53 < column_index_tJDBCInput_53) {
							row45.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_53 = null;
							try {
								date_tJDBCInput_53 = rs_tJDBCInput_53
										.getTimestamp(column_index_tJDBCInput_53);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_53 = rs_tJDBCInput_53
										.getDate(column_index_tJDBCInput_53);
							}
							row45.create_date = date_tJDBCInput_53;

						}

						column_index_tJDBCInput_53 = 11;

						if (colQtyInRs_tJDBCInput_53 < column_index_tJDBCInput_53) {
							row45.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_53 = null;
							try {
								date_tJDBCInput_53 = rs_tJDBCInput_53
										.getTimestamp(column_index_tJDBCInput_53);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_53 = rs_tJDBCInput_53
										.getDate(column_index_tJDBCInput_53);
							}
							row45.update_date = date_tJDBCInput_53;

						}

						/**
						 * [tJDBCInput_53 begin ] stop
						 */
						/**
						 * [tJDBCInput_53 main ] start
						 */

						currentComponent = "tJDBCInput_53";

						tos_count_tJDBCInput_53++;

						/**
						 * [tJDBCInput_53 main ] stop
						 */

						/**
						 * [tMap_31 main ] start
						 */

						currentComponent = "tMap_31";

						boolean hasCasePrimitiveKeyWithNull_tMap_31 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_31 = false;
						boolean mainRowRejected_tMap_31 = false;

						if (

						(

						row45.update_date == null ? TalendDate.compareDate(
								row45.create_date, context.runTime) <= 0
								: TalendDate.compareDate(row45.update_date,
										context.runTime) <= 0

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row45'

							// /////////////////////////////////////////////
							// Starting Lookup Table "row46"
							// /////////////////////////////////////////////

							boolean forceLooprow46 = false;

							row46Struct row46ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_31) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_31 = false;

								row46HashKey.vm_join_id = row45.vm_join_id;

								row46HashKey.hashCodeDirty = true;

								tHash_Lookup_row46.lookup(row46HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row46 != null
									&& tHash_Lookup_row46
											.getCount(row46HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row46' and it contains more one result from keys :  row46.vm_join_id = '"
								// + row46HashKey.vm_join_id + "'");
							} // G 071

							row46Struct row46 = null;

							row46Struct fromLookup_row46 = null;
							row46 = row46Default;

							if (tHash_Lookup_row46 != null
									&& tHash_Lookup_row46.hasNext()) { // G 099

								fromLookup_row46 = tHash_Lookup_row46.next();

							} // G 099

							if (fromLookup_row46 != null) {
								row46 = fromLookup_row46;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row53"
							// /////////////////////////////////////////////

							boolean forceLooprow53 = false;

							row53Struct row53ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_31) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_31 = false;

								row53HashKey.vm_interface_join_id = row45.device_join_id;

								row53HashKey.hashCodeDirty = true;

								tHash_Lookup_row53.lookup(row53HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row53 != null
									&& tHash_Lookup_row53
											.getCount(row53HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row53' and it contains more one result from keys :  row53.vm_interface_join_id = '"
								// + row53HashKey.vm_interface_join_id + "'");
							} // G 071

							row53Struct row53 = null;

							row53Struct fromLookup_row53 = null;
							row53 = row53Default;

							if (tHash_Lookup_row53 != null
									&& tHash_Lookup_row53.hasNext()) { // G 099

								fromLookup_row53 = tHash_Lookup_row53.next();

							} // G 099

							if (fromLookup_row53 != null) {
								row53 = fromLookup_row53;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row54"
							// /////////////////////////////////////////////

							boolean forceLooprow54 = false;

							row54Struct row54ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_31) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_31 = false;

								row54HashKey.vm_disk_join_id = row45.device_join_id;

								row54HashKey.hashCodeDirty = true;

								tHash_Lookup_row54.lookup(row54HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row54 != null
									&& tHash_Lookup_row54
											.getCount(row54HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row54' and it contains more one result from keys :  row54.vm_disk_join_id = '"
								// + row54HashKey.vm_disk_join_id + "'");
							} // G 071

							row54Struct row54 = null;

							row54Struct fromLookup_row54 = null;
							row54 = row54Default;

							if (tHash_Lookup_row54 != null
									&& tHash_Lookup_row54.hasNext()) { // G 099

								fromLookup_row54 = tHash_Lookup_row54.next();

							} // G 099

							if (fromLookup_row54 != null) {
								row54 = fromLookup_row54;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_31__Struct Var = Var__tMap_31;// ###############################
								// ###############################
								// # Output tables

								insert_new_vm_device_connection = null;

								// # Output table :
								// 'insert_new_vm_device_connection'
								insert_new_vm_device_connection_tmp.vm_id = row45.vm_id;
								insert_new_vm_device_connection_tmp.device_id = row45.device_id;
								insert_new_vm_device_connection_tmp.type = row45.type;
								insert_new_vm_device_connection_tmp.address = row45.address;
								insert_new_vm_device_connection_tmp.is_managed = row45.is_managed;
								insert_new_vm_device_connection_tmp.is_plugged = row45.is_plugged;
								insert_new_vm_device_connection_tmp.is_readonly = row45.is_readonly;
								insert_new_vm_device_connection_tmp.vm_configuration_version = row46.history_id;
								insert_new_vm_device_connection_tmp.device_configuration_version = row53.history_id != null ? row53.history_id
										: row54.history_id;
								insert_new_vm_device_connection_tmp.create_date = row45.create_date;
								insert_new_vm_device_connection_tmp.update_date = row45.update_date;
								insert_new_vm_device_connection_tmp.delete_date = null;
								insert_new_vm_device_connection = insert_new_vm_device_connection_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_31 = false;

							tos_count_tMap_31++;

							/**
							 * [tMap_31 main ] stop
							 */
							// Start of branch "insert_new_vm_device_connection"
							if (insert_new_vm_device_connection != null) {

								/**
								 * [tJDBCOutput_31 main ] start
								 */

								currentComponent = "tJDBCOutput_31";

								whetherReject_tJDBCOutput_31 = false;
								if (insert_new_vm_device_connection.vm_id == null) {
									pstmt_tJDBCOutput_31.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_31
											.setObject(
													1,
													insert_new_vm_device_connection.vm_id);
								}

								if (insert_new_vm_device_connection.device_id == null) {
									pstmt_tJDBCOutput_31.setNull(2,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_31
											.setObject(
													2,
													insert_new_vm_device_connection.device_id);
								}

								if (insert_new_vm_device_connection.type == null) {
									pstmt_tJDBCOutput_31.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_31
											.setString(
													3,
													insert_new_vm_device_connection.type);
								}

								if (insert_new_vm_device_connection.address == null) {
									pstmt_tJDBCOutput_31.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_31
											.setString(
													4,
													insert_new_vm_device_connection.address);
								}

								pstmt_tJDBCOutput_31
										.setBoolean(
												5,
												insert_new_vm_device_connection.is_managed);

								if (insert_new_vm_device_connection.is_plugged == null) {
									pstmt_tJDBCOutput_31.setNull(6,
											java.sql.Types.BOOLEAN);
								} else {
									pstmt_tJDBCOutput_31
											.setBoolean(
													6,
													insert_new_vm_device_connection.is_plugged);
								}

								pstmt_tJDBCOutput_31
										.setBoolean(
												7,
												insert_new_vm_device_connection.is_readonly);

								if (insert_new_vm_device_connection.vm_configuration_version == null) {
									pstmt_tJDBCOutput_31.setNull(8,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_31
											.setInt(8,
													insert_new_vm_device_connection.vm_configuration_version);
								}

								if (insert_new_vm_device_connection.device_configuration_version == null) {
									pstmt_tJDBCOutput_31.setNull(9,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tJDBCOutput_31
											.setInt(9,
													insert_new_vm_device_connection.device_configuration_version);
								}

								if (insert_new_vm_device_connection.create_date != null) {
									pstmt_tJDBCOutput_31
											.setTimestamp(
													10,
													new java.sql.Timestamp(
															insert_new_vm_device_connection.create_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_31.setNull(10,
											java.sql.Types.DATE);
								}

								if (insert_new_vm_device_connection.update_date != null) {
									pstmt_tJDBCOutput_31
											.setTimestamp(
													11,
													new java.sql.Timestamp(
															insert_new_vm_device_connection.update_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_31.setNull(11,
											java.sql.Types.DATE);
								}

								if (insert_new_vm_device_connection.delete_date != null) {
									pstmt_tJDBCOutput_31
											.setTimestamp(
													12,
													new java.sql.Timestamp(
															insert_new_vm_device_connection.delete_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_31.setNull(12,
											java.sql.Types.DATE);
								}

								try {
									insertedCount_tJDBCOutput_31 = insertedCount_tJDBCOutput_31
											+ pstmt_tJDBCOutput_31
													.executeUpdate();
									nb_line_tJDBCOutput_31++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_31 = true;
									throw (e);
								}

								tos_count_tJDBCOutput_31++;

								/**
								 * [tJDBCOutput_31 main ] stop
								 */

							} // End of branch "insert_new_vm_device_connection"

						} // G_TM_M_280 close main tMap filter for table 'row45'

						/**
						 * [tJDBCInput_53 end ] start
						 */

						currentComponent = "tJDBCInput_53";

					}
				} finally {
					rs_tJDBCInput_53.close();
					stmt_tJDBCInput_53.close();

				}
				globalMap.put("tJDBCInput_53_NB_LINE", nb_line_tJDBCInput_53);

				ok_Hash.put("tJDBCInput_53", true);
				end_Hash.put("tJDBCInput_53", System.currentTimeMillis());

				/**
				 * [tJDBCInput_53 end ] stop
				 */

				/**
				 * [tMap_31 end ] start
				 */

				currentComponent = "tMap_31";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row46 != null) {
					tHash_Lookup_row46.endGet();
				}
				globalMap.remove("tHash_Lookup_row46");

				if (tHash_Lookup_row53 != null) {
					tHash_Lookup_row53.endGet();
				}
				globalMap.remove("tHash_Lookup_row53");

				if (tHash_Lookup_row54 != null) {
					tHash_Lookup_row54.endGet();
				}
				globalMap.remove("tHash_Lookup_row54");

				// ###############################

				ok_Hash.put("tMap_31", true);
				end_Hash.put("tMap_31", System.currentTimeMillis());

				/**
				 * [tMap_31 end ] stop
				 */

				/**
				 * [tJDBCOutput_31 end ] start
				 */

				currentComponent = "tJDBCOutput_31";

				if (pstmt_tJDBCOutput_31 != null) {

					pstmt_tJDBCOutput_31.close();

				}

				nb_line_deleted_tJDBCOutput_31 = nb_line_deleted_tJDBCOutput_31
						+ deletedCount_tJDBCOutput_31;
				nb_line_update_tJDBCOutput_31 = nb_line_update_tJDBCOutput_31
						+ updatedCount_tJDBCOutput_31;
				nb_line_inserted_tJDBCOutput_31 = nb_line_inserted_tJDBCOutput_31
						+ insertedCount_tJDBCOutput_31;
				nb_line_rejected_tJDBCOutput_31 = nb_line_rejected_tJDBCOutput_31
						+ rejectedCount_tJDBCOutput_31;

				globalMap.put("tJDBCOutput_31_NB_LINE", nb_line_tJDBCOutput_31);
				globalMap.put("tJDBCOutput_31_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_31);
				globalMap.put("tJDBCOutput_31_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_31);
				globalMap.put("tJDBCOutput_31_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_31);
				globalMap.put("tJDBCOutput_31_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_31);

				ok_Hash.put("tJDBCOutput_31", true);
				end_Hash.put("tJDBCOutput_31", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_31 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_53:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_56Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_31"
			globalMap.remove("tHash_Lookup_row46");

			// free memory for "tMap_31"
			globalMap.remove("tHash_Lookup_row53");

			// free memory for "tMap_31"
			globalMap.remove("tHash_Lookup_row54");

			try {

				/**
				 * [tJDBCInput_53 finally ] start
				 */

				currentComponent = "tJDBCInput_53";

				/**
				 * [tJDBCInput_53 finally ] stop
				 */

				/**
				 * [tMap_31 finally ] start
				 */

				currentComponent = "tMap_31";

				/**
				 * [tMap_31 finally ] stop
				 */

				/**
				 * [tJDBCOutput_31 finally ] start
				 */

				currentComponent = "tJDBCOutput_31";

				/**
				 * [tJDBCOutput_31 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_53_SUBPROCESS_STATE", 1);
	}

	public static class delete_vm_device_connectionStruct implements
			routines.system.IPersistableRow<delete_vm_device_connectionStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public Object device_id;

		public Object getDevice_id() {
			return this.device_id;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public boolean is_managed;

		public boolean getIs_managed() {
			return this.is_managed;
		}

		public Boolean is_plugged;

		public Boolean getIs_plugged() {
			return this.is_plugged;
		}

		public boolean is_readonly;

		public boolean getIs_readonly() {
			return this.is_readonly;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public Integer device_configuration_version;

		public Integer getDevice_configuration_version() {
			return this.device_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.vm_id == null) ? 0 : this.vm_id.hashCode());

				result = prime
						* result
						+ ((this.device_id == null) ? 0 : this.device_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final delete_vm_device_connectionStruct other = (delete_vm_device_connectionStruct) obj;

			if (this.vm_id == null) {
				if (other.vm_id != null)
					return false;

			} else if (!this.vm_id.equals(other.vm_id))

				return false;

			if (this.device_id == null) {
				if (other.device_id != null)
					return false;

			} else if (!this.device_id.equals(other.device_id))

				return false;

			return true;
		}

		public void copyDataTo(delete_vm_device_connectionStruct other) {

			other.vm_id = this.vm_id;
			other.device_id = this.device_id;
			other.type = this.type;
			other.address = this.address;
			other.is_managed = this.is_managed;
			other.is_plugged = this.is_plugged;
			other.is_readonly = this.is_readonly;
			other.vm_configuration_version = this.vm_configuration_version;
			other.device_configuration_version = this.device_configuration_version;
			other.create_date = this.create_date;
			other.update_date = this.update_date;
			other.delete_date = this.delete_date;

		}

		public void copyKeysDataTo(delete_vm_device_connectionStruct other) {

			other.vm_id = this.vm_id;
			other.device_id = this.device_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_id = (Object) dis.readObject();

					this.device_id = (Object) dis.readObject();

					this.type = readString(dis);

					this.address = readString(dis);

					this.is_managed = dis.readBoolean();

					length = dis.readByte();
					if (length == -1) {
						this.is_plugged = null;
					} else {
						this.is_plugged = dis.readBoolean();
					}

					this.is_readonly = dis.readBoolean();

					this.vm_configuration_version = readInteger(dis);

					this.device_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_id);

				// Object

				dos.writeObject(this.device_id);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.address, dos);

				// boolean

				dos.writeBoolean(this.is_managed);

				// Boolean

				if (this.is_plugged == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_plugged);
				}

				// boolean

				dos.writeBoolean(this.is_readonly);

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// Integer

				writeInteger(this.device_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_id=" + String.valueOf(vm_id));
			sb.append(",device_id=" + String.valueOf(device_id));
			sb.append(",type=" + type);
			sb.append(",address=" + address);
			sb.append(",is_managed=" + String.valueOf(is_managed));
			sb.append(",is_plugged=" + String.valueOf(is_plugged));
			sb.append(",is_readonly=" + String.valueOf(is_readonly));
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",device_configuration_version="
					+ String.valueOf(device_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_vm_device_connectionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.vm_id, other.vm_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.device_id, other.device_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row48Struct implements
			routines.system.IPersistableRow<row48Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		public Object device_id;

		public Object getDevice_id() {
			return this.device_id;
		}

		public String device_join_id;

		public String getDevice_join_id() {
			return this.device_join_id;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public Boolean is_managed;

		public Boolean getIs_managed() {
			return this.is_managed;
		}

		public Boolean is_plugged;

		public Boolean getIs_plugged() {
			return this.is_plugged;
		}

		public Boolean is_readonly;

		public Boolean getIs_readonly() {
			return this.is_readonly;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public Integer device_configuration_version;

		public Integer getDevice_configuration_version() {
			return this.device_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

					this.device_id = (Object) dis.readObject();

					this.device_join_id = readString(dis);

					this.type = readString(dis);

					this.address = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_managed = null;
					} else {
						this.is_managed = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_plugged = null;
					} else {
						this.is_plugged = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_readonly = null;
					} else {
						this.is_readonly = dis.readBoolean();
					}

					this.vm_configuration_version = readInteger(dis);

					this.device_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

				// Object

				dos.writeObject(this.device_id);

				// String

				writeString(this.device_join_id, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.address, dos);

				// Boolean

				if (this.is_managed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_managed);
				}

				// Boolean

				if (this.is_plugged == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_plugged);
				}

				// Boolean

				if (this.is_readonly == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_readonly);
				}

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// Integer

				writeInteger(this.device_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append(",device_id=" + String.valueOf(device_id));
			sb.append(",device_join_id=" + device_join_id);
			sb.append(",type=" + type);
			sb.append(",address=" + address);
			sb.append(",is_managed=" + String.valueOf(is_managed));
			sb.append(",is_plugged=" + String.valueOf(is_plugged));
			sb.append(",is_readonly=" + String.valueOf(is_readonly));
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",device_configuration_version="
					+ String.valueOf(device_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_56Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_56Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object vm_id;

		public Object getVm_id() {
			return this.vm_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		public Object device_id;

		public Object getDevice_id() {
			return this.device_id;
		}

		public String device_join_id;

		public String getDevice_join_id() {
			return this.device_join_id;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public Boolean is_managed;

		public Boolean getIs_managed() {
			return this.is_managed;
		}

		public Boolean is_plugged;

		public Boolean getIs_plugged() {
			return this.is_plugged;
		}

		public Boolean is_readonly;

		public Boolean getIs_readonly() {
			return this.is_readonly;
		}

		public Integer vm_configuration_version;

		public Integer getVm_configuration_version() {
			return this.vm_configuration_version;
		}

		public Integer device_configuration_version;

		public Integer getDevice_configuration_version() {
			return this.device_configuration_version;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_id = (Object) dis.readObject();

					this.vm_join_id = readString(dis);

					this.device_id = (Object) dis.readObject();

					this.device_join_id = readString(dis);

					this.type = readString(dis);

					this.address = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_managed = null;
					} else {
						this.is_managed = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_plugged = null;
					} else {
						this.is_plugged = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.is_readonly = null;
					} else {
						this.is_readonly = dis.readBoolean();
					}

					this.vm_configuration_version = readInteger(dis);

					this.device_configuration_version = readInteger(dis);

					this.create_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.vm_id);

				// String

				writeString(this.vm_join_id, dos);

				// Object

				dos.writeObject(this.device_id);

				// String

				writeString(this.device_join_id, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.address, dos);

				// Boolean

				if (this.is_managed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_managed);
				}

				// Boolean

				if (this.is_plugged == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_plugged);
				}

				// Boolean

				if (this.is_readonly == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_readonly);
				}

				// Integer

				writeInteger(this.vm_configuration_version, dos);

				// Integer

				writeInteger(this.device_configuration_version, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_id=" + String.valueOf(vm_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append(",device_id=" + String.valueOf(device_id));
			sb.append(",device_join_id=" + device_join_id);
			sb.append(",type=" + type);
			sb.append(",address=" + address);
			sb.append(",is_managed=" + String.valueOf(is_managed));
			sb.append(",is_plugged=" + String.valueOf(is_plugged));
			sb.append(",is_readonly=" + String.valueOf(is_readonly));
			sb.append(",vm_configuration_version="
					+ String.valueOf(vm_configuration_version));
			sb.append(",device_configuration_version="
					+ String.valueOf(device_configuration_version));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_56Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_56Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_56_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_55Process(globalMap);

				row48Struct row48 = new row48Struct();
				delete_vm_device_connectionStruct delete_vm_device_connection = new delete_vm_device_connectionStruct();

				/**
				 * [tJDBCOutput_32 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_32", false);
				start_Hash.put("tJDBCOutput_32", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_32";

				int tos_count_tJDBCOutput_32 = 0;

				int nb_line_tJDBCOutput_32 = 0;
				int nb_line_update_tJDBCOutput_32 = 0;
				int nb_line_inserted_tJDBCOutput_32 = 0;
				int nb_line_deleted_tJDBCOutput_32 = 0;
				int nb_line_rejected_tJDBCOutput_32 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_32 = 0;

				int deletedCount_tJDBCOutput_32 = 0;
				int updatedCount_tJDBCOutput_32 = 0;
				int insertedCount_tJDBCOutput_32 = 0;
				int rejectedCount_tJDBCOutput_32 = 0;

				boolean whetherReject_tJDBCOutput_32 = false;

				java.sql.Connection connection_tJDBCOutput_32 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_32 = 10000;
				int batchSizeCounter_tJDBCOutput_32 = 0;

				String insert_tJDBCOutput_32 = "INSERT INTO "
						+ "vm_device_history"
						+ " (vm_id,device_id,type,address,is_managed,is_plugged,is_readonly,vm_configuration_version,device_configuration_version,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_32 = connection_tJDBCOutput_32
						.prepareStatement(insert_tJDBCOutput_32);

				/**
				 * [tJDBCOutput_32 begin ] stop
				 */

				/**
				 * [tMap_32 begin ] start
				 */

				ok_Hash.put("tMap_32", false);
				start_Hash.put("tMap_32", System.currentTimeMillis());

				currentComponent = "tMap_32";

				int tos_count_tMap_32 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct> tHash_Lookup_row47 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct>) globalMap
						.get("tHash_Lookup_row47"));

				row47Struct row47HashKey = new row47Struct();
				row47Struct row47Default = new row47Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_32__Struct {
				}
				Var__tMap_32__Struct Var__tMap_32 = new Var__tMap_32__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_vm_device_connectionStruct delete_vm_device_connection_tmp = new delete_vm_device_connectionStruct();
				// ###############################

				/**
				 * [tMap_32 begin ] stop
				 */

				/**
				 * [tJDBCInput_56 begin ] start
				 */

				ok_Hash.put("tJDBCInput_56", false);
				start_Hash.put("tJDBCInput_56", System.currentTimeMillis());

				currentComponent = "tJDBCInput_56";

				int tos_count_tJDBCInput_56 = 0;

				int nb_line_tJDBCInput_56 = 0;
				java.sql.Connection conn_tJDBCInput_56 = null;
				conn_tJDBCInput_56 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_56 = conn_tJDBCInput_56
						.createStatement();

				String dbquery_tJDBCInput_56 = "SELECT   vm_id,   upper(cast(vm_id as char(36))) as vm_join_id,   device_id,    upper(cast(device_id as char(36))) as device_join_id,   type,    address,    is_managed,    is_plugged,    is_readonly,    vm_configuration_version,    device_configuration_version,    create_date FROM v3_5_latest_configuration_vms_devices";

				globalMap.put("tJDBCInput_56_QUERY", dbquery_tJDBCInput_56);
				java.sql.ResultSet rs_tJDBCInput_56 = null;
				try {
					rs_tJDBCInput_56 = stmt_tJDBCInput_56
							.executeQuery(dbquery_tJDBCInput_56);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_56 = rs_tJDBCInput_56
							.getMetaData();
					int colQtyInRs_tJDBCInput_56 = rsmd_tJDBCInput_56
							.getColumnCount();

					String tmpContent_tJDBCInput_56 = null;
					int column_index_tJDBCInput_56 = 1;

					while (rs_tJDBCInput_56.next()) {
						nb_line_tJDBCInput_56++;

						column_index_tJDBCInput_56 = 1;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.vm_id = null;
						} else {

							if (rs_tJDBCInput_56
									.getObject(column_index_tJDBCInput_56) != null) {
								row48.vm_id = rs_tJDBCInput_56
										.getObject(column_index_tJDBCInput_56);
							} else {
								row48.vm_id = null;
							}

						}

						column_index_tJDBCInput_56 = 2;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_56 = rs_tJDBCInput_56
									.getString(column_index_tJDBCInput_56);
							if (tmpContent_tJDBCInput_56 != null) {
								row48.vm_join_id = tmpContent_tJDBCInput_56;
							} else {
								row48.vm_join_id = null;
							}

						}

						column_index_tJDBCInput_56 = 3;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.device_id = null;
						} else {

							if (rs_tJDBCInput_56
									.getObject(column_index_tJDBCInput_56) != null) {
								row48.device_id = rs_tJDBCInput_56
										.getObject(column_index_tJDBCInput_56);
							} else {
								row48.device_id = null;
							}

						}

						column_index_tJDBCInput_56 = 4;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.device_join_id = null;
						} else {

							tmpContent_tJDBCInput_56 = rs_tJDBCInput_56
									.getString(column_index_tJDBCInput_56);
							if (tmpContent_tJDBCInput_56 != null) {
								row48.device_join_id = tmpContent_tJDBCInput_56;
							} else {
								row48.device_join_id = null;
							}

						}

						column_index_tJDBCInput_56 = 5;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.type = null;
						} else {

							tmpContent_tJDBCInput_56 = rs_tJDBCInput_56
									.getString(column_index_tJDBCInput_56);
							if (tmpContent_tJDBCInput_56 != null) {
								row48.type = tmpContent_tJDBCInput_56;
							} else {
								row48.type = null;
							}

						}

						column_index_tJDBCInput_56 = 6;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.address = null;
						} else {

							tmpContent_tJDBCInput_56 = rs_tJDBCInput_56
									.getString(column_index_tJDBCInput_56);
							if (tmpContent_tJDBCInput_56 != null) {
								row48.address = tmpContent_tJDBCInput_56;
							} else {
								row48.address = null;
							}

						}

						column_index_tJDBCInput_56 = 7;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.is_managed = null;
						} else {

							if (rs_tJDBCInput_56
									.getObject(column_index_tJDBCInput_56) != null) {
								row48.is_managed = rs_tJDBCInput_56
										.getBoolean(column_index_tJDBCInput_56);
							} else {
								row48.is_managed = null;
							}

						}

						column_index_tJDBCInput_56 = 8;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.is_plugged = null;
						} else {

							if (rs_tJDBCInput_56
									.getObject(column_index_tJDBCInput_56) != null) {
								row48.is_plugged = rs_tJDBCInput_56
										.getBoolean(column_index_tJDBCInput_56);
							} else {
								row48.is_plugged = null;
							}

						}

						column_index_tJDBCInput_56 = 9;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.is_readonly = null;
						} else {

							if (rs_tJDBCInput_56
									.getObject(column_index_tJDBCInput_56) != null) {
								row48.is_readonly = rs_tJDBCInput_56
										.getBoolean(column_index_tJDBCInput_56);
							} else {
								row48.is_readonly = null;
							}

						}

						column_index_tJDBCInput_56 = 10;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.vm_configuration_version = null;
						} else {

							if (rs_tJDBCInput_56
									.getObject(column_index_tJDBCInput_56) != null) {
								row48.vm_configuration_version = rs_tJDBCInput_56
										.getInt(column_index_tJDBCInput_56);
							} else {
								row48.vm_configuration_version = null;
							}

						}

						column_index_tJDBCInput_56 = 11;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.device_configuration_version = null;
						} else {

							if (rs_tJDBCInput_56
									.getObject(column_index_tJDBCInput_56) != null) {
								row48.device_configuration_version = rs_tJDBCInput_56
										.getInt(column_index_tJDBCInput_56);
							} else {
								row48.device_configuration_version = null;
							}

						}

						column_index_tJDBCInput_56 = 12;

						if (colQtyInRs_tJDBCInput_56 < column_index_tJDBCInput_56) {
							row48.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_56 = null;
							try {
								date_tJDBCInput_56 = rs_tJDBCInput_56
										.getTimestamp(column_index_tJDBCInput_56);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_56 = rs_tJDBCInput_56
										.getDate(column_index_tJDBCInput_56);
							}
							row48.create_date = date_tJDBCInput_56;

						}

						/**
						 * [tJDBCInput_56 begin ] stop
						 */
						/**
						 * [tJDBCInput_56 main ] start
						 */

						currentComponent = "tJDBCInput_56";

						tos_count_tJDBCInput_56++;

						/**
						 * [tJDBCInput_56 main ] stop
						 */

						/**
						 * [tMap_32 main ] start
						 */

						currentComponent = "tMap_32";

						boolean hasCasePrimitiveKeyWithNull_tMap_32 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_32 = false;
						boolean mainRowRejected_tMap_32 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row47"
						// /////////////////////////////////////////////

						boolean forceLooprow47 = false;

						row47Struct row47ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_32) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_32 = false;

							row47HashKey.device_join_id = row48.device_join_id;

							row47HashKey.vm_join_id = row48.vm_join_id;

							row47HashKey.hashCodeDirty = true;

							tHash_Lookup_row47.lookup(row47HashKey);

							if (!tHash_Lookup_row47.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_32 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row47 != null
								&& tHash_Lookup_row47.getCount(row47HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row47' and it contains more one result from keys :  row47.device_join_id = '"
							// + row47HashKey.device_join_id +
							// "', row47.vm_join_id = '" +
							// row47HashKey.vm_join_id + "'");
						} // G 071

						row47Struct row47 = null;

						row47Struct fromLookup_row47 = null;
						row47 = row47Default;

						if (tHash_Lookup_row47 != null
								&& tHash_Lookup_row47.hasNext()) { // G 099

							fromLookup_row47 = tHash_Lookup_row47.next();

						} // G 099

						if (fromLookup_row47 != null) {
							row47 = fromLookup_row47;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_32__Struct Var = Var__tMap_32;// ###############################
							// ###############################
							// # Output tables

							delete_vm_device_connection = null;

							if (!rejectedInnerJoin_tMap_32) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table :
							// 'delete_vm_device_connection'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_32) {
								delete_vm_device_connection_tmp.vm_id = row48.vm_id;
								delete_vm_device_connection_tmp.device_id = row48.device_id;
								delete_vm_device_connection_tmp.type = row48.type;
								delete_vm_device_connection_tmp.address = row48.address;
								delete_vm_device_connection_tmp.is_managed = row48.is_managed;
								delete_vm_device_connection_tmp.is_plugged = row48.is_plugged;
								delete_vm_device_connection_tmp.is_readonly = row48.is_readonly;
								delete_vm_device_connection_tmp.vm_configuration_version = row48.vm_configuration_version;
								delete_vm_device_connection_tmp.device_configuration_version = row48.device_configuration_version;
								delete_vm_device_connection_tmp.create_date = row48.create_date;
								delete_vm_device_connection_tmp.update_date = context.runTime;
								delete_vm_device_connection_tmp.delete_date = context.runTime;
								delete_vm_device_connection = delete_vm_device_connection_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_32 = false;

						tos_count_tMap_32++;

						/**
						 * [tMap_32 main ] stop
						 */
						// Start of branch "delete_vm_device_connection"
						if (delete_vm_device_connection != null) {

							/**
							 * [tJDBCOutput_32 main ] start
							 */

							currentComponent = "tJDBCOutput_32";

							whetherReject_tJDBCOutput_32 = false;
							if (delete_vm_device_connection.vm_id == null) {
								pstmt_tJDBCOutput_32.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_32.setObject(1,
										delete_vm_device_connection.vm_id);
							}

							if (delete_vm_device_connection.device_id == null) {
								pstmt_tJDBCOutput_32.setNull(2,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_32.setObject(2,
										delete_vm_device_connection.device_id);
							}

							if (delete_vm_device_connection.type == null) {
								pstmt_tJDBCOutput_32.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_32.setString(3,
										delete_vm_device_connection.type);
							}

							if (delete_vm_device_connection.address == null) {
								pstmt_tJDBCOutput_32.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_32.setString(4,
										delete_vm_device_connection.address);
							}

							pstmt_tJDBCOutput_32.setBoolean(5,
									delete_vm_device_connection.is_managed);

							if (delete_vm_device_connection.is_plugged == null) {
								pstmt_tJDBCOutput_32.setNull(6,
										java.sql.Types.BOOLEAN);
							} else {
								pstmt_tJDBCOutput_32.setBoolean(6,
										delete_vm_device_connection.is_plugged);
							}

							pstmt_tJDBCOutput_32.setBoolean(7,
									delete_vm_device_connection.is_readonly);

							if (delete_vm_device_connection.vm_configuration_version == null) {
								pstmt_tJDBCOutput_32.setNull(8,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_32
										.setInt(8,
												delete_vm_device_connection.vm_configuration_version);
							}

							if (delete_vm_device_connection.device_configuration_version == null) {
								pstmt_tJDBCOutput_32.setNull(9,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tJDBCOutput_32
										.setInt(9,
												delete_vm_device_connection.device_configuration_version);
							}

							if (delete_vm_device_connection.create_date != null) {
								pstmt_tJDBCOutput_32
										.setTimestamp(
												10,
												new java.sql.Timestamp(
														delete_vm_device_connection.create_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_32.setNull(10,
										java.sql.Types.DATE);
							}

							if (delete_vm_device_connection.update_date != null) {
								pstmt_tJDBCOutput_32
										.setTimestamp(
												11,
												new java.sql.Timestamp(
														delete_vm_device_connection.update_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_32.setNull(11,
										java.sql.Types.DATE);
							}

							if (delete_vm_device_connection.delete_date != null) {
								pstmt_tJDBCOutput_32
										.setTimestamp(
												12,
												new java.sql.Timestamp(
														delete_vm_device_connection.delete_date
																.getTime()));
							} else {
								pstmt_tJDBCOutput_32.setNull(12,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tJDBCOutput_32 = insertedCount_tJDBCOutput_32
										+ pstmt_tJDBCOutput_32.executeUpdate();
								nb_line_tJDBCOutput_32++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_32 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_32++;

							/**
							 * [tJDBCOutput_32 main ] stop
							 */

						} // End of branch "delete_vm_device_connection"

						/**
						 * [tJDBCInput_56 end ] start
						 */

						currentComponent = "tJDBCInput_56";

					}
				} finally {
					rs_tJDBCInput_56.close();
					stmt_tJDBCInput_56.close();

				}
				globalMap.put("tJDBCInput_56_NB_LINE", nb_line_tJDBCInput_56);

				ok_Hash.put("tJDBCInput_56", true);
				end_Hash.put("tJDBCInput_56", System.currentTimeMillis());

				/**
				 * [tJDBCInput_56 end ] stop
				 */

				/**
				 * [tMap_32 end ] start
				 */

				currentComponent = "tMap_32";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row47 != null) {
					tHash_Lookup_row47.endGet();
				}
				globalMap.remove("tHash_Lookup_row47");

				// ###############################

				ok_Hash.put("tMap_32", true);
				end_Hash.put("tMap_32", System.currentTimeMillis());

				/**
				 * [tMap_32 end ] stop
				 */

				/**
				 * [tJDBCOutput_32 end ] start
				 */

				currentComponent = "tJDBCOutput_32";

				if (pstmt_tJDBCOutput_32 != null) {

					pstmt_tJDBCOutput_32.close();

				}

				nb_line_deleted_tJDBCOutput_32 = nb_line_deleted_tJDBCOutput_32
						+ deletedCount_tJDBCOutput_32;
				nb_line_update_tJDBCOutput_32 = nb_line_update_tJDBCOutput_32
						+ updatedCount_tJDBCOutput_32;
				nb_line_inserted_tJDBCOutput_32 = nb_line_inserted_tJDBCOutput_32
						+ insertedCount_tJDBCOutput_32;
				nb_line_rejected_tJDBCOutput_32 = nb_line_rejected_tJDBCOutput_32
						+ rejectedCount_tJDBCOutput_32;

				globalMap.put("tJDBCOutput_32_NB_LINE", nb_line_tJDBCOutput_32);
				globalMap.put("tJDBCOutput_32_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_32);
				globalMap.put("tJDBCOutput_32_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_32);
				globalMap.put("tJDBCOutput_32_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_32);
				globalMap.put("tJDBCOutput_32_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_32);

				ok_Hash.put("tJDBCOutput_32", true);
				end_Hash.put("tJDBCOutput_32", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_32 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_56:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_45Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_32"
			globalMap.remove("tHash_Lookup_row47");

			try {

				/**
				 * [tJDBCInput_56 finally ] start
				 */

				currentComponent = "tJDBCInput_56";

				/**
				 * [tJDBCInput_56 finally ] stop
				 */

				/**
				 * [tMap_32 finally ] start
				 */

				currentComponent = "tMap_32";

				/**
				 * [tMap_32 finally ] stop
				 */

				/**
				 * [tJDBCOutput_32 finally ] start
				 */

				currentComponent = "tJDBCOutput_32";

				/**
				 * [tJDBCOutput_32 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_56_SUBPROCESS_STATE", 1);
	}

	public static class new_tag_relationsStruct implements
			routines.system.IPersistableRow<new_tag_relationsStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object entity_id;

		public Object getEntity_id() {
			return this.entity_id;
		}

		public short entity_type;

		public short getEntity_type() {
			return this.entity_type;
		}

		public Object parent_id;

		public Object getParent_id() {
			return this.parent_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		public java.util.Date detach_date;

		public java.util.Date getDetach_date() {
			return this.detach_date;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.entity_id = (Object) dis.readObject();

					this.entity_type = dis.readShort();

					this.parent_id = (Object) dis.readObject();

					this.attach_date = readDate(dis);

					this.detach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.entity_id);

				// short

				dos.writeShort(this.entity_type);

				// Object

				dos.writeObject(this.parent_id);

				// java.util.Date

				writeDate(this.attach_date, dos);

				// java.util.Date

				writeDate(this.detach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entity_id=" + String.valueOf(entity_id));
			sb.append(",entity_type=" + String.valueOf(entity_type));
			sb.append(",parent_id=" + String.valueOf(parent_id));
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append(",detach_date=" + String.valueOf(detach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(new_tag_relationsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object entity_id;

		public Object getEntity_id() {
			return this.entity_id;
		}

		public String entity_join_id;

		public String getEntity_join_id() {
			return this.entity_join_id;
		}

		public Short entity_type;

		public Short getEntity_type() {
			return this.entity_type;
		}

		public Object parent_id;

		public Object getParent_id() {
			return this.parent_id;
		}

		public String parent_join_id;

		public String getParent_join_id() {
			return this.parent_join_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		public java.util.Date move_date;

		public java.util.Date getMove_date() {
			return this.move_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.entity_id = (Object) dis.readObject();

					this.entity_join_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.entity_type = null;
					} else {
						this.entity_type = dis.readShort();
					}

					this.parent_id = (Object) dis.readObject();

					this.parent_join_id = readString(dis);

					this.attach_date = readDate(dis);

					this.move_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.entity_id);

				// String

				writeString(this.entity_join_id, dos);

				// Short

				if (this.entity_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.entity_type);
				}

				// Object

				dos.writeObject(this.parent_id);

				// String

				writeString(this.parent_join_id, dos);

				// java.util.Date

				writeDate(this.attach_date, dos);

				// java.util.Date

				writeDate(this.move_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entity_id=" + String.valueOf(entity_id));
			sb.append(",entity_join_id=" + entity_join_id);
			sb.append(",entity_type=" + String.valueOf(entity_type));
			sb.append(",parent_id=" + String.valueOf(parent_id));
			sb.append(",parent_join_id=" + parent_join_id);
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append(",move_date=" + String.valueOf(move_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_45Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_45Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object entity_id;

		public Object getEntity_id() {
			return this.entity_id;
		}

		public String entity_join_id;

		public String getEntity_join_id() {
			return this.entity_join_id;
		}

		public Short entity_type;

		public Short getEntity_type() {
			return this.entity_type;
		}

		public Object parent_id;

		public Object getParent_id() {
			return this.parent_id;
		}

		public String parent_join_id;

		public String getParent_join_id() {
			return this.parent_join_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		public java.util.Date move_date;

		public java.util.Date getMove_date() {
			return this.move_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.entity_id = (Object) dis.readObject();

					this.entity_join_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.entity_type = null;
					} else {
						this.entity_type = dis.readShort();
					}

					this.parent_id = (Object) dis.readObject();

					this.parent_join_id = readString(dis);

					this.attach_date = readDate(dis);

					this.move_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.entity_id);

				// String

				writeString(this.entity_join_id, dos);

				// Short

				if (this.entity_type == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.entity_type);
				}

				// Object

				dos.writeObject(this.parent_id);

				// String

				writeString(this.parent_join_id, dos);

				// java.util.Date

				writeDate(this.attach_date, dos);

				// java.util.Date

				writeDate(this.move_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entity_id=" + String.valueOf(entity_id));
			sb.append(",entity_join_id=" + entity_join_id);
			sb.append(",entity_type=" + String.valueOf(entity_type));
			sb.append(",parent_id=" + String.valueOf(parent_id));
			sb.append(",parent_join_id=" + parent_join_id);
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append(",move_date=" + String.valueOf(move_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_45Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_45_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_58Process(globalMap);

				row9Struct row9 = new row9Struct();
				new_tag_relationsStruct new_tag_relations = new new_tag_relationsStruct();

				/**
				 * [tJDBCOutput_26 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_26", false);
				start_Hash.put("tJDBCOutput_26", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_26";

				int tos_count_tJDBCOutput_26 = 0;

				int nb_line_tJDBCOutput_26 = 0;
				int nb_line_update_tJDBCOutput_26 = 0;
				int nb_line_inserted_tJDBCOutput_26 = 0;
				int nb_line_deleted_tJDBCOutput_26 = 0;
				int nb_line_rejected_tJDBCOutput_26 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_26 = 0;

				int deletedCount_tJDBCOutput_26 = 0;
				int updatedCount_tJDBCOutput_26 = 0;
				int insertedCount_tJDBCOutput_26 = 0;
				int rejectedCount_tJDBCOutput_26 = 0;

				boolean whetherReject_tJDBCOutput_26 = false;

				java.sql.Connection connection_tJDBCOutput_26 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_26 = 10000;
				int batchSizeCounter_tJDBCOutput_26 = 0;

				String insert_tJDBCOutput_26 = "INSERT INTO "
						+ "tag_relations_history"
						+ " (entity_id,entity_type,parent_id,attach_date,detach_date) VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_26 = connection_tJDBCOutput_26
						.prepareStatement(insert_tJDBCOutput_26);

				/**
				 * [tJDBCOutput_26 begin ] stop
				 */

				/**
				 * [tMap_26 begin ] start
				 */

				ok_Hash.put("tMap_26", false);
				start_Hash.put("tMap_26", System.currentTimeMillis());

				currentComponent = "tMap_26";

				int tos_count_tMap_26 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) globalMap
						.get("tHash_Lookup_row34"));

				row34Struct row34HashKey = new row34Struct();
				row34Struct row34Default = new row34Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_26__Struct {
				}
				Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				new_tag_relationsStruct new_tag_relations_tmp = new new_tag_relationsStruct();
				// ###############################

				/**
				 * [tMap_26 begin ] stop
				 */

				/**
				 * [tJDBCInput_45 begin ] start
				 */

				ok_Hash.put("tJDBCInput_45", false);
				start_Hash.put("tJDBCInput_45", System.currentTimeMillis());

				currentComponent = "tJDBCInput_45";

				int tos_count_tJDBCInput_45 = 0;

				int nb_line_tJDBCInput_45 = 0;
				java.sql.Connection conn_tJDBCInput_45 = null;
				conn_tJDBCInput_45 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_45 = conn_tJDBCInput_45
						.createStatement();

				String dbquery_tJDBCInput_45 = "SELECT entity_id,   		upper(cast(entity_id as char(36))) as entity_join_id, 		entity_type, 		parent_id,   		upper(cast(parent_id as char(36))) as parent_join_id, 		attach_date, 		move_date FROM	dwh_add_tags_relations_history_view";

				globalMap.put("tJDBCInput_45_QUERY", dbquery_tJDBCInput_45);
				java.sql.ResultSet rs_tJDBCInput_45 = null;
				try {
					rs_tJDBCInput_45 = stmt_tJDBCInput_45
							.executeQuery(dbquery_tJDBCInput_45);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_45 = rs_tJDBCInput_45
							.getMetaData();
					int colQtyInRs_tJDBCInput_45 = rsmd_tJDBCInput_45
							.getColumnCount();

					String tmpContent_tJDBCInput_45 = null;
					int column_index_tJDBCInput_45 = 1;

					while (rs_tJDBCInput_45.next()) {
						nb_line_tJDBCInput_45++;

						column_index_tJDBCInput_45 = 1;

						if (colQtyInRs_tJDBCInput_45 < column_index_tJDBCInput_45) {
							row9.entity_id = null;
						} else {

							if (rs_tJDBCInput_45
									.getObject(column_index_tJDBCInput_45) != null) {
								row9.entity_id = rs_tJDBCInput_45
										.getObject(column_index_tJDBCInput_45);
							} else {
								row9.entity_id = null;
							}

						}

						column_index_tJDBCInput_45 = 2;

						if (colQtyInRs_tJDBCInput_45 < column_index_tJDBCInput_45) {
							row9.entity_join_id = null;
						} else {

							tmpContent_tJDBCInput_45 = rs_tJDBCInput_45
									.getString(column_index_tJDBCInput_45);
							if (tmpContent_tJDBCInput_45 != null) {
								row9.entity_join_id = tmpContent_tJDBCInput_45;
							} else {
								row9.entity_join_id = null;
							}

						}

						column_index_tJDBCInput_45 = 3;

						if (colQtyInRs_tJDBCInput_45 < column_index_tJDBCInput_45) {
							row9.entity_type = null;
						} else {

							if (rs_tJDBCInput_45
									.getObject(column_index_tJDBCInput_45) != null) {
								row9.entity_type = rs_tJDBCInput_45
										.getShort(column_index_tJDBCInput_45);
							} else {
								row9.entity_type = null;
							}

						}

						column_index_tJDBCInput_45 = 4;

						if (colQtyInRs_tJDBCInput_45 < column_index_tJDBCInput_45) {
							row9.parent_id = null;
						} else {

							if (rs_tJDBCInput_45
									.getObject(column_index_tJDBCInput_45) != null) {
								row9.parent_id = rs_tJDBCInput_45
										.getObject(column_index_tJDBCInput_45);
							} else {
								row9.parent_id = null;
							}

						}

						column_index_tJDBCInput_45 = 5;

						if (colQtyInRs_tJDBCInput_45 < column_index_tJDBCInput_45) {
							row9.parent_join_id = null;
						} else {

							tmpContent_tJDBCInput_45 = rs_tJDBCInput_45
									.getString(column_index_tJDBCInput_45);
							if (tmpContent_tJDBCInput_45 != null) {
								row9.parent_join_id = tmpContent_tJDBCInput_45;
							} else {
								row9.parent_join_id = null;
							}

						}

						column_index_tJDBCInput_45 = 6;

						if (colQtyInRs_tJDBCInput_45 < column_index_tJDBCInput_45) {
							row9.attach_date = null;
						} else {

							java.util.Date date_tJDBCInput_45 = null;
							try {
								date_tJDBCInput_45 = rs_tJDBCInput_45
										.getTimestamp(column_index_tJDBCInput_45);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_45 = rs_tJDBCInput_45
										.getDate(column_index_tJDBCInput_45);
							}
							row9.attach_date = date_tJDBCInput_45;

						}

						column_index_tJDBCInput_45 = 7;

						if (colQtyInRs_tJDBCInput_45 < column_index_tJDBCInput_45) {
							row9.move_date = null;
						} else {

							java.util.Date date_tJDBCInput_45 = null;
							try {
								date_tJDBCInput_45 = rs_tJDBCInput_45
										.getTimestamp(column_index_tJDBCInput_45);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_45 = rs_tJDBCInput_45
										.getDate(column_index_tJDBCInput_45);
							}
							row9.move_date = date_tJDBCInput_45;

						}

						/**
						 * [tJDBCInput_45 begin ] stop
						 */
						/**
						 * [tJDBCInput_45 main ] start
						 */

						currentComponent = "tJDBCInput_45";

						tos_count_tJDBCInput_45++;

						/**
						 * [tJDBCInput_45 main ] stop
						 */

						/**
						 * [tMap_26 main ] start
						 */

						currentComponent = "tMap_26";

						boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_26 = false;
						boolean mainRowRejected_tMap_26 = false;

						if (

						(

						row9.move_date == null ? TalendDate.compareDate(
								row9.attach_date, context.runTime) <= 0
								: TalendDate.compareDate(row9.move_date,
										context.runTime) <= 0

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row9'

							// /////////////////////////////////////////////
							// Starting Lookup Table "row34"
							// /////////////////////////////////////////////

							boolean forceLooprow34 = false;

							row34Struct row34ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_26) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_26 = false;

								row34HashKey.entity_join_id = row9.entity_join_id;

								row34HashKey.parent_join_id = row9.parent_join_id;

								row34HashKey.hashCodeDirty = true;

								tHash_Lookup_row34.lookup(row34HashKey);

								if (!tHash_Lookup_row34.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_26 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row34 != null
									&& tHash_Lookup_row34
											.getCount(row34HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row34' and it contains more one result from keys :  row34.entity_join_id = '"
								// + row34HashKey.entity_join_id +
								// "', row34.parent_join_id = '" +
								// row34HashKey.parent_join_id + "'");
							} // G 071

							row34Struct row34 = null;

							row34Struct fromLookup_row34 = null;
							row34 = row34Default;

							if (tHash_Lookup_row34 != null
									&& tHash_Lookup_row34.hasNext()) { // G 099

								fromLookup_row34 = tHash_Lookup_row34.next();

							} // G 099

							if (fromLookup_row34 != null) {
								row34 = fromLookup_row34;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_26__Struct Var = Var__tMap_26;// ###############################
								// ###############################
								// # Output tables

								new_tag_relations = null;

								if (!rejectedInnerJoin_tMap_26) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'new_tag_relations'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_26) {
									new_tag_relations_tmp.entity_id = row9.entity_id;
									new_tag_relations_tmp.entity_type = row9.entity_type;
									new_tag_relations_tmp.parent_id = row9.parent_id;
									new_tag_relations_tmp.attach_date = row9.move_date == null ? row9.attach_date
											: row9.move_date;
									new_tag_relations_tmp.detach_date = null;
									new_tag_relations = new_tag_relations_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_26 = false;

							tos_count_tMap_26++;

							/**
							 * [tMap_26 main ] stop
							 */
							// Start of branch "new_tag_relations"
							if (new_tag_relations != null) {

								/**
								 * [tJDBCOutput_26 main ] start
								 */

								currentComponent = "tJDBCOutput_26";

								whetherReject_tJDBCOutput_26 = false;
								if (new_tag_relations.entity_id == null) {
									pstmt_tJDBCOutput_26.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_26.setObject(1,
											new_tag_relations.entity_id);
								}

								pstmt_tJDBCOutput_26.setShort(2,
										new_tag_relations.entity_type);

								if (new_tag_relations.parent_id == null) {
									pstmt_tJDBCOutput_26.setNull(3,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_26.setObject(3,
											new_tag_relations.parent_id);
								}

								if (new_tag_relations.attach_date != null) {
									pstmt_tJDBCOutput_26
											.setTimestamp(
													4,
													new java.sql.Timestamp(
															new_tag_relations.attach_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_26.setNull(4,
											java.sql.Types.DATE);
								}

								if (new_tag_relations.detach_date != null) {
									pstmt_tJDBCOutput_26
											.setTimestamp(
													5,
													new java.sql.Timestamp(
															new_tag_relations.detach_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_26.setNull(5,
											java.sql.Types.DATE);
								}

								try {
									insertedCount_tJDBCOutput_26 = insertedCount_tJDBCOutput_26
											+ pstmt_tJDBCOutput_26
													.executeUpdate();
									nb_line_tJDBCOutput_26++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_26 = true;
									throw (e);
								}

								tos_count_tJDBCOutput_26++;

								/**
								 * [tJDBCOutput_26 main ] stop
								 */

							} // End of branch "new_tag_relations"

						} // G_TM_M_280 close main tMap filter for table 'row9'

						/**
						 * [tJDBCInput_45 end ] start
						 */

						currentComponent = "tJDBCInput_45";

					}
				} finally {
					rs_tJDBCInput_45.close();
					stmt_tJDBCInput_45.close();

				}
				globalMap.put("tJDBCInput_45_NB_LINE", nb_line_tJDBCInput_45);

				ok_Hash.put("tJDBCInput_45", true);
				end_Hash.put("tJDBCInput_45", System.currentTimeMillis());

				/**
				 * [tJDBCInput_45 end ] stop
				 */

				/**
				 * [tMap_26 end ] start
				 */

				currentComponent = "tMap_26";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row34 != null) {
					tHash_Lookup_row34.endGet();
				}
				globalMap.remove("tHash_Lookup_row34");

				// ###############################

				ok_Hash.put("tMap_26", true);
				end_Hash.put("tMap_26", System.currentTimeMillis());

				/**
				 * [tMap_26 end ] stop
				 */

				/**
				 * [tJDBCOutput_26 end ] start
				 */

				currentComponent = "tJDBCOutput_26";

				if (pstmt_tJDBCOutput_26 != null) {

					pstmt_tJDBCOutput_26.close();

				}

				nb_line_deleted_tJDBCOutput_26 = nb_line_deleted_tJDBCOutput_26
						+ deletedCount_tJDBCOutput_26;
				nb_line_update_tJDBCOutput_26 = nb_line_update_tJDBCOutput_26
						+ updatedCount_tJDBCOutput_26;
				nb_line_inserted_tJDBCOutput_26 = nb_line_inserted_tJDBCOutput_26
						+ insertedCount_tJDBCOutput_26;
				nb_line_rejected_tJDBCOutput_26 = nb_line_rejected_tJDBCOutput_26
						+ rejectedCount_tJDBCOutput_26;

				globalMap.put("tJDBCOutput_26_NB_LINE", nb_line_tJDBCOutput_26);
				globalMap.put("tJDBCOutput_26_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_26);
				globalMap.put("tJDBCOutput_26_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_26);
				globalMap.put("tJDBCOutput_26_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_26);
				globalMap.put("tJDBCOutput_26_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_26);

				ok_Hash.put("tJDBCOutput_26", true);
				end_Hash.put("tJDBCOutput_26", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_26 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_45:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_48Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_26"
			globalMap.remove("tHash_Lookup_row34");

			try {

				/**
				 * [tJDBCInput_45 finally ] start
				 */

				currentComponent = "tJDBCInput_45";

				/**
				 * [tJDBCInput_45 finally ] stop
				 */

				/**
				 * [tMap_26 finally ] start
				 */

				currentComponent = "tMap_26";

				/**
				 * [tMap_26 finally ] stop
				 */

				/**
				 * [tJDBCOutput_26 finally ] start
				 */

				currentComponent = "tJDBCOutput_26";

				/**
				 * [tJDBCOutput_26 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_45_SUBPROCESS_STATE", 1);
	}

	public static class detach_tagsStruct implements
			routines.system.IPersistableRow<detach_tagsStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Object entity_id;

		public Object getEntity_id() {
			return this.entity_id;
		}

		public short entity_type;

		public short getEntity_type() {
			return this.entity_type;
		}

		public Object parent_id;

		public Object getParent_id() {
			return this.parent_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		public java.util.Date detach_date;

		public java.util.Date getDetach_date() {
			return this.detach_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.entity_id == null) ? 0 : this.entity_id
								.hashCode());

				result = prime
						* result
						+ ((this.parent_id == null) ? 0 : this.parent_id
								.hashCode());

				result = prime
						* result
						+ ((this.attach_date == null) ? 0 : this.attach_date
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final detach_tagsStruct other = (detach_tagsStruct) obj;

			if (this.entity_id == null) {
				if (other.entity_id != null)
					return false;

			} else if (!this.entity_id.equals(other.entity_id))

				return false;

			if (this.parent_id == null) {
				if (other.parent_id != null)
					return false;

			} else if (!this.parent_id.equals(other.parent_id))

				return false;

			if (this.attach_date == null) {
				if (other.attach_date != null)
					return false;

			} else if (!this.attach_date.equals(other.attach_date))

				return false;

			return true;
		}

		public void copyDataTo(detach_tagsStruct other) {

			other.entity_id = this.entity_id;
			other.entity_type = this.entity_type;
			other.parent_id = this.parent_id;
			other.attach_date = this.attach_date;
			other.detach_date = this.detach_date;

		}

		public void copyKeysDataTo(detach_tagsStruct other) {

			other.entity_id = this.entity_id;
			other.parent_id = this.parent_id;
			other.attach_date = this.attach_date;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.entity_id = (Object) dis.readObject();

					this.entity_type = dis.readShort();

					this.parent_id = (Object) dis.readObject();

					this.attach_date = readDate(dis);

					this.detach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.entity_id);

				// short

				dos.writeShort(this.entity_type);

				// Object

				dos.writeObject(this.parent_id);

				// java.util.Date

				writeDate(this.attach_date, dos);

				// java.util.Date

				writeDate(this.detach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entity_id=" + String.valueOf(entity_id));
			sb.append(",entity_type=" + String.valueOf(entity_type));
			sb.append(",parent_id=" + String.valueOf(parent_id));
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append(",detach_date=" + String.valueOf(detach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(detach_tagsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.entity_id, other.entity_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.parent_id, other.parent_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.attach_date,
					other.attach_date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object entity_id;

		public Object getEntity_id() {
			return this.entity_id;
		}

		public String entity_join_id;

		public String getEntity_join_id() {
			return this.entity_join_id;
		}

		public short entity_type;

		public short getEntity_type() {
			return this.entity_type;
		}

		public Object parent_id;

		public Object getParent_id() {
			return this.parent_id;
		}

		public String parent_join_id;

		public String getParent_join_id() {
			return this.parent_join_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		public java.util.Date detach_date;

		public java.util.Date getDetach_date() {
			return this.detach_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.entity_id = (Object) dis.readObject();

					this.entity_join_id = readString(dis);

					this.entity_type = dis.readShort();

					this.parent_id = (Object) dis.readObject();

					this.parent_join_id = readString(dis);

					this.attach_date = readDate(dis);

					this.detach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.entity_id);

				// String

				writeString(this.entity_join_id, dos);

				// short

				dos.writeShort(this.entity_type);

				// Object

				dos.writeObject(this.parent_id);

				// String

				writeString(this.parent_join_id, dos);

				// java.util.Date

				writeDate(this.attach_date, dos);

				// java.util.Date

				writeDate(this.detach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",entity_id=" + String.valueOf(entity_id));
			sb.append(",entity_join_id=" + entity_join_id);
			sb.append(",entity_type=" + String.valueOf(entity_type));
			sb.append(",parent_id=" + String.valueOf(parent_id));
			sb.append(",parent_join_id=" + parent_join_id);
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append(",detach_date=" + String.valueOf(detach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_48Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_48Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public Object entity_id;

		public Object getEntity_id() {
			return this.entity_id;
		}

		public String entity_join_id;

		public String getEntity_join_id() {
			return this.entity_join_id;
		}

		public short entity_type;

		public short getEntity_type() {
			return this.entity_type;
		}

		public Object parent_id;

		public Object getParent_id() {
			return this.parent_id;
		}

		public String parent_join_id;

		public String getParent_join_id() {
			return this.parent_join_id;
		}

		public java.util.Date attach_date;

		public java.util.Date getAttach_date() {
			return this.attach_date;
		}

		public java.util.Date detach_date;

		public java.util.Date getDetach_date() {
			return this.detach_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.history_id = readInteger(dis);

					this.entity_id = (Object) dis.readObject();

					this.entity_join_id = readString(dis);

					this.entity_type = dis.readShort();

					this.parent_id = (Object) dis.readObject();

					this.parent_join_id = readString(dis);

					this.attach_date = readDate(dis);

					this.detach_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.history_id, dos);

				// Object

				dos.writeObject(this.entity_id);

				// String

				writeString(this.entity_join_id, dos);

				// short

				dos.writeShort(this.entity_type);

				// Object

				dos.writeObject(this.parent_id);

				// String

				writeString(this.parent_join_id, dos);

				// java.util.Date

				writeDate(this.attach_date, dos);

				// java.util.Date

				writeDate(this.detach_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",entity_id=" + String.valueOf(entity_id));
			sb.append(",entity_join_id=" + entity_join_id);
			sb.append(",entity_type=" + String.valueOf(entity_type));
			sb.append(",parent_id=" + String.valueOf(parent_id));
			sb.append(",parent_join_id=" + parent_join_id);
			sb.append(",attach_date=" + String.valueOf(attach_date));
			sb.append(",detach_date=" + String.valueOf(detach_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_48Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_48_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_47Process(globalMap);

				row12Struct row12 = new row12Struct();
				detach_tagsStruct detach_tags = new detach_tagsStruct();

				/**
				 * [tJDBCOutput_27 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_27", false);
				start_Hash.put("tJDBCOutput_27", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_27";

				int tos_count_tJDBCOutput_27 = 0;

				int updateKeyCount_tJDBCOutput_27 = 3;
				if (updateKeyCount_tJDBCOutput_27 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_27 = 0;
				int nb_line_update_tJDBCOutput_27 = 0;
				int nb_line_inserted_tJDBCOutput_27 = 0;
				int nb_line_deleted_tJDBCOutput_27 = 0;
				int nb_line_rejected_tJDBCOutput_27 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_27 = 0;

				int deletedCount_tJDBCOutput_27 = 0;
				int updatedCount_tJDBCOutput_27 = 0;
				int insertedCount_tJDBCOutput_27 = 0;
				int rejectedCount_tJDBCOutput_27 = 0;

				boolean whetherReject_tJDBCOutput_27 = false;

				java.sql.Connection connection_tJDBCOutput_27 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_27 = 10000;
				int batchSizeCounter_tJDBCOutput_27 = 0;

				String update_tJDBCOutput_27 = "UPDATE "
						+ "tag_relations_history"
						+ " SET entity_type = ?,detach_date = ? WHERE entity_id = ? AND parent_id = ? AND attach_date = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_27 = connection_tJDBCOutput_27
						.prepareStatement(update_tJDBCOutput_27);

				/**
				 * [tJDBCOutput_27 begin ] stop
				 */

				/**
				 * [tMap_27 begin ] start
				 */

				ok_Hash.put("tMap_27", false);
				start_Hash.put("tMap_27", System.currentTimeMillis());

				currentComponent = "tMap_27";

				int tos_count_tMap_27 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) globalMap
						.get("tHash_Lookup_row11"));

				row11Struct row11HashKey = new row11Struct();
				row11Struct row11Default = new row11Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_27__Struct {
				}
				Var__tMap_27__Struct Var__tMap_27 = new Var__tMap_27__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				detach_tagsStruct detach_tags_tmp = new detach_tagsStruct();
				// ###############################

				/**
				 * [tMap_27 begin ] stop
				 */

				/**
				 * [tJDBCInput_48 begin ] start
				 */

				ok_Hash.put("tJDBCInput_48", false);
				start_Hash.put("tJDBCInput_48", System.currentTimeMillis());

				currentComponent = "tJDBCInput_48";

				int tos_count_tJDBCInput_48 = 0;

				int nb_line_tJDBCInput_48 = 0;
				java.sql.Connection conn_tJDBCInput_48 = null;
				conn_tJDBCInput_48 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_48 = conn_tJDBCInput_48
						.createStatement();

				String dbquery_tJDBCInput_48 = "SELECT    history_id,   entity_id,    upper(cast(entity_id as char(36))) as entity_join_id,   entity_type,    parent_id,    upper(cast(parent_id as char(36))) as parent_join_id,   attach_date,    detach_date FROM v3_5_latest_tags_relations";

				globalMap.put("tJDBCInput_48_QUERY", dbquery_tJDBCInput_48);
				java.sql.ResultSet rs_tJDBCInput_48 = null;
				try {
					rs_tJDBCInput_48 = stmt_tJDBCInput_48
							.executeQuery(dbquery_tJDBCInput_48);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_48 = rs_tJDBCInput_48
							.getMetaData();
					int colQtyInRs_tJDBCInput_48 = rsmd_tJDBCInput_48
							.getColumnCount();

					String tmpContent_tJDBCInput_48 = null;
					int column_index_tJDBCInput_48 = 1;

					while (rs_tJDBCInput_48.next()) {
						nb_line_tJDBCInput_48++;

						column_index_tJDBCInput_48 = 1;

						if (colQtyInRs_tJDBCInput_48 < column_index_tJDBCInput_48) {
							row12.history_id = null;
						} else {

							if (rs_tJDBCInput_48
									.getObject(column_index_tJDBCInput_48) != null) {
								row12.history_id = rs_tJDBCInput_48
										.getInt(column_index_tJDBCInput_48);
							} else {
								row12.history_id = null;
							}

						}

						column_index_tJDBCInput_48 = 2;

						if (colQtyInRs_tJDBCInput_48 < column_index_tJDBCInput_48) {
							row12.entity_id = null;
						} else {

							if (rs_tJDBCInput_48
									.getObject(column_index_tJDBCInput_48) != null) {
								row12.entity_id = rs_tJDBCInput_48
										.getObject(column_index_tJDBCInput_48);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tJDBCInput_48 = 3;

						if (colQtyInRs_tJDBCInput_48 < column_index_tJDBCInput_48) {
							row12.entity_join_id = null;
						} else {

							tmpContent_tJDBCInput_48 = rs_tJDBCInput_48
									.getString(column_index_tJDBCInput_48);
							if (tmpContent_tJDBCInput_48 != null) {
								row12.entity_join_id = tmpContent_tJDBCInput_48;
							} else {
								row12.entity_join_id = null;
							}

						}

						column_index_tJDBCInput_48 = 4;

						if (colQtyInRs_tJDBCInput_48 < column_index_tJDBCInput_48) {
							row12.entity_type = 0;
						} else {

							if (rs_tJDBCInput_48
									.getObject(column_index_tJDBCInput_48) != null) {
								row12.entity_type = rs_tJDBCInput_48
										.getShort(column_index_tJDBCInput_48);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						column_index_tJDBCInput_48 = 5;

						if (colQtyInRs_tJDBCInput_48 < column_index_tJDBCInput_48) {
							row12.parent_id = null;
						} else {

							if (rs_tJDBCInput_48
									.getObject(column_index_tJDBCInput_48) != null) {
								row12.parent_id = rs_tJDBCInput_48
										.getObject(column_index_tJDBCInput_48);
							} else {
								row12.parent_id = null;
							}

						}

						column_index_tJDBCInput_48 = 6;

						if (colQtyInRs_tJDBCInput_48 < column_index_tJDBCInput_48) {
							row12.parent_join_id = null;
						} else {

							tmpContent_tJDBCInput_48 = rs_tJDBCInput_48
									.getString(column_index_tJDBCInput_48);
							if (tmpContent_tJDBCInput_48 != null) {
								row12.parent_join_id = tmpContent_tJDBCInput_48;
							} else {
								row12.parent_join_id = null;
							}

						}

						column_index_tJDBCInput_48 = 7;

						if (colQtyInRs_tJDBCInput_48 < column_index_tJDBCInput_48) {
							row12.attach_date = null;
						} else {

							java.util.Date date_tJDBCInput_48 = null;
							try {
								date_tJDBCInput_48 = rs_tJDBCInput_48
										.getTimestamp(column_index_tJDBCInput_48);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_48 = rs_tJDBCInput_48
										.getDate(column_index_tJDBCInput_48);
							}
							row12.attach_date = date_tJDBCInput_48;

						}

						column_index_tJDBCInput_48 = 8;

						if (colQtyInRs_tJDBCInput_48 < column_index_tJDBCInput_48) {
							row12.detach_date = null;
						} else {

							java.util.Date date_tJDBCInput_48 = null;
							try {
								date_tJDBCInput_48 = rs_tJDBCInput_48
										.getTimestamp(column_index_tJDBCInput_48);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_48 = rs_tJDBCInput_48
										.getDate(column_index_tJDBCInput_48);
							}
							row12.detach_date = date_tJDBCInput_48;

						}

						/**
						 * [tJDBCInput_48 begin ] stop
						 */
						/**
						 * [tJDBCInput_48 main ] start
						 */

						currentComponent = "tJDBCInput_48";

						tos_count_tJDBCInput_48++;

						/**
						 * [tJDBCInput_48 main ] stop
						 */

						/**
						 * [tMap_27 main ] start
						 */

						currentComponent = "tMap_27";

						boolean hasCasePrimitiveKeyWithNull_tMap_27 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_27 = false;
						boolean mainRowRejected_tMap_27 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row11"
						// /////////////////////////////////////////////

						boolean forceLooprow11 = false;

						row11Struct row11ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_27) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_27 = false;

							row11HashKey.entity_join_id = row12.entity_join_id;

							row11HashKey.parent_join_id = row12.parent_join_id;

							row11HashKey.hashCodeDirty = true;

							tHash_Lookup_row11.lookup(row11HashKey);

							if (!tHash_Lookup_row11.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_27 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row11 != null
								&& tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.entity_join_id = '"
							// + row11HashKey.entity_join_id +
							// "', row11.parent_join_id = '" +
							// row11HashKey.parent_join_id + "'");
						} // G 071

						row11Struct row11 = null;

						row11Struct fromLookup_row11 = null;
						row11 = row11Default;

						if (tHash_Lookup_row11 != null
								&& tHash_Lookup_row11.hasNext()) { // G 099

							fromLookup_row11 = tHash_Lookup_row11.next();

						} // G 099

						if (fromLookup_row11 != null) {
							row11 = fromLookup_row11;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_27__Struct Var = Var__tMap_27;// ###############################
							// ###############################
							// # Output tables

							detach_tags = null;

							if (!rejectedInnerJoin_tMap_27) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'detach_tags'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_27) {
								detach_tags_tmp.entity_id = row12.entity_id;
								detach_tags_tmp.entity_type = row12.entity_type;
								detach_tags_tmp.parent_id = row12.parent_id;
								detach_tags_tmp.attach_date = row12.attach_date;
								detach_tags_tmp.detach_date = context.runTime;
								detach_tags = detach_tags_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_27 = false;

						tos_count_tMap_27++;

						/**
						 * [tMap_27 main ] stop
						 */
						// Start of branch "detach_tags"
						if (detach_tags != null) {

							/**
							 * [tJDBCOutput_27 main ] start
							 */

							currentComponent = "tJDBCOutput_27";

							whetherReject_tJDBCOutput_27 = false;
							pstmt_tJDBCOutput_27.setShort(1,
									detach_tags.entity_type);

							if (detach_tags.detach_date != null) {
								pstmt_tJDBCOutput_27.setTimestamp(
										2,
										new java.sql.Timestamp(
												detach_tags.detach_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_27.setNull(2,
										java.sql.Types.DATE);
							}

							if (detach_tags.entity_id == null) {
								pstmt_tJDBCOutput_27.setNull(3,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_27.setObject(3,
										detach_tags.entity_id);
							}

							if (detach_tags.parent_id == null) {
								pstmt_tJDBCOutput_27.setNull(4,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_27.setObject(4,
										detach_tags.parent_id);
							}

							if (detach_tags.attach_date != null) {
								pstmt_tJDBCOutput_27.setTimestamp(
										5,
										new java.sql.Timestamp(
												detach_tags.attach_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_27.setNull(5,
										java.sql.Types.DATE);
							}

							try {
								updatedCount_tJDBCOutput_27 = updatedCount_tJDBCOutput_27
										+ pstmt_tJDBCOutput_27.executeUpdate();
								nb_line_tJDBCOutput_27++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_27 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_27++;

							/**
							 * [tJDBCOutput_27 main ] stop
							 */

						} // End of branch "detach_tags"

						/**
						 * [tJDBCInput_48 end ] start
						 */

						currentComponent = "tJDBCInput_48";

					}
				} finally {
					rs_tJDBCInput_48.close();
					stmt_tJDBCInput_48.close();

				}
				globalMap.put("tJDBCInput_48_NB_LINE", nb_line_tJDBCInput_48);

				ok_Hash.put("tJDBCInput_48", true);
				end_Hash.put("tJDBCInput_48", System.currentTimeMillis());

				/**
				 * [tJDBCInput_48 end ] stop
				 */

				/**
				 * [tMap_27 end ] start
				 */

				currentComponent = "tMap_27";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row11 != null) {
					tHash_Lookup_row11.endGet();
				}
				globalMap.remove("tHash_Lookup_row11");

				// ###############################

				ok_Hash.put("tMap_27", true);
				end_Hash.put("tMap_27", System.currentTimeMillis());

				/**
				 * [tMap_27 end ] stop
				 */

				/**
				 * [tJDBCOutput_27 end ] start
				 */

				currentComponent = "tJDBCOutput_27";

				if (pstmt_tJDBCOutput_27 != null) {

					pstmt_tJDBCOutput_27.close();

				}

				nb_line_deleted_tJDBCOutput_27 = nb_line_deleted_tJDBCOutput_27
						+ deletedCount_tJDBCOutput_27;
				nb_line_update_tJDBCOutput_27 = nb_line_update_tJDBCOutput_27
						+ updatedCount_tJDBCOutput_27;
				nb_line_inserted_tJDBCOutput_27 = nb_line_inserted_tJDBCOutput_27
						+ insertedCount_tJDBCOutput_27;
				nb_line_rejected_tJDBCOutput_27 = nb_line_rejected_tJDBCOutput_27
						+ rejectedCount_tJDBCOutput_27;

				globalMap.put("tJDBCOutput_27_NB_LINE", nb_line_tJDBCOutput_27);
				globalMap.put("tJDBCOutput_27_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_27);
				globalMap.put("tJDBCOutput_27_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_27);
				globalMap.put("tJDBCOutput_27_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_27);
				globalMap.put("tJDBCOutput_27_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_27);

				ok_Hash.put("tJDBCOutput_27", true);
				end_Hash.put("tJDBCOutput_27", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_27 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_48:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_46Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_27"
			globalMap.remove("tHash_Lookup_row11");

			try {

				/**
				 * [tJDBCInput_48 finally ] start
				 */

				currentComponent = "tJDBCInput_48";

				/**
				 * [tJDBCInput_48 finally ] stop
				 */

				/**
				 * [tMap_27 finally ] start
				 */

				currentComponent = "tMap_27";

				/**
				 * [tMap_27 finally ] stop
				 */

				/**
				 * [tJDBCOutput_27 finally ] start
				 */

				currentComponent = "tJDBCOutput_27";

				/**
				 * [tJDBCOutput_27 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_48_SUBPROCESS_STATE", 1);
	}

	public static class tag_details_updateStruct implements
			routines.system.IPersistableRow<tag_details_updateStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object tag_id;

		public Object getTag_id() {
			return this.tag_id;
		}

		public String tag_name;

		public String getTag_name() {
			return this.tag_name;
		}

		public String tag_description;

		public String getTag_description() {
			return this.tag_description;
		}

		public String tag_path;

		public String getTag_path() {
			return this.tag_path;
		}

		public short tag_level;

		public short getTag_level() {
			return this.tag_level;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.tag_id = (Object) dis.readObject();

					this.tag_name = readString(dis);

					this.tag_description = readString(dis);

					this.tag_path = readString(dis);

					this.tag_level = dis.readShort();

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.tag_id);

				// String

				writeString(this.tag_name, dos);

				// String

				writeString(this.tag_description, dos);

				// String

				writeString(this.tag_path, dos);

				// short

				dos.writeShort(this.tag_level);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("tag_id=" + String.valueOf(tag_id));
			sb.append(",tag_name=" + tag_name);
			sb.append(",tag_description=" + tag_description);
			sb.append(",tag_path=" + tag_path);
			sb.append(",tag_level=" + String.valueOf(tag_level));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tag_details_updateStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row42Struct implements
			routines.system.IPersistableRow<row42Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object tag_id;

		public Object getTag_id() {
			return this.tag_id;
		}

		public String tag_join_id;

		public String getTag_join_id() {
			return this.tag_join_id;
		}

		public String tag_name;

		public String getTag_name() {
			return this.tag_name;
		}

		public String tag_description;

		public String getTag_description() {
			return this.tag_description;
		}

		public String tag_path;

		public String getTag_path() {
			return this.tag_path;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.tag_id = (Object) dis.readObject();

					this.tag_join_id = readString(dis);

					this.tag_name = readString(dis);

					this.tag_description = readString(dis);

					this.tag_path = readString(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.tag_id);

				// String

				writeString(this.tag_join_id, dos);

				// String

				writeString(this.tag_name, dos);

				// String

				writeString(this.tag_description, dos);

				// String

				writeString(this.tag_path, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("tag_id=" + String.valueOf(tag_id));
			sb.append(",tag_join_id=" + tag_join_id);
			sb.append(",tag_name=" + tag_name);
			sb.append(",tag_description=" + tag_description);
			sb.append(",tag_path=" + tag_path);
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object tag_id;

		public Object getTag_id() {
			return this.tag_id;
		}

		public String tag_join_id;

		public String getTag_join_id() {
			return this.tag_join_id;
		}

		public String tag_name;

		public String getTag_name() {
			return this.tag_name;
		}

		public String tag_description;

		public String getTag_description() {
			return this.tag_description;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.tag_id = (Object) dis.readObject();

					this.tag_join_id = readString(dis);

					this.tag_name = readString(dis);

					this.tag_description = readString(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.tag_id);

				// String

				writeString(this.tag_join_id, dos);

				// String

				writeString(this.tag_name, dos);

				// String

				writeString(this.tag_description, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("tag_id=" + String.valueOf(tag_id));
			sb.append(",tag_join_id=" + tag_join_id);
			sb.append(",tag_name=" + tag_name);
			sb.append(",tag_description=" + tag_description);
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_46Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_46Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object tag_id;

		public Object getTag_id() {
			return this.tag_id;
		}

		public String tag_join_id;

		public String getTag_join_id() {
			return this.tag_join_id;
		}

		public String tag_name;

		public String getTag_name() {
			return this.tag_name;
		}

		public String tag_description;

		public String getTag_description() {
			return this.tag_description;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.tag_id = (Object) dis.readObject();

					this.tag_join_id = readString(dis);

					this.tag_name = readString(dis);

					this.tag_description = readString(dis);

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.tag_id);

				// String

				writeString(this.tag_join_id, dos);

				// String

				writeString(this.tag_name, dos);

				// String

				writeString(this.tag_description, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("tag_id=" + String.valueOf(tag_id));
			sb.append(",tag_join_id=" + tag_join_id);
			sb.append(",tag_name=" + tag_name);
			sb.append(",tag_description=" + tag_description);
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_46Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_46Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_46_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_59Process(globalMap);

				row10Struct row10 = new row10Struct();
				row42Struct row42 = new row42Struct();
				tag_details_updateStruct tag_details_update = new tag_details_updateStruct();

				/**
				 * [tJDBCOutput_28 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_28", false);
				start_Hash.put("tJDBCOutput_28", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_28";

				int tos_count_tJDBCOutput_28 = 0;

				int nb_line_tJDBCOutput_28 = 0;
				int nb_line_update_tJDBCOutput_28 = 0;
				int nb_line_inserted_tJDBCOutput_28 = 0;
				int nb_line_deleted_tJDBCOutput_28 = 0;
				int nb_line_rejected_tJDBCOutput_28 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_28 = 0;

				int deletedCount_tJDBCOutput_28 = 0;
				int updatedCount_tJDBCOutput_28 = 0;
				int insertedCount_tJDBCOutput_28 = 0;
				int rejectedCount_tJDBCOutput_28 = 0;

				boolean whetherReject_tJDBCOutput_28 = false;

				java.sql.Connection connection_tJDBCOutput_28 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_28 = 10000;
				int batchSizeCounter_tJDBCOutput_28 = 0;

				String insert_tJDBCOutput_28 = "INSERT INTO "
						+ "tag_details"
						+ " (tag_id,tag_name,tag_description,tag_path,tag_level,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_28 = connection_tJDBCOutput_28
						.prepareStatement(insert_tJDBCOutput_28);

				/**
				 * [tJDBCOutput_28 begin ] stop
				 */

				/**
				 * [tMap_28 begin ] start
				 */

				ok_Hash.put("tMap_28", false);
				start_Hash.put("tMap_28", System.currentTimeMillis());

				currentComponent = "tMap_28";

				int tos_count_tMap_28 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct> tHash_Lookup_row43 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct>) globalMap
						.get("tHash_Lookup_row43"));

				row43Struct row43HashKey = new row43Struct();
				row43Struct row43Default = new row43Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_28__Struct {
				}
				Var__tMap_28__Struct Var__tMap_28 = new Var__tMap_28__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				tag_details_updateStruct tag_details_update_tmp = new tag_details_updateStruct();
				// ###############################

				/**
				 * [tMap_28 begin ] stop
				 */

				/**
				 * [tJDBCSP_1 begin ] start
				 */

				ok_Hash.put("tJDBCSP_1", false);
				start_Hash.put("tJDBCSP_1", System.currentTimeMillis());

				currentComponent = "tJDBCSP_1";

				int tos_count_tJDBCSP_1 = 0;

				java.sql.Connection connection_tJDBCSP_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.CallableStatement statement_tJDBCSP_1 = connection_tJDBCSP_1
						.prepareCall("{? = call " + "GetPathIDs" + "(?)}");

				java.sql.Date tmpDate_tJDBCSP_1;
				String tmpString_tJDBCSP_1;

				/**
				 * [tJDBCSP_1 begin ] stop
				 */

				/**
				 * [tJDBCInput_46 begin ] start
				 */

				ok_Hash.put("tJDBCInput_46", false);
				start_Hash.put("tJDBCInput_46", System.currentTimeMillis());

				currentComponent = "tJDBCInput_46";

				int tos_count_tJDBCInput_46 = 0;

				int nb_line_tJDBCInput_46 = 0;
				java.sql.Connection conn_tJDBCInput_46 = null;
				conn_tJDBCInput_46 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_46 = conn_tJDBCInput_46
						.createStatement();

				String dbquery_tJDBCInput_46 = "SELECT tag_id, 		upper(cast(tag_id as char(36))) as tag_join_id, 		tag_name, 		tag_description, 		create_date, 		update_date FROM	dwh_tags_details_history_view ORDER BY (CASE  			WHEN  update_date IS NOT NULL THEN update_date 			ELSE  create_date 		  END) ASC";

				globalMap.put("tJDBCInput_46_QUERY", dbquery_tJDBCInput_46);
				java.sql.ResultSet rs_tJDBCInput_46 = null;
				try {
					rs_tJDBCInput_46 = stmt_tJDBCInput_46
							.executeQuery(dbquery_tJDBCInput_46);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_46 = rs_tJDBCInput_46
							.getMetaData();
					int colQtyInRs_tJDBCInput_46 = rsmd_tJDBCInput_46
							.getColumnCount();

					String tmpContent_tJDBCInput_46 = null;
					int column_index_tJDBCInput_46 = 1;

					while (rs_tJDBCInput_46.next()) {
						nb_line_tJDBCInput_46++;

						column_index_tJDBCInput_46 = 1;

						if (colQtyInRs_tJDBCInput_46 < column_index_tJDBCInput_46) {
							row10.tag_id = null;
						} else {

							if (rs_tJDBCInput_46
									.getObject(column_index_tJDBCInput_46) != null) {
								row10.tag_id = rs_tJDBCInput_46
										.getObject(column_index_tJDBCInput_46);
							} else {
								row10.tag_id = null;
							}

						}

						column_index_tJDBCInput_46 = 2;

						if (colQtyInRs_tJDBCInput_46 < column_index_tJDBCInput_46) {
							row10.tag_join_id = null;
						} else {

							tmpContent_tJDBCInput_46 = rs_tJDBCInput_46
									.getString(column_index_tJDBCInput_46);
							if (tmpContent_tJDBCInput_46 != null) {
								row10.tag_join_id = tmpContent_tJDBCInput_46;
							} else {
								row10.tag_join_id = null;
							}

						}

						column_index_tJDBCInput_46 = 3;

						if (colQtyInRs_tJDBCInput_46 < column_index_tJDBCInput_46) {
							row10.tag_name = null;
						} else {

							tmpContent_tJDBCInput_46 = rs_tJDBCInput_46
									.getString(column_index_tJDBCInput_46);
							if (tmpContent_tJDBCInput_46 != null) {
								row10.tag_name = tmpContent_tJDBCInput_46;
							} else {
								row10.tag_name = null;
							}

						}

						column_index_tJDBCInput_46 = 4;

						if (colQtyInRs_tJDBCInput_46 < column_index_tJDBCInput_46) {
							row10.tag_description = null;
						} else {

							tmpContent_tJDBCInput_46 = rs_tJDBCInput_46
									.getString(column_index_tJDBCInput_46);
							if (tmpContent_tJDBCInput_46 != null) {
								row10.tag_description = tmpContent_tJDBCInput_46;
							} else {
								row10.tag_description = null;
							}

						}

						column_index_tJDBCInput_46 = 5;

						if (colQtyInRs_tJDBCInput_46 < column_index_tJDBCInput_46) {
							row10.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_46 = null;
							try {
								date_tJDBCInput_46 = rs_tJDBCInput_46
										.getTimestamp(column_index_tJDBCInput_46);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_46 = rs_tJDBCInput_46
										.getDate(column_index_tJDBCInput_46);
							}
							row10.create_date = date_tJDBCInput_46;

						}

						column_index_tJDBCInput_46 = 6;

						if (colQtyInRs_tJDBCInput_46 < column_index_tJDBCInput_46) {
							row10.update_date = null;
						} else {

							java.util.Date date_tJDBCInput_46 = null;
							try {
								date_tJDBCInput_46 = rs_tJDBCInput_46
										.getTimestamp(column_index_tJDBCInput_46);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_46 = rs_tJDBCInput_46
										.getDate(column_index_tJDBCInput_46);
							}
							row10.update_date = date_tJDBCInput_46;

						}

						/**
						 * [tJDBCInput_46 begin ] stop
						 */
						/**
						 * [tJDBCInput_46 main ] start
						 */

						currentComponent = "tJDBCInput_46";

						tos_count_tJDBCInput_46++;

						/**
						 * [tJDBCInput_46 main ] stop
						 */

						/**
						 * [tJDBCSP_1 main ] start
						 */

						currentComponent = "tJDBCSP_1";

						statement_tJDBCSP_1.registerOutParameter(1,
								java.sql.Types.VARCHAR);

						if (row10.tag_id == null) {
							statement_tJDBCSP_1
									.setNull(2, java.sql.Types.OTHER);
						} else {

							statement_tJDBCSP_1.setObject(2, row10.tag_id);

						}

						statement_tJDBCSP_1.execute();

						row42.tag_id = row10.tag_id;

						row42.tag_join_id = row10.tag_join_id;

						row42.tag_name = row10.tag_name;

						row42.tag_description = row10.tag_description;

						row42.tag_path = statement_tJDBCSP_1.getString(1);

						if (statement_tJDBCSP_1.wasNull()) {
							row42.tag_path = null;
						}

						row42.create_date = row10.create_date;

						row42.update_date = row10.update_date;

						tos_count_tJDBCSP_1++;

						/**
						 * [tJDBCSP_1 main ] stop
						 */

						/**
						 * [tMap_28 main ] start
						 */

						currentComponent = "tMap_28";

						boolean hasCasePrimitiveKeyWithNull_tMap_28 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_28 = false;
						boolean mainRowRejected_tMap_28 = false;

						if (

						(

						row42.update_date == null ? TalendDate.compareDate(
								row42.create_date, context.runTime) <= 0
								: TalendDate.compareDate(row42.update_date,
										context.runTime) <= 0

						)

						) { // G_TM_M_280

							// CALL close main tMap filter for table 'row42'

							// /////////////////////////////////////////////
							// Starting Lookup Table "row43"
							// /////////////////////////////////////////////

							boolean forceLooprow43 = false;

							row43Struct row43ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_28) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_28 = false;

								row43HashKey.tag_join_id = row42.tag_join_id;

								row43HashKey.tag_name = row42.tag_name;

								row43HashKey.tag_description = row42.tag_description;

								row43HashKey.tag_path = row42.tag_path;

								row43HashKey.hashCodeDirty = true;

								tHash_Lookup_row43.lookup(row43HashKey);

								if (!tHash_Lookup_row43.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_28 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row43 != null
									&& tHash_Lookup_row43
											.getCount(row43HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row43' and it contains more one result from keys :  row43.tag_join_id = '"
								// + row43HashKey.tag_join_id +
								// "', row43.tag_name = '" +
								// row43HashKey.tag_name +
								// "', row43.tag_description = '" +
								// row43HashKey.tag_description +
								// "', row43.tag_path = '" +
								// row43HashKey.tag_path + "'");
							} // G 071

							row43Struct row43 = null;

							row43Struct fromLookup_row43 = null;
							row43 = row43Default;

							if (tHash_Lookup_row43 != null
									&& tHash_Lookup_row43.hasNext()) { // G 099

								fromLookup_row43 = tHash_Lookup_row43.next();

							} // G 099

							if (fromLookup_row43 != null) {
								row43 = fromLookup_row43;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_28__Struct Var = Var__tMap_28;// ###############################
								// ###############################
								// # Output tables

								tag_details_update = null;

								if (!rejectedInnerJoin_tMap_28) {
								} // closing inner join bracket (1)
									// ###### START REJECTS #####

								// # Output reject table : 'tag_details_update'
								// # Filter conditions
								if (rejectedInnerJoin_tMap_28) {
									tag_details_update_tmp.tag_id = row42.tag_id;
									tag_details_update_tmp.tag_name = StringHandling
											.TRIM(row42.tag_name);
									tag_details_update_tmp.tag_description = StringHandling
											.TRIM(row42.tag_description);
									tag_details_update_tmp.tag_path = row42.tag_path;
									tag_details_update_tmp.tag_level = (short) StringHandling
											.COUNT(row42.tag_path, "/");
									tag_details_update_tmp.create_date = row42.create_date;
									tag_details_update_tmp.update_date = row42.update_date == null ? row42.update_date
											: context.runTime;
									tag_details_update_tmp.delete_date = null;
									tag_details_update = tag_details_update_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_28 = false;

							tos_count_tMap_28++;

							/**
							 * [tMap_28 main ] stop
							 */
							// Start of branch "tag_details_update"
							if (tag_details_update != null) {

								/**
								 * [tJDBCOutput_28 main ] start
								 */

								currentComponent = "tJDBCOutput_28";

								whetherReject_tJDBCOutput_28 = false;
								if (tag_details_update.tag_id == null) {
									pstmt_tJDBCOutput_28.setNull(1,
											java.sql.Types.OTHER);
								} else {
									pstmt_tJDBCOutput_28.setObject(1,
											tag_details_update.tag_id);
								}

								if (tag_details_update.tag_name == null) {
									pstmt_tJDBCOutput_28.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_28.setString(2,
											tag_details_update.tag_name);
								}

								if (tag_details_update.tag_description == null) {
									pstmt_tJDBCOutput_28.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_28.setString(3,
											tag_details_update.tag_description);
								}

								if (tag_details_update.tag_path == null) {
									pstmt_tJDBCOutput_28.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tJDBCOutput_28.setString(4,
											tag_details_update.tag_path);
								}

								pstmt_tJDBCOutput_28.setShort(5,
										tag_details_update.tag_level);

								if (tag_details_update.create_date != null) {
									pstmt_tJDBCOutput_28
											.setTimestamp(
													6,
													new java.sql.Timestamp(
															tag_details_update.create_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_28.setNull(6,
											java.sql.Types.DATE);
								}

								if (tag_details_update.update_date != null) {
									pstmt_tJDBCOutput_28
											.setTimestamp(
													7,
													new java.sql.Timestamp(
															tag_details_update.update_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_28.setNull(7,
											java.sql.Types.DATE);
								}

								if (tag_details_update.delete_date != null) {
									pstmt_tJDBCOutput_28
											.setTimestamp(
													8,
													new java.sql.Timestamp(
															tag_details_update.delete_date
																	.getTime()));
								} else {
									pstmt_tJDBCOutput_28.setNull(8,
											java.sql.Types.DATE);
								}

								try {
									insertedCount_tJDBCOutput_28 = insertedCount_tJDBCOutput_28
											+ pstmt_tJDBCOutput_28
													.executeUpdate();
									nb_line_tJDBCOutput_28++;
								} catch (java.lang.Exception e) {
									whetherReject_tJDBCOutput_28 = true;
									throw (e);
								}

								tos_count_tJDBCOutput_28++;

								/**
								 * [tJDBCOutput_28 main ] stop
								 */

							} // End of branch "tag_details_update"

						} // G_TM_M_280 close main tMap filter for table 'row42'

						/**
						 * [tJDBCInput_46 end ] start
						 */

						currentComponent = "tJDBCInput_46";

					}
				} finally {
					rs_tJDBCInput_46.close();
					stmt_tJDBCInput_46.close();

				}
				globalMap.put("tJDBCInput_46_NB_LINE", nb_line_tJDBCInput_46);

				ok_Hash.put("tJDBCInput_46", true);
				end_Hash.put("tJDBCInput_46", System.currentTimeMillis());

				/**
				 * [tJDBCInput_46 end ] stop
				 */

				/**
				 * [tJDBCSP_1 end ] start
				 */

				currentComponent = "tJDBCSP_1";

				statement_tJDBCSP_1.close();

				ok_Hash.put("tJDBCSP_1", true);
				end_Hash.put("tJDBCSP_1", System.currentTimeMillis());

				/**
				 * [tJDBCSP_1 end ] stop
				 */

				/**
				 * [tMap_28 end ] start
				 */

				currentComponent = "tMap_28";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row43 != null) {
					tHash_Lookup_row43.endGet();
				}
				globalMap.remove("tHash_Lookup_row43");

				// ###############################

				ok_Hash.put("tMap_28", true);
				end_Hash.put("tMap_28", System.currentTimeMillis());

				/**
				 * [tMap_28 end ] stop
				 */

				/**
				 * [tJDBCOutput_28 end ] start
				 */

				currentComponent = "tJDBCOutput_28";

				if (pstmt_tJDBCOutput_28 != null) {

					pstmt_tJDBCOutput_28.close();

				}

				nb_line_deleted_tJDBCOutput_28 = nb_line_deleted_tJDBCOutput_28
						+ deletedCount_tJDBCOutput_28;
				nb_line_update_tJDBCOutput_28 = nb_line_update_tJDBCOutput_28
						+ updatedCount_tJDBCOutput_28;
				nb_line_inserted_tJDBCOutput_28 = nb_line_inserted_tJDBCOutput_28
						+ insertedCount_tJDBCOutput_28;
				nb_line_rejected_tJDBCOutput_28 = nb_line_rejected_tJDBCOutput_28
						+ rejectedCount_tJDBCOutput_28;

				globalMap.put("tJDBCOutput_28_NB_LINE", nb_line_tJDBCOutput_28);
				globalMap.put("tJDBCOutput_28_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_28);
				globalMap.put("tJDBCOutput_28_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_28);
				globalMap.put("tJDBCOutput_28_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_28);
				globalMap.put("tJDBCOutput_28_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_28);

				ok_Hash.put("tJDBCOutput_28", true);
				end_Hash.put("tJDBCOutput_28", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_28 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_46:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_50Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_28"
			globalMap.remove("tHash_Lookup_row43");

			try {

				/**
				 * [tJDBCInput_46 finally ] start
				 */

				currentComponent = "tJDBCInput_46";

				/**
				 * [tJDBCInput_46 finally ] stop
				 */

				/**
				 * [tJDBCSP_1 finally ] start
				 */

				currentComponent = "tJDBCSP_1";

				/**
				 * [tJDBCSP_1 finally ] stop
				 */

				/**
				 * [tMap_28 finally ] start
				 */

				currentComponent = "tMap_28";

				/**
				 * [tMap_28 finally ] stop
				 */

				/**
				 * [tJDBCOutput_28 finally ] start
				 */

				currentComponent = "tJDBCOutput_28";

				/**
				 * [tJDBCOutput_28 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_46_SUBPROCESS_STATE", 1);
	}

	public static class delete_tag_detalisStruct implements
			routines.system.IPersistableRow<delete_tag_detalisStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object tag_id;

		public Object getTag_id() {
			return this.tag_id;
		}

		public String tag_name;

		public String getTag_name() {
			return this.tag_name;
		}

		public String tag_description;

		public String getTag_description() {
			return this.tag_description;
		}

		public String tag_path;

		public String getTag_path() {
			return this.tag_path;
		}

		public short tag_level;

		public short getTag_level() {
			return this.tag_level;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date update_date;

		public java.util.Date getUpdate_date() {
			return this.update_date;
		}

		public java.util.Date delete_date;

		public java.util.Date getDelete_date() {
			return this.delete_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.tag_id = (Object) dis.readObject();

					this.tag_name = readString(dis);

					this.tag_description = readString(dis);

					this.tag_path = readString(dis);

					this.tag_level = dis.readShort();

					this.create_date = readDate(dis);

					this.update_date = readDate(dis);

					this.delete_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.tag_id);

				// String

				writeString(this.tag_name, dos);

				// String

				writeString(this.tag_description, dos);

				// String

				writeString(this.tag_path, dos);

				// short

				dos.writeShort(this.tag_level);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.update_date, dos);

				// java.util.Date

				writeDate(this.delete_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("tag_id=" + String.valueOf(tag_id));
			sb.append(",tag_name=" + tag_name);
			sb.append(",tag_description=" + tag_description);
			sb.append(",tag_path=" + tag_path);
			sb.append(",tag_level=" + String.valueOf(tag_level));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",update_date=" + String.valueOf(update_date));
			sb.append(",delete_date=" + String.valueOf(delete_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(delete_tag_detalisStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row41Struct implements
			routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object tag_id;

		public Object getTag_id() {
			return this.tag_id;
		}

		public String tag_join_id;

		public String getTag_join_id() {
			return this.tag_join_id;
		}

		public String tag_name;

		public String getTag_name() {
			return this.tag_name;
		}

		public String tag_description;

		public String getTag_description() {
			return this.tag_description;
		}

		public String tag_path;

		public String getTag_path() {
			return this.tag_path;
		}

		public Short tag_level;

		public Short getTag_level() {
			return this.tag_level;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.tag_id = (Object) dis.readObject();

					this.tag_join_id = readString(dis);

					this.tag_name = readString(dis);

					this.tag_description = readString(dis);

					this.tag_path = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tag_level = null;
					} else {
						this.tag_level = dis.readShort();
					}

					this.create_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.tag_id);

				// String

				writeString(this.tag_join_id, dos);

				// String

				writeString(this.tag_name, dos);

				// String

				writeString(this.tag_description, dos);

				// String

				writeString(this.tag_path, dos);

				// Short

				if (this.tag_level == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tag_level);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("tag_id=" + String.valueOf(tag_id));
			sb.append(",tag_join_id=" + tag_join_id);
			sb.append(",tag_name=" + tag_name);
			sb.append(",tag_description=" + tag_description);
			sb.append(",tag_path=" + tag_path);
			sb.append(",tag_level=" + String.valueOf(tag_level));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tJDBCInput_50Struct implements
			routines.system.IPersistableRow<after_tJDBCInput_50Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public Object tag_id;

		public Object getTag_id() {
			return this.tag_id;
		}

		public String tag_join_id;

		public String getTag_join_id() {
			return this.tag_join_id;
		}

		public String tag_name;

		public String getTag_name() {
			return this.tag_name;
		}

		public String tag_description;

		public String getTag_description() {
			return this.tag_description;
		}

		public String tag_path;

		public String getTag_path() {
			return this.tag_path;
		}

		public Short tag_level;

		public Short getTag_level() {
			return this.tag_level;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.tag_id = (Object) dis.readObject();

					this.tag_join_id = readString(dis);

					this.tag_name = readString(dis);

					this.tag_description = readString(dis);

					this.tag_path = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.tag_level = null;
					} else {
						this.tag_level = dis.readShort();
					}

					this.create_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.tag_id);

				// String

				writeString(this.tag_join_id, dos);

				// String

				writeString(this.tag_name, dos);

				// String

				writeString(this.tag_description, dos);

				// String

				writeString(this.tag_path, dos);

				// Short

				if (this.tag_level == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.tag_level);
				}

				// java.util.Date

				writeDate(this.create_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("tag_id=" + String.valueOf(tag_id));
			sb.append(",tag_join_id=" + tag_join_id);
			sb.append(",tag_name=" + tag_name);
			sb.append(",tag_description=" + tag_description);
			sb.append(",tag_path=" + tag_path);
			sb.append(",tag_level=" + String.valueOf(tag_level));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tJDBCInput_50Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_50Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_50_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tJDBCInput_49Process(globalMap);

				row41Struct row41 = new row41Struct();
				delete_tag_detalisStruct delete_tag_detalis = new delete_tag_detalisStruct();

				/**
				 * [tJDBCOutput_29 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_29", false);
				start_Hash.put("tJDBCOutput_29", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_29";

				int tos_count_tJDBCOutput_29 = 0;

				int nb_line_tJDBCOutput_29 = 0;
				int nb_line_update_tJDBCOutput_29 = 0;
				int nb_line_inserted_tJDBCOutput_29 = 0;
				int nb_line_deleted_tJDBCOutput_29 = 0;
				int nb_line_rejected_tJDBCOutput_29 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_29 = 0;

				int deletedCount_tJDBCOutput_29 = 0;
				int updatedCount_tJDBCOutput_29 = 0;
				int insertedCount_tJDBCOutput_29 = 0;
				int rejectedCount_tJDBCOutput_29 = 0;

				boolean whetherReject_tJDBCOutput_29 = false;

				java.sql.Connection connection_tJDBCOutput_29 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_29 = 10000;
				int batchSizeCounter_tJDBCOutput_29 = 0;

				String insert_tJDBCOutput_29 = "INSERT INTO "
						+ "tag_details"
						+ " (tag_id,tag_name,tag_description,tag_path,tag_level,create_date,update_date,delete_date) VALUES (?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_29 = connection_tJDBCOutput_29
						.prepareStatement(insert_tJDBCOutput_29);

				/**
				 * [tJDBCOutput_29 begin ] stop
				 */

				/**
				 * [tMap_29 begin ] start
				 */

				ok_Hash.put("tMap_29", false);
				start_Hash.put("tMap_29", System.currentTimeMillis());

				currentComponent = "tMap_29";

				int tos_count_tMap_29 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) globalMap
						.get("tHash_Lookup_row13"));

				row13Struct row13HashKey = new row13Struct();
				row13Struct row13Default = new row13Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_29__Struct {
				}
				Var__tMap_29__Struct Var__tMap_29 = new Var__tMap_29__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				delete_tag_detalisStruct delete_tag_detalis_tmp = new delete_tag_detalisStruct();
				// ###############################

				/**
				 * [tMap_29 begin ] stop
				 */

				/**
				 * [tJDBCInput_50 begin ] start
				 */

				ok_Hash.put("tJDBCInput_50", false);
				start_Hash.put("tJDBCInput_50", System.currentTimeMillis());

				currentComponent = "tJDBCInput_50";

				int tos_count_tJDBCInput_50 = 0;

				int nb_line_tJDBCInput_50 = 0;
				java.sql.Connection conn_tJDBCInput_50 = null;
				conn_tJDBCInput_50 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_50 = conn_tJDBCInput_50
						.createStatement();

				String dbquery_tJDBCInput_50 = "SELECT    tag_id,     upper(cast(tag_id as char(36))) as tag_join_id,   tag_name,    tag_description,     tag_path,    tag_level,   create_date FROM v3_5_latest_tags_details";

				globalMap.put("tJDBCInput_50_QUERY", dbquery_tJDBCInput_50);
				java.sql.ResultSet rs_tJDBCInput_50 = null;
				try {
					rs_tJDBCInput_50 = stmt_tJDBCInput_50
							.executeQuery(dbquery_tJDBCInput_50);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_50 = rs_tJDBCInput_50
							.getMetaData();
					int colQtyInRs_tJDBCInput_50 = rsmd_tJDBCInput_50
							.getColumnCount();

					String tmpContent_tJDBCInput_50 = null;
					int column_index_tJDBCInput_50 = 1;

					while (rs_tJDBCInput_50.next()) {
						nb_line_tJDBCInput_50++;

						column_index_tJDBCInput_50 = 1;

						if (colQtyInRs_tJDBCInput_50 < column_index_tJDBCInput_50) {
							row41.tag_id = null;
						} else {

							if (rs_tJDBCInput_50
									.getObject(column_index_tJDBCInput_50) != null) {
								row41.tag_id = rs_tJDBCInput_50
										.getObject(column_index_tJDBCInput_50);
							} else {
								row41.tag_id = null;
							}

						}

						column_index_tJDBCInput_50 = 2;

						if (colQtyInRs_tJDBCInput_50 < column_index_tJDBCInput_50) {
							row41.tag_join_id = null;
						} else {

							tmpContent_tJDBCInput_50 = rs_tJDBCInput_50
									.getString(column_index_tJDBCInput_50);
							if (tmpContent_tJDBCInput_50 != null) {
								row41.tag_join_id = tmpContent_tJDBCInput_50;
							} else {
								row41.tag_join_id = null;
							}

						}

						column_index_tJDBCInput_50 = 3;

						if (colQtyInRs_tJDBCInput_50 < column_index_tJDBCInput_50) {
							row41.tag_name = null;
						} else {

							tmpContent_tJDBCInput_50 = rs_tJDBCInput_50
									.getString(column_index_tJDBCInput_50);
							if (tmpContent_tJDBCInput_50 != null) {
								row41.tag_name = tmpContent_tJDBCInput_50;
							} else {
								row41.tag_name = null;
							}

						}

						column_index_tJDBCInput_50 = 4;

						if (colQtyInRs_tJDBCInput_50 < column_index_tJDBCInput_50) {
							row41.tag_description = null;
						} else {

							tmpContent_tJDBCInput_50 = rs_tJDBCInput_50
									.getString(column_index_tJDBCInput_50);
							if (tmpContent_tJDBCInput_50 != null) {
								row41.tag_description = tmpContent_tJDBCInput_50;
							} else {
								row41.tag_description = null;
							}

						}

						column_index_tJDBCInput_50 = 5;

						if (colQtyInRs_tJDBCInput_50 < column_index_tJDBCInput_50) {
							row41.tag_path = null;
						} else {

							tmpContent_tJDBCInput_50 = rs_tJDBCInput_50
									.getString(column_index_tJDBCInput_50);
							if (tmpContent_tJDBCInput_50 != null) {
								row41.tag_path = tmpContent_tJDBCInput_50;
							} else {
								row41.tag_path = null;
							}

						}

						column_index_tJDBCInput_50 = 6;

						if (colQtyInRs_tJDBCInput_50 < column_index_tJDBCInput_50) {
							row41.tag_level = null;
						} else {

							if (rs_tJDBCInput_50
									.getObject(column_index_tJDBCInput_50) != null) {
								row41.tag_level = rs_tJDBCInput_50
										.getShort(column_index_tJDBCInput_50);
							} else {
								row41.tag_level = null;
							}

						}

						column_index_tJDBCInput_50 = 7;

						if (colQtyInRs_tJDBCInput_50 < column_index_tJDBCInput_50) {
							row41.create_date = null;
						} else {

							java.util.Date date_tJDBCInput_50 = null;
							try {
								date_tJDBCInput_50 = rs_tJDBCInput_50
										.getTimestamp(column_index_tJDBCInput_50);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_50 = rs_tJDBCInput_50
										.getDate(column_index_tJDBCInput_50);
							}
							row41.create_date = date_tJDBCInput_50;

						}

						/**
						 * [tJDBCInput_50 begin ] stop
						 */
						/**
						 * [tJDBCInput_50 main ] start
						 */

						currentComponent = "tJDBCInput_50";

						tos_count_tJDBCInput_50++;

						/**
						 * [tJDBCInput_50 main ] stop
						 */

						/**
						 * [tMap_29 main ] start
						 */

						currentComponent = "tMap_29";

						boolean hasCasePrimitiveKeyWithNull_tMap_29 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_29 = false;
						boolean mainRowRejected_tMap_29 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row13"
						// /////////////////////////////////////////////

						boolean forceLooprow13 = false;

						row13Struct row13ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_29) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_29 = false;

							row13HashKey.tag_join_id = row41.tag_join_id;

							row13HashKey.hashCodeDirty = true;

							tHash_Lookup_row13.lookup(row13HashKey);

							if (!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_29 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row13 != null
								&& tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.tag_join_id = '"
							// + row13HashKey.tag_join_id + "'");
						} // G 071

						row13Struct row13 = null;

						row13Struct fromLookup_row13 = null;
						row13 = row13Default;

						if (tHash_Lookup_row13 != null
								&& tHash_Lookup_row13.hasNext()) { // G 099

							fromLookup_row13 = tHash_Lookup_row13.next();

						} // G 099

						if (fromLookup_row13 != null) {
							row13 = fromLookup_row13;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_29__Struct Var = Var__tMap_29;// ###############################
							// ###############################
							// # Output tables

							delete_tag_detalis = null;

							if (!rejectedInnerJoin_tMap_29) {
							} // closing inner join bracket (1)
								// ###### START REJECTS #####

							// # Output reject table : 'delete_tag_detalis'
							// # Filter conditions
							if (rejectedInnerJoin_tMap_29) {
								delete_tag_detalis_tmp.tag_id = row41.tag_id;
								delete_tag_detalis_tmp.tag_name = row41.tag_name;
								delete_tag_detalis_tmp.tag_description = row41.tag_description;
								delete_tag_detalis_tmp.tag_path = row41.tag_path;
								delete_tag_detalis_tmp.tag_level = row41.tag_level;
								delete_tag_detalis_tmp.create_date = row41.create_date;
								delete_tag_detalis_tmp.update_date = context.runTime;
								delete_tag_detalis_tmp.delete_date = context.runTime;
								delete_tag_detalis = delete_tag_detalis_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_29 = false;

						tos_count_tMap_29++;

						/**
						 * [tMap_29 main ] stop
						 */
						// Start of branch "delete_tag_detalis"
						if (delete_tag_detalis != null) {

							/**
							 * [tJDBCOutput_29 main ] start
							 */

							currentComponent = "tJDBCOutput_29";

							whetherReject_tJDBCOutput_29 = false;
							if (delete_tag_detalis.tag_id == null) {
								pstmt_tJDBCOutput_29.setNull(1,
										java.sql.Types.OTHER);
							} else {
								pstmt_tJDBCOutput_29.setObject(1,
										delete_tag_detalis.tag_id);
							}

							if (delete_tag_detalis.tag_name == null) {
								pstmt_tJDBCOutput_29.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_29.setString(2,
										delete_tag_detalis.tag_name);
							}

							if (delete_tag_detalis.tag_description == null) {
								pstmt_tJDBCOutput_29.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_29.setString(3,
										delete_tag_detalis.tag_description);
							}

							if (delete_tag_detalis.tag_path == null) {
								pstmt_tJDBCOutput_29.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_29.setString(4,
										delete_tag_detalis.tag_path);
							}

							pstmt_tJDBCOutput_29.setShort(5,
									delete_tag_detalis.tag_level);

							if (delete_tag_detalis.create_date != null) {
								pstmt_tJDBCOutput_29.setTimestamp(
										6,
										new java.sql.Timestamp(
												delete_tag_detalis.create_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_29.setNull(6,
										java.sql.Types.DATE);
							}

							if (delete_tag_detalis.update_date != null) {
								pstmt_tJDBCOutput_29.setTimestamp(
										7,
										new java.sql.Timestamp(
												delete_tag_detalis.update_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_29.setNull(7,
										java.sql.Types.DATE);
							}

							if (delete_tag_detalis.delete_date != null) {
								pstmt_tJDBCOutput_29.setTimestamp(
										8,
										new java.sql.Timestamp(
												delete_tag_detalis.delete_date
														.getTime()));
							} else {
								pstmt_tJDBCOutput_29.setNull(8,
										java.sql.Types.DATE);
							}

							try {
								insertedCount_tJDBCOutput_29 = insertedCount_tJDBCOutput_29
										+ pstmt_tJDBCOutput_29.executeUpdate();
								nb_line_tJDBCOutput_29++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_29 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_29++;

							/**
							 * [tJDBCOutput_29 main ] stop
							 */

						} // End of branch "delete_tag_detalis"

						/**
						 * [tJDBCInput_50 end ] start
						 */

						currentComponent = "tJDBCInput_50";

					}
				} finally {
					rs_tJDBCInput_50.close();
					stmt_tJDBCInput_50.close();

				}
				globalMap.put("tJDBCInput_50_NB_LINE", nb_line_tJDBCInput_50);

				ok_Hash.put("tJDBCInput_50", true);
				end_Hash.put("tJDBCInput_50", System.currentTimeMillis());

				/**
				 * [tJDBCInput_50 end ] stop
				 */

				/**
				 * [tMap_29 end ] start
				 */

				currentComponent = "tMap_29";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row13 != null) {
					tHash_Lookup_row13.endGet();
				}
				globalMap.remove("tHash_Lookup_row13");

				// ###############################

				ok_Hash.put("tMap_29", true);
				end_Hash.put("tMap_29", System.currentTimeMillis());

				/**
				 * [tMap_29 end ] stop
				 */

				/**
				 * [tJDBCOutput_29 end ] start
				 */

				currentComponent = "tJDBCOutput_29";

				if (pstmt_tJDBCOutput_29 != null) {

					pstmt_tJDBCOutput_29.close();

				}

				nb_line_deleted_tJDBCOutput_29 = nb_line_deleted_tJDBCOutput_29
						+ deletedCount_tJDBCOutput_29;
				nb_line_update_tJDBCOutput_29 = nb_line_update_tJDBCOutput_29
						+ updatedCount_tJDBCOutput_29;
				nb_line_inserted_tJDBCOutput_29 = nb_line_inserted_tJDBCOutput_29
						+ insertedCount_tJDBCOutput_29;
				nb_line_rejected_tJDBCOutput_29 = nb_line_rejected_tJDBCOutput_29
						+ rejectedCount_tJDBCOutput_29;

				globalMap.put("tJDBCOutput_29_NB_LINE", nb_line_tJDBCOutput_29);
				globalMap.put("tJDBCOutput_29_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_29);
				globalMap.put("tJDBCOutput_29_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_29);
				globalMap.put("tJDBCOutput_29_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_29);
				globalMap.put("tJDBCOutput_29_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_29);

				ok_Hash.put("tJDBCOutput_29", true);
				end_Hash.put("tJDBCOutput_29", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_29 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCInput_50:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_29"
			globalMap.remove("tHash_Lookup_row13");

			try {

				/**
				 * [tJDBCInput_50 finally ] start
				 */

				currentComponent = "tJDBCInput_50";

				/**
				 * [tJDBCInput_50 finally ] stop
				 */

				/**
				 * [tMap_29 finally ] start
				 */

				currentComponent = "tMap_29";

				/**
				 * [tMap_29 finally ] stop
				 */

				/**
				 * [tJDBCOutput_29 finally ] start
				 */

				currentComponent = "tJDBCOutput_29";

				/**
				 * [tJDBCOutput_29 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_50_SUBPROCESS_STATE", 1);
	}

	public void tJDBCRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJDBCRow_1 begin ] start
				 */

				ok_Hash.put("tJDBCRow_1", false);
				start_Hash.put("tJDBCRow_1", System.currentTimeMillis());

				currentComponent = "tJDBCRow_1";

				int tos_count_tJDBCRow_1 = 0;

				java.sql.Connection connection_tJDBCRow_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCRow_1 = connection_tJDBCRow_1
						.createStatement();
				String query_tJDBCRow_1 = "";
				boolean whetherReject_tJDBCRow_1 = false;

				/**
				 * [tJDBCRow_1 begin ] stop
				 */
				/**
				 * [tJDBCRow_1 main ] start
				 */

				currentComponent = "tJDBCRow_1";

				query_tJDBCRow_1 = "select update_tags_path_child('"
						+ routines.RoutineHistoryETL.dateFormat(
								context.runTime, "yyyy-MM-dd HH:mm:ss.SSSSSS")
						+ "')";
				whetherReject_tJDBCRow_1 = false;
				globalMap.put("tJDBCRow_1_QUERY", query_tJDBCRow_1);
				try {
					stmt_tJDBCRow_1.execute(query_tJDBCRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tJDBCRow_1 = true;
					throw (e);
				}

				if (!whetherReject_tJDBCRow_1) {
				}

				tos_count_tJDBCRow_1++;

				/**
				 * [tJDBCRow_1 main ] stop
				 */
				/**
				 * [tJDBCRow_1 end ] start
				 */

				currentComponent = "tJDBCRow_1";

				stmt_tJDBCRow_1.close();

				ok_Hash.put("tJDBCRow_1", true);
				end_Hash.put("tJDBCRow_1", System.currentTimeMillis());

				/**
				 * [tJDBCRow_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJDBCRow_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_52Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCRow_1 finally ] start
				 */

				currentComponent = "tJDBCRow_1";

				/**
				 * [tJDBCRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCRow_1_SUBPROCESS_STATE", 1);
	}

	public static class updateFirstSyncStruct implements
			routines.system.IPersistableRow<updateFirstSyncStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String var_name;

		public String getVar_name() {
			return this.var_name;
		}

		public String var_value;

		public String getVar_value() {
			return this.var_value;
		}

		public java.util.Date var_datetime;

		public java.util.Date getVar_datetime() {
			return this.var_datetime;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.var_name == null) ? 0 : this.var_name
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final updateFirstSyncStruct other = (updateFirstSyncStruct) obj;

			if (this.var_name == null) {
				if (other.var_name != null)
					return false;

			} else if (!this.var_name.equals(other.var_name))

				return false;

			return true;
		}

		public void copyDataTo(updateFirstSyncStruct other) {

			other.var_name = this.var_name;
			other.var_value = this.var_value;
			other.var_datetime = this.var_datetime;

		}

		public void copyKeysDataTo(updateFirstSyncStruct other) {

			other.var_name = this.var_name;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.var_name = readString(dis);

					this.var_value = readString(dis);

					this.var_datetime = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.var_name, dos);

				// String

				writeString(this.var_value, dos);

				// java.util.Date

				writeDate(this.var_datetime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("var_name=" + var_name);
			sb.append(",var_value=" + var_value);
			sb.append(",var_datetime=" + String.valueOf(var_datetime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(updateFirstSyncStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.var_name, other.var_name);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class update_lastSyncStruct implements
			routines.system.IPersistableRow<update_lastSyncStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String var_name;

		public String getVar_name() {
			return this.var_name;
		}

		public String var_value;

		public String getVar_value() {
			return this.var_value;
		}

		public java.util.Date var_datetime;

		public java.util.Date getVar_datetime() {
			return this.var_datetime;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.var_name == null) ? 0 : this.var_name
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final update_lastSyncStruct other = (update_lastSyncStruct) obj;

			if (this.var_name == null) {
				if (other.var_name != null)
					return false;

			} else if (!this.var_name.equals(other.var_name))

				return false;

			return true;
		}

		public void copyDataTo(update_lastSyncStruct other) {

			other.var_name = this.var_name;
			other.var_value = this.var_value;
			other.var_datetime = this.var_datetime;

		}

		public void copyKeysDataTo(update_lastSyncStruct other) {

			other.var_name = this.var_name;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.var_name = readString(dis);

					this.var_value = readString(dis);

					this.var_datetime = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.var_name, dos);

				// String

				writeString(this.var_value, dos);

				// java.util.Date

				writeDate(this.var_datetime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("var_name=" + var_name);
			sb.append(",var_value=" + var_value);
			sb.append(",var_datetime=" + String.valueOf(var_datetime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(update_lastSyncStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.var_name, other.var_name);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row44Struct implements
			routines.system.IPersistableRow<row44Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public String var_name;

		public String getVar_name() {
			return this.var_name;
		}

		public String var_value;

		public String getVar_value() {
			return this.var_value;
		}

		public java.util.Date var_datetime;

		public java.util.Date getVar_datetime() {
			return this.var_datetime;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.var_name = readString(dis);

					this.var_value = readString(dis);

					this.var_datetime = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.var_name, dos);

				// String

				writeString(this.var_value, dos);

				// java.util.Date

				writeDate(this.var_datetime, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("var_name=" + var_name);
			sb.append(",var_value=" + var_value);
			sb.append(",var_datetime=" + String.valueOf(var_datetime));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row44Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_52Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_52_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row44Struct row44 = new row44Struct();
				updateFirstSyncStruct updateFirstSync = new updateFirstSyncStruct();
				update_lastSyncStruct update_lastSync = new update_lastSyncStruct();

				/**
				 * [tJDBCOutput_30 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_30", false);
				start_Hash.put("tJDBCOutput_30", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_30";

				int tos_count_tJDBCOutput_30 = 0;

				int updateKeyCount_tJDBCOutput_30 = 1;
				if (updateKeyCount_tJDBCOutput_30 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_30 = 0;
				int nb_line_update_tJDBCOutput_30 = 0;
				int nb_line_inserted_tJDBCOutput_30 = 0;
				int nb_line_deleted_tJDBCOutput_30 = 0;
				int nb_line_rejected_tJDBCOutput_30 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_30 = 0;

				int deletedCount_tJDBCOutput_30 = 0;
				int updatedCount_tJDBCOutput_30 = 0;
				int insertedCount_tJDBCOutput_30 = 0;
				int rejectedCount_tJDBCOutput_30 = 0;

				boolean whetherReject_tJDBCOutput_30 = false;

				java.sql.Connection connection_tJDBCOutput_30 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");
				int batchSize_tJDBCOutput_30 = 10000;
				int batchSizeCounter_tJDBCOutput_30 = 0;

				String update_tJDBCOutput_30 = "UPDATE "
						+ "history_configuration"
						+ " SET var_value = ?,var_datetime = ? WHERE var_name = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_30 = connection_tJDBCOutput_30
						.prepareStatement(update_tJDBCOutput_30);

				/**
				 * [tJDBCOutput_30 begin ] stop
				 */

				/**
				 * [tJDBCOutput_33 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_33", false);
				start_Hash.put("tJDBCOutput_33", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_33";

				int tos_count_tJDBCOutput_33 = 0;

				int updateKeyCount_tJDBCOutput_33 = 1;
				if (updateKeyCount_tJDBCOutput_33 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_33 = 0;
				int nb_line_update_tJDBCOutput_33 = 0;
				int nb_line_inserted_tJDBCOutput_33 = 0;
				int nb_line_deleted_tJDBCOutput_33 = 0;
				int nb_line_rejected_tJDBCOutput_33 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_33 = 0;

				int deletedCount_tJDBCOutput_33 = 0;
				int updatedCount_tJDBCOutput_33 = 0;
				int insertedCount_tJDBCOutput_33 = 0;
				int rejectedCount_tJDBCOutput_33 = 0;

				boolean whetherReject_tJDBCOutput_33 = false;

				java.sql.Connection connection_tJDBCOutput_33 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				int batchSize_tJDBCOutput_33 = 10000;
				int batchSizeCounter_tJDBCOutput_33 = 0;

				String update_tJDBCOutput_33 = "UPDATE "
						+ "dwh_history_timekeeping"
						+ " SET var_value = ?,var_datetime = ? WHERE var_name = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_33 = connection_tJDBCOutput_33
						.prepareStatement(update_tJDBCOutput_33);

				/**
				 * [tJDBCOutput_33 begin ] stop
				 */

				/**
				 * [tMap_30 begin ] start
				 */

				ok_Hash.put("tMap_30", false);
				start_Hash.put("tMap_30", System.currentTimeMillis());

				currentComponent = "tMap_30";

				int tos_count_tMap_30 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_30__Struct {
				}
				Var__tMap_30__Struct Var__tMap_30 = new Var__tMap_30__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				updateFirstSyncStruct updateFirstSync_tmp = new updateFirstSyncStruct();
				update_lastSyncStruct update_lastSync_tmp = new update_lastSyncStruct();
				// ###############################

				/**
				 * [tMap_30 begin ] stop
				 */

				/**
				 * [tJDBCInput_52 begin ] start
				 */

				ok_Hash.put("tJDBCInput_52", false);
				start_Hash.put("tJDBCInput_52", System.currentTimeMillis());

				currentComponent = "tJDBCInput_52";

				int tos_count_tJDBCInput_52 = 0;

				int nb_line_tJDBCInput_52 = 0;
				java.sql.Connection conn_tJDBCInput_52 = null;
				conn_tJDBCInput_52 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_52 = conn_tJDBCInput_52
						.createStatement();

				String dbquery_tJDBCInput_52 = "SELECT    var_name,    var_value,    var_datetime FROM history_configuration  WHERE var_name = 'firstSync'";

				globalMap.put("tJDBCInput_52_QUERY", dbquery_tJDBCInput_52);
				java.sql.ResultSet rs_tJDBCInput_52 = null;
				try {
					rs_tJDBCInput_52 = stmt_tJDBCInput_52
							.executeQuery(dbquery_tJDBCInput_52);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_52 = rs_tJDBCInput_52
							.getMetaData();
					int colQtyInRs_tJDBCInput_52 = rsmd_tJDBCInput_52
							.getColumnCount();

					String tmpContent_tJDBCInput_52 = null;
					int column_index_tJDBCInput_52 = 1;

					while (rs_tJDBCInput_52.next()) {
						nb_line_tJDBCInput_52++;

						column_index_tJDBCInput_52 = 1;

						if (colQtyInRs_tJDBCInput_52 < column_index_tJDBCInput_52) {
							row44.var_name = null;
						} else {

							tmpContent_tJDBCInput_52 = rs_tJDBCInput_52
									.getString(column_index_tJDBCInput_52);
							if (tmpContent_tJDBCInput_52 != null) {
								row44.var_name = tmpContent_tJDBCInput_52;
							} else {
								row44.var_name = null;
							}

						}

						column_index_tJDBCInput_52 = 2;

						if (colQtyInRs_tJDBCInput_52 < column_index_tJDBCInput_52) {
							row44.var_value = null;
						} else {

							tmpContent_tJDBCInput_52 = rs_tJDBCInput_52
									.getString(column_index_tJDBCInput_52);
							if (tmpContent_tJDBCInput_52 != null) {
								row44.var_value = tmpContent_tJDBCInput_52;
							} else {
								row44.var_value = null;
							}

						}

						column_index_tJDBCInput_52 = 3;

						if (colQtyInRs_tJDBCInput_52 < column_index_tJDBCInput_52) {
							row44.var_datetime = null;
						} else {

							java.util.Date date_tJDBCInput_52 = null;
							try {
								date_tJDBCInput_52 = rs_tJDBCInput_52
										.getTimestamp(column_index_tJDBCInput_52);
							} catch (java.lang.Exception e) {
								date_tJDBCInput_52 = rs_tJDBCInput_52
										.getDate(column_index_tJDBCInput_52);
							}
							row44.var_datetime = date_tJDBCInput_52;

						}

						/**
						 * [tJDBCInput_52 begin ] stop
						 */
						/**
						 * [tJDBCInput_52 main ] start
						 */

						currentComponent = "tJDBCInput_52";

						tos_count_tJDBCInput_52++;

						/**
						 * [tJDBCInput_52 main ] stop
						 */

						/**
						 * [tMap_30 main ] start
						 */

						currentComponent = "tMap_30";

						boolean hasCasePrimitiveKeyWithNull_tMap_30 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_30 = false;
						boolean mainRowRejected_tMap_30 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_30__Struct Var = Var__tMap_30;// ###############################
							// ###############################
							// # Output tables

							updateFirstSync = null;
							update_lastSync = null;

							// # Output table : 'updateFirstSync'
							updateFirstSync_tmp.var_name = row44.var_name;
							updateFirstSync_tmp.var_value = "false";
							updateFirstSync_tmp.var_datetime = row44.var_value
									.equals("true") ? context.runTime
									: row44.var_datetime;
							updateFirstSync = updateFirstSync_tmp;

							// # Output table : 'update_lastSync'
							update_lastSync_tmp.var_name = "lastSync";
							update_lastSync_tmp.var_value = null;
							update_lastSync_tmp.var_datetime = row44.var_value
									.equals("true") ? TalendDate.parseDate(
									"yyyy-MM-dd HH:mm:ss",
									"2001-01-01 01:01:00") : context.runTime;
							update_lastSync = update_lastSync_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_30 = false;

						tos_count_tMap_30++;

						/**
						 * [tMap_30 main ] stop
						 */
						// Start of branch "updateFirstSync"
						if (updateFirstSync != null) {

							/**
							 * [tJDBCOutput_30 main ] start
							 */

							currentComponent = "tJDBCOutput_30";

							whetherReject_tJDBCOutput_30 = false;
							if (updateFirstSync.var_value == null) {
								pstmt_tJDBCOutput_30.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_30.setString(1,
										updateFirstSync.var_value);
							}

							if (updateFirstSync.var_datetime != null) {
								pstmt_tJDBCOutput_30.setTimestamp(
										2,
										new java.sql.Timestamp(
												updateFirstSync.var_datetime
														.getTime()));
							} else {
								pstmt_tJDBCOutput_30.setNull(2,
										java.sql.Types.DATE);
							}

							if (updateFirstSync.var_name == null) {
								pstmt_tJDBCOutput_30.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_30.setString(3,
										updateFirstSync.var_name);
							}

							try {
								updatedCount_tJDBCOutput_30 = updatedCount_tJDBCOutput_30
										+ pstmt_tJDBCOutput_30.executeUpdate();
								nb_line_tJDBCOutput_30++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_30 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_30++;

							/**
							 * [tJDBCOutput_30 main ] stop
							 */

						} // End of branch "updateFirstSync"

						// Start of branch "update_lastSync"
						if (update_lastSync != null) {

							/**
							 * [tJDBCOutput_33 main ] start
							 */

							currentComponent = "tJDBCOutput_33";

							whetherReject_tJDBCOutput_33 = false;
							if (update_lastSync.var_value == null) {
								pstmt_tJDBCOutput_33.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_33.setString(1,
										update_lastSync.var_value);
							}

							if (update_lastSync.var_datetime != null) {
								pstmt_tJDBCOutput_33.setTimestamp(
										2,
										new java.sql.Timestamp(
												update_lastSync.var_datetime
														.getTime()));
							} else {
								pstmt_tJDBCOutput_33.setNull(2,
										java.sql.Types.DATE);
							}

							if (update_lastSync.var_name == null) {
								pstmt_tJDBCOutput_33.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tJDBCOutput_33.setString(3,
										update_lastSync.var_name);
							}

							try {
								updatedCount_tJDBCOutput_33 = updatedCount_tJDBCOutput_33
										+ pstmt_tJDBCOutput_33.executeUpdate();
								nb_line_tJDBCOutput_33++;
							} catch (java.lang.Exception e) {
								whetherReject_tJDBCOutput_33 = true;
								throw (e);
							}

							tos_count_tJDBCOutput_33++;

							/**
							 * [tJDBCOutput_33 main ] stop
							 */

						} // End of branch "update_lastSync"

						/**
						 * [tJDBCInput_52 end ] start
						 */

						currentComponent = "tJDBCInput_52";

					}
				} finally {
					rs_tJDBCInput_52.close();
					stmt_tJDBCInput_52.close();

				}
				globalMap.put("tJDBCInput_52_NB_LINE", nb_line_tJDBCInput_52);

				ok_Hash.put("tJDBCInput_52", true);
				end_Hash.put("tJDBCInput_52", System.currentTimeMillis());

				/**
				 * [tJDBCInput_52 end ] stop
				 */

				/**
				 * [tMap_30 end ] start
				 */

				currentComponent = "tMap_30";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_30", true);
				end_Hash.put("tMap_30", System.currentTimeMillis());

				/**
				 * [tMap_30 end ] stop
				 */

				/**
				 * [tJDBCOutput_30 end ] start
				 */

				currentComponent = "tJDBCOutput_30";

				if (pstmt_tJDBCOutput_30 != null) {

					pstmt_tJDBCOutput_30.close();

				}

				nb_line_deleted_tJDBCOutput_30 = nb_line_deleted_tJDBCOutput_30
						+ deletedCount_tJDBCOutput_30;
				nb_line_update_tJDBCOutput_30 = nb_line_update_tJDBCOutput_30
						+ updatedCount_tJDBCOutput_30;
				nb_line_inserted_tJDBCOutput_30 = nb_line_inserted_tJDBCOutput_30
						+ insertedCount_tJDBCOutput_30;
				nb_line_rejected_tJDBCOutput_30 = nb_line_rejected_tJDBCOutput_30
						+ rejectedCount_tJDBCOutput_30;

				globalMap.put("tJDBCOutput_30_NB_LINE", nb_line_tJDBCOutput_30);
				globalMap.put("tJDBCOutput_30_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_30);
				globalMap.put("tJDBCOutput_30_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_30);
				globalMap.put("tJDBCOutput_30_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_30);
				globalMap.put("tJDBCOutput_30_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_30);

				ok_Hash.put("tJDBCOutput_30", true);
				end_Hash.put("tJDBCOutput_30", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_30 end ] stop
				 */

				/**
				 * [tJDBCOutput_33 end ] start
				 */

				currentComponent = "tJDBCOutput_33";

				if (pstmt_tJDBCOutput_33 != null) {

					pstmt_tJDBCOutput_33.close();

				}

				nb_line_deleted_tJDBCOutput_33 = nb_line_deleted_tJDBCOutput_33
						+ deletedCount_tJDBCOutput_33;
				nb_line_update_tJDBCOutput_33 = nb_line_update_tJDBCOutput_33
						+ updatedCount_tJDBCOutput_33;
				nb_line_inserted_tJDBCOutput_33 = nb_line_inserted_tJDBCOutput_33
						+ insertedCount_tJDBCOutput_33;
				nb_line_rejected_tJDBCOutput_33 = nb_line_rejected_tJDBCOutput_33
						+ rejectedCount_tJDBCOutput_33;

				globalMap.put("tJDBCOutput_33_NB_LINE", nb_line_tJDBCOutput_33);
				globalMap.put("tJDBCOutput_33_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_33);
				globalMap.put("tJDBCOutput_33_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_33);
				globalMap.put("tJDBCOutput_33_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_33);
				globalMap.put("tJDBCOutput_33_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_33);

				ok_Hash.put("tJDBCOutput_33", true);
				end_Hash.put("tJDBCOutput_33", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_33 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_52 finally ] start
				 */

				currentComponent = "tJDBCInput_52";

				/**
				 * [tJDBCInput_52 finally ] stop
				 */

				/**
				 * [tMap_30 finally ] start
				 */

				currentComponent = "tMap_30";

				/**
				 * [tMap_30 finally ] stop
				 */

				/**
				 * [tJDBCOutput_30 finally ] start
				 */

				currentComponent = "tJDBCOutput_30";

				/**
				 * [tJDBCOutput_30 finally ] stop
				 */

				/**
				 * [tJDBCOutput_33 finally ] start
				 */

				currentComponent = "tJDBCOutput_33";

				/**
				 * [tJDBCOutput_33 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_52_SUBPROCESS_STATE", 1);
	}

	public static class row35Struct implements
			routines.system.IPersistableComparableLookupRow<row35Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.datacenter_join_id == null) ? 0
								: this.datacenter_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row35Struct other = (row35Struct) obj;

			if (this.datacenter_join_id == null) {
				if (other.datacenter_join_id != null)
					return false;

			} else if (!this.datacenter_join_id
					.equals(other.datacenter_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row35Struct other) {

			other.history_id = this.history_id;
			other.datacenter_join_id = this.datacenter_join_id;

		}

		public void copyKeysDataTo(row35Struct other) {

			other.datacenter_join_id = this.datacenter_join_id;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.datacenter_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.datacenter_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.history_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.history_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",datacenter_join_id=" + datacenter_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.datacenter_join_id,
					other.datacenter_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_39Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_39_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row35Struct row35 = new row35Struct();

				/**
				 * [tAdvancedHash_row35 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row35", false);
				start_Hash.put("tAdvancedHash_row35",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row35";

				int tos_count_tAdvancedHash_row35 = 0;

				// connection name:row35
				// source node:tJDBCInput_39 - inputs:(after_tJDBCInput_1)
				// outputs:(row35,row35) | target node:tAdvancedHash_row35 -
				// inputs:(row35) outputs:()
				// linked node: tMap_1 - inputs:(row1,row35)
				// outputs:(cluster_configuration)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row35 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row35Struct> getLookup(matchingModeEnum_row35);

				globalMap.put("tHash_Lookup_row35", tHash_Lookup_row35);

				/**
				 * [tAdvancedHash_row35 begin ] stop
				 */

				/**
				 * [tJDBCInput_39 begin ] start
				 */

				ok_Hash.put("tJDBCInput_39", false);
				start_Hash.put("tJDBCInput_39", System.currentTimeMillis());

				currentComponent = "tJDBCInput_39";

				int tos_count_tJDBCInput_39 = 0;

				int nb_line_tJDBCInput_39 = 0;
				java.sql.Connection conn_tJDBCInput_39 = null;
				conn_tJDBCInput_39 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_39 = conn_tJDBCInput_39
						.createStatement();

				String dbquery_tJDBCInput_39 = "SELECT history_id, upper(cast(datacenter_id as char(36))) as datacenter_join_id  FROM  v3_5_latest_configuration_datacenters";

				globalMap.put("tJDBCInput_39_QUERY", dbquery_tJDBCInput_39);
				java.sql.ResultSet rs_tJDBCInput_39 = null;
				try {
					rs_tJDBCInput_39 = stmt_tJDBCInput_39
							.executeQuery(dbquery_tJDBCInput_39);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_39 = rs_tJDBCInput_39
							.getMetaData();
					int colQtyInRs_tJDBCInput_39 = rsmd_tJDBCInput_39
							.getColumnCount();

					String tmpContent_tJDBCInput_39 = null;
					int column_index_tJDBCInput_39 = 1;

					while (rs_tJDBCInput_39.next()) {
						nb_line_tJDBCInput_39++;

						column_index_tJDBCInput_39 = 1;

						if (colQtyInRs_tJDBCInput_39 < column_index_tJDBCInput_39) {
							row35.history_id = null;
						} else {

							if (rs_tJDBCInput_39
									.getObject(column_index_tJDBCInput_39) != null) {
								row35.history_id = rs_tJDBCInput_39
										.getInt(column_index_tJDBCInput_39);
							} else {
								row35.history_id = null;
							}

						}

						column_index_tJDBCInput_39 = 2;

						if (colQtyInRs_tJDBCInput_39 < column_index_tJDBCInput_39) {
							row35.datacenter_join_id = null;
						} else {

							tmpContent_tJDBCInput_39 = rs_tJDBCInput_39
									.getString(column_index_tJDBCInput_39);
							if (tmpContent_tJDBCInput_39 != null) {
								row35.datacenter_join_id = tmpContent_tJDBCInput_39;
							} else {
								row35.datacenter_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_39 begin ] stop
						 */
						/**
						 * [tJDBCInput_39 main ] start
						 */

						currentComponent = "tJDBCInput_39";

						tos_count_tJDBCInput_39++;

						/**
						 * [tJDBCInput_39 main ] stop
						 */

						/**
						 * [tAdvancedHash_row35 main ] start
						 */

						currentComponent = "tAdvancedHash_row35";

						row35Struct row35_HashRow = new row35Struct();

						row35_HashRow.history_id = row35.history_id;

						row35_HashRow.datacenter_join_id = row35.datacenter_join_id;

						tHash_Lookup_row35.put(row35_HashRow);

						tos_count_tAdvancedHash_row35++;

						/**
						 * [tAdvancedHash_row35 main ] stop
						 */

						/**
						 * [tJDBCInput_39 end ] start
						 */

						currentComponent = "tJDBCInput_39";

					}
				} finally {
					rs_tJDBCInput_39.close();
					stmt_tJDBCInput_39.close();

				}
				globalMap.put("tJDBCInput_39_NB_LINE", nb_line_tJDBCInput_39);

				ok_Hash.put("tJDBCInput_39", true);
				end_Hash.put("tJDBCInput_39", System.currentTimeMillis());

				/**
				 * [tJDBCInput_39 end ] stop
				 */

				/**
				 * [tAdvancedHash_row35 end ] start
				 */

				currentComponent = "tAdvancedHash_row35";

				tHash_Lookup_row35.endPut();

				ok_Hash.put("tAdvancedHash_row35", true);
				end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row35 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_39 finally ] start
				 */

				currentComponent = "tJDBCInput_39";

				/**
				 * [tJDBCInput_39 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row35 finally ] start
				 */

				currentComponent = "tAdvancedHash_row35";

				/**
				 * [tAdvancedHash_row35 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_39_SUBPROCESS_STATE", 1);
	}

	public static class row36Struct implements
			routines.system.IPersistableComparableLookupRow<row36Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public String cluster_join_id;

		public String getCluster_join_id() {
			return this.cluster_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cluster_join_id == null) ? 0
								: this.cluster_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row36Struct other = (row36Struct) obj;

			if (this.cluster_join_id == null) {
				if (other.cluster_join_id != null)
					return false;

			} else if (!this.cluster_join_id.equals(other.cluster_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row36Struct other) {

			other.history_id = this.history_id;
			other.cluster_join_id = this.cluster_join_id;

		}

		public void copyKeysDataTo(row36Struct other) {

			other.cluster_join_id = this.cluster_join_id;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.cluster_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cluster_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.history_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.history_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",cluster_join_id=" + cluster_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cluster_join_id,
					other.cluster_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_40Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_40_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row36Struct row36 = new row36Struct();

				/**
				 * [tAdvancedHash_row36 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row36", false);
				start_Hash.put("tAdvancedHash_row36",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row36";

				int tos_count_tAdvancedHash_row36 = 0;

				// connection name:row36
				// source node:tJDBCInput_40 - inputs:(after_tJDBCInput_4)
				// outputs:(row36,row36) | target node:tAdvancedHash_row36 -
				// inputs:(row36) outputs:()
				// linked node: tMap_4 - inputs:(row7,row36)
				// outputs:(host_configuration)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row36 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row36Struct> getLookup(matchingModeEnum_row36);

				globalMap.put("tHash_Lookup_row36", tHash_Lookup_row36);

				/**
				 * [tAdvancedHash_row36 begin ] stop
				 */

				/**
				 * [tJDBCInput_40 begin ] start
				 */

				ok_Hash.put("tJDBCInput_40", false);
				start_Hash.put("tJDBCInput_40", System.currentTimeMillis());

				currentComponent = "tJDBCInput_40";

				int tos_count_tJDBCInput_40 = 0;

				int nb_line_tJDBCInput_40 = 0;
				java.sql.Connection conn_tJDBCInput_40 = null;
				conn_tJDBCInput_40 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_40 = conn_tJDBCInput_40
						.createStatement();

				String dbquery_tJDBCInput_40 = "SELECT history_id, upper(cast(cluster_id as char(36))) as cluster_join_id  FROM  v3_5_latest_configuration_clusters";

				globalMap.put("tJDBCInput_40_QUERY", dbquery_tJDBCInput_40);
				java.sql.ResultSet rs_tJDBCInput_40 = null;
				try {
					rs_tJDBCInput_40 = stmt_tJDBCInput_40
							.executeQuery(dbquery_tJDBCInput_40);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_40 = rs_tJDBCInput_40
							.getMetaData();
					int colQtyInRs_tJDBCInput_40 = rsmd_tJDBCInput_40
							.getColumnCount();

					String tmpContent_tJDBCInput_40 = null;
					int column_index_tJDBCInput_40 = 1;

					while (rs_tJDBCInput_40.next()) {
						nb_line_tJDBCInput_40++;

						column_index_tJDBCInput_40 = 1;

						if (colQtyInRs_tJDBCInput_40 < column_index_tJDBCInput_40) {
							row36.history_id = null;
						} else {

							if (rs_tJDBCInput_40
									.getObject(column_index_tJDBCInput_40) != null) {
								row36.history_id = rs_tJDBCInput_40
										.getInt(column_index_tJDBCInput_40);
							} else {
								row36.history_id = null;
							}

						}

						column_index_tJDBCInput_40 = 2;

						if (colQtyInRs_tJDBCInput_40 < column_index_tJDBCInput_40) {
							row36.cluster_join_id = null;
						} else {

							tmpContent_tJDBCInput_40 = rs_tJDBCInput_40
									.getString(column_index_tJDBCInput_40);
							if (tmpContent_tJDBCInput_40 != null) {
								row36.cluster_join_id = tmpContent_tJDBCInput_40;
							} else {
								row36.cluster_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_40 begin ] stop
						 */
						/**
						 * [tJDBCInput_40 main ] start
						 */

						currentComponent = "tJDBCInput_40";

						tos_count_tJDBCInput_40++;

						/**
						 * [tJDBCInput_40 main ] stop
						 */

						/**
						 * [tAdvancedHash_row36 main ] start
						 */

						currentComponent = "tAdvancedHash_row36";

						row36Struct row36_HashRow = new row36Struct();

						row36_HashRow.history_id = row36.history_id;

						row36_HashRow.cluster_join_id = row36.cluster_join_id;

						tHash_Lookup_row36.put(row36_HashRow);

						tos_count_tAdvancedHash_row36++;

						/**
						 * [tAdvancedHash_row36 main ] stop
						 */

						/**
						 * [tJDBCInput_40 end ] start
						 */

						currentComponent = "tJDBCInput_40";

					}
				} finally {
					rs_tJDBCInput_40.close();
					stmt_tJDBCInput_40.close();

				}
				globalMap.put("tJDBCInput_40_NB_LINE", nb_line_tJDBCInput_40);

				ok_Hash.put("tJDBCInput_40", true);
				end_Hash.put("tJDBCInput_40", System.currentTimeMillis());

				/**
				 * [tJDBCInput_40 end ] stop
				 */

				/**
				 * [tAdvancedHash_row36 end ] start
				 */

				currentComponent = "tAdvancedHash_row36";

				tHash_Lookup_row36.endPut();

				ok_Hash.put("tAdvancedHash_row36", true);
				end_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row36 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_40 finally ] start
				 */

				currentComponent = "tJDBCInput_40";

				/**
				 * [tJDBCInput_40 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row36 finally ] start
				 */

				currentComponent = "tAdvancedHash_row36";

				/**
				 * [tAdvancedHash_row36 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_40_SUBPROCESS_STATE", 1);
	}

	public static class row37Struct implements
			routines.system.IPersistableComparableLookupRow<row37Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public String host_join_id;

		public String getHost_join_id() {
			return this.host_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.host_join_id == null) ? 0 : this.host_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row37Struct other = (row37Struct) obj;

			if (this.host_join_id == null) {
				if (other.host_join_id != null)
					return false;

			} else if (!this.host_join_id.equals(other.host_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row37Struct other) {

			other.history_id = this.history_id;
			other.host_join_id = this.host_join_id;

		}

		public void copyKeysDataTo(row37Struct other) {

			other.host_join_id = this.host_join_id;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.host_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.history_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.history_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",host_join_id=" + host_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.host_join_id,
					other.host_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_41Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_41_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row37Struct row37 = new row37Struct();

				/**
				 * [tAdvancedHash_row37 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row37", false);
				start_Hash.put("tAdvancedHash_row37",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row37";

				int tos_count_tAdvancedHash_row37 = 0;

				// connection name:row37
				// source node:tJDBCInput_41 - inputs:(after_tJDBCInput_5)
				// outputs:(row37,row37) | target node:tAdvancedHash_row37 -
				// inputs:(row37) outputs:()
				// linked node: tMap_5 - inputs:(row2,row37)
				// outputs:(hinterface_configuration)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row37 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row37Struct> getLookup(matchingModeEnum_row37);

				globalMap.put("tHash_Lookup_row37", tHash_Lookup_row37);

				/**
				 * [tAdvancedHash_row37 begin ] stop
				 */

				/**
				 * [tJDBCInput_41 begin ] start
				 */

				ok_Hash.put("tJDBCInput_41", false);
				start_Hash.put("tJDBCInput_41", System.currentTimeMillis());

				currentComponent = "tJDBCInput_41";

				int tos_count_tJDBCInput_41 = 0;

				int nb_line_tJDBCInput_41 = 0;
				java.sql.Connection conn_tJDBCInput_41 = null;
				conn_tJDBCInput_41 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_41 = conn_tJDBCInput_41
						.createStatement();

				String dbquery_tJDBCInput_41 = "SELECT history_id, upper(cast(host_id as char(36))) as host_join_id  FROM  v3_5_latest_configuration_hosts";

				globalMap.put("tJDBCInput_41_QUERY", dbquery_tJDBCInput_41);
				java.sql.ResultSet rs_tJDBCInput_41 = null;
				try {
					rs_tJDBCInput_41 = stmt_tJDBCInput_41
							.executeQuery(dbquery_tJDBCInput_41);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_41 = rs_tJDBCInput_41
							.getMetaData();
					int colQtyInRs_tJDBCInput_41 = rsmd_tJDBCInput_41
							.getColumnCount();

					String tmpContent_tJDBCInput_41 = null;
					int column_index_tJDBCInput_41 = 1;

					while (rs_tJDBCInput_41.next()) {
						nb_line_tJDBCInput_41++;

						column_index_tJDBCInput_41 = 1;

						if (colQtyInRs_tJDBCInput_41 < column_index_tJDBCInput_41) {
							row37.history_id = null;
						} else {

							if (rs_tJDBCInput_41
									.getObject(column_index_tJDBCInput_41) != null) {
								row37.history_id = rs_tJDBCInput_41
										.getInt(column_index_tJDBCInput_41);
							} else {
								row37.history_id = null;
							}

						}

						column_index_tJDBCInput_41 = 2;

						if (colQtyInRs_tJDBCInput_41 < column_index_tJDBCInput_41) {
							row37.host_join_id = null;
						} else {

							tmpContent_tJDBCInput_41 = rs_tJDBCInput_41
									.getString(column_index_tJDBCInput_41);
							if (tmpContent_tJDBCInput_41 != null) {
								row37.host_join_id = tmpContent_tJDBCInput_41;
							} else {
								row37.host_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_41 begin ] stop
						 */
						/**
						 * [tJDBCInput_41 main ] start
						 */

						currentComponent = "tJDBCInput_41";

						tos_count_tJDBCInput_41++;

						/**
						 * [tJDBCInput_41 main ] stop
						 */

						/**
						 * [tAdvancedHash_row37 main ] start
						 */

						currentComponent = "tAdvancedHash_row37";

						row37Struct row37_HashRow = new row37Struct();

						row37_HashRow.history_id = row37.history_id;

						row37_HashRow.host_join_id = row37.host_join_id;

						tHash_Lookup_row37.put(row37_HashRow);

						tos_count_tAdvancedHash_row37++;

						/**
						 * [tAdvancedHash_row37 main ] stop
						 */

						/**
						 * [tJDBCInput_41 end ] start
						 */

						currentComponent = "tJDBCInput_41";

					}
				} finally {
					rs_tJDBCInput_41.close();
					stmt_tJDBCInput_41.close();

				}
				globalMap.put("tJDBCInput_41_NB_LINE", nb_line_tJDBCInput_41);

				ok_Hash.put("tJDBCInput_41", true);
				end_Hash.put("tJDBCInput_41", System.currentTimeMillis());

				/**
				 * [tJDBCInput_41 end ] stop
				 */

				/**
				 * [tAdvancedHash_row37 end ] start
				 */

				currentComponent = "tAdvancedHash_row37";

				tHash_Lookup_row37.endPut();

				ok_Hash.put("tAdvancedHash_row37", true);
				end_Hash.put("tAdvancedHash_row37", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row37 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_41 finally ] start
				 */

				currentComponent = "tJDBCInput_41";

				/**
				 * [tJDBCInput_41 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row37 finally ] start
				 */

				currentComponent = "tAdvancedHash_row37";

				/**
				 * [tAdvancedHash_row37 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_41_SUBPROCESS_STATE", 1);
	}

	public static class row38Struct implements
			routines.system.IPersistableComparableLookupRow<row38Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public String host_join_id;

		public String getHost_join_id() {
			return this.host_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.host_join_id == null) ? 0 : this.host_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row38Struct other = (row38Struct) obj;

			if (this.host_join_id == null) {
				if (other.host_join_id != null)
					return false;

			} else if (!this.host_join_id.equals(other.host_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row38Struct other) {

			other.history_id = this.history_id;
			other.host_join_id = this.host_join_id;

		}

		public void copyKeysDataTo(row38Struct other) {

			other.host_join_id = this.host_join_id;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.host_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.history_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.history_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",host_join_id=" + host_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.host_join_id,
					other.host_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_43Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_43_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row38Struct row38 = new row38Struct();

				/**
				 * [tAdvancedHash_row38 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row38", false);
				start_Hash.put("tAdvancedHash_row38",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row38";

				int tos_count_tAdvancedHash_row38 = 0;

				// connection name:row38
				// source node:tJDBCInput_43 - inputs:(after_tJDBCInput_6)
				// outputs:(row38,row38) | target node:tAdvancedHash_row38 -
				// inputs:(row38) outputs:()
				// linked node: tMap_6 - inputs:(row4,row38,row39)
				// outputs:(vm_configuration)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row38 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row38Struct> getLookup(matchingModeEnum_row38);

				globalMap.put("tHash_Lookup_row38", tHash_Lookup_row38);

				/**
				 * [tAdvancedHash_row38 begin ] stop
				 */

				/**
				 * [tJDBCInput_43 begin ] start
				 */

				ok_Hash.put("tJDBCInput_43", false);
				start_Hash.put("tJDBCInput_43", System.currentTimeMillis());

				currentComponent = "tJDBCInput_43";

				int tos_count_tJDBCInput_43 = 0;

				int nb_line_tJDBCInput_43 = 0;
				java.sql.Connection conn_tJDBCInput_43 = null;
				conn_tJDBCInput_43 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_43 = conn_tJDBCInput_43
						.createStatement();

				String dbquery_tJDBCInput_43 = "SELECT history_id, upper(cast(host_id as char(36))) as host_join_id  FROM  v3_5_latest_configuration_hosts";

				globalMap.put("tJDBCInput_43_QUERY", dbquery_tJDBCInput_43);
				java.sql.ResultSet rs_tJDBCInput_43 = null;
				try {
					rs_tJDBCInput_43 = stmt_tJDBCInput_43
							.executeQuery(dbquery_tJDBCInput_43);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_43 = rs_tJDBCInput_43
							.getMetaData();
					int colQtyInRs_tJDBCInput_43 = rsmd_tJDBCInput_43
							.getColumnCount();

					String tmpContent_tJDBCInput_43 = null;
					int column_index_tJDBCInput_43 = 1;

					while (rs_tJDBCInput_43.next()) {
						nb_line_tJDBCInput_43++;

						column_index_tJDBCInput_43 = 1;

						if (colQtyInRs_tJDBCInput_43 < column_index_tJDBCInput_43) {
							row38.history_id = null;
						} else {

							if (rs_tJDBCInput_43
									.getObject(column_index_tJDBCInput_43) != null) {
								row38.history_id = rs_tJDBCInput_43
										.getInt(column_index_tJDBCInput_43);
							} else {
								row38.history_id = null;
							}

						}

						column_index_tJDBCInput_43 = 2;

						if (colQtyInRs_tJDBCInput_43 < column_index_tJDBCInput_43) {
							row38.host_join_id = null;
						} else {

							tmpContent_tJDBCInput_43 = rs_tJDBCInput_43
									.getString(column_index_tJDBCInput_43);
							if (tmpContent_tJDBCInput_43 != null) {
								row38.host_join_id = tmpContent_tJDBCInput_43;
							} else {
								row38.host_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_43 begin ] stop
						 */
						/**
						 * [tJDBCInput_43 main ] start
						 */

						currentComponent = "tJDBCInput_43";

						tos_count_tJDBCInput_43++;

						/**
						 * [tJDBCInput_43 main ] stop
						 */

						/**
						 * [tAdvancedHash_row38 main ] start
						 */

						currentComponent = "tAdvancedHash_row38";

						row38Struct row38_HashRow = new row38Struct();

						row38_HashRow.history_id = row38.history_id;

						row38_HashRow.host_join_id = row38.host_join_id;

						tHash_Lookup_row38.put(row38_HashRow);

						tos_count_tAdvancedHash_row38++;

						/**
						 * [tAdvancedHash_row38 main ] stop
						 */

						/**
						 * [tJDBCInput_43 end ] start
						 */

						currentComponent = "tJDBCInput_43";

					}
				} finally {
					rs_tJDBCInput_43.close();
					stmt_tJDBCInput_43.close();

				}
				globalMap.put("tJDBCInput_43_NB_LINE", nb_line_tJDBCInput_43);

				ok_Hash.put("tJDBCInput_43", true);
				end_Hash.put("tJDBCInput_43", System.currentTimeMillis());

				/**
				 * [tJDBCInput_43 end ] stop
				 */

				/**
				 * [tAdvancedHash_row38 end ] start
				 */

				currentComponent = "tAdvancedHash_row38";

				tHash_Lookup_row38.endPut();

				ok_Hash.put("tAdvancedHash_row38", true);
				end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row38 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_43 finally ] start
				 */

				currentComponent = "tJDBCInput_43";

				/**
				 * [tJDBCInput_43 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row38 finally ] start
				 */

				currentComponent = "tAdvancedHash_row38";

				/**
				 * [tAdvancedHash_row38 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_43_SUBPROCESS_STATE", 1);
	}

	public static class row39Struct implements
			routines.system.IPersistableComparableLookupRow<row39Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public String cluster_join_id;

		public String getCluster_join_id() {
			return this.cluster_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cluster_join_id == null) ? 0
								: this.cluster_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row39Struct other = (row39Struct) obj;

			if (this.cluster_join_id == null) {
				if (other.cluster_join_id != null)
					return false;

			} else if (!this.cluster_join_id.equals(other.cluster_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row39Struct other) {

			other.history_id = this.history_id;
			other.cluster_join_id = this.cluster_join_id;

		}

		public void copyKeysDataTo(row39Struct other) {

			other.cluster_join_id = this.cluster_join_id;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.cluster_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cluster_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.history_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.history_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",cluster_join_id=" + cluster_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cluster_join_id,
					other.cluster_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_42Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_42_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row39Struct row39 = new row39Struct();

				/**
				 * [tAdvancedHash_row39 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row39", false);
				start_Hash.put("tAdvancedHash_row39",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row39";

				int tos_count_tAdvancedHash_row39 = 0;

				// connection name:row39
				// source node:tJDBCInput_42 - inputs:(after_tJDBCInput_6)
				// outputs:(row39,row39) | target node:tAdvancedHash_row39 -
				// inputs:(row39) outputs:()
				// linked node: tMap_6 - inputs:(row4,row38,row39)
				// outputs:(vm_configuration)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row39 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row39Struct> getLookup(matchingModeEnum_row39);

				globalMap.put("tHash_Lookup_row39", tHash_Lookup_row39);

				/**
				 * [tAdvancedHash_row39 begin ] stop
				 */

				/**
				 * [tJDBCInput_42 begin ] start
				 */

				ok_Hash.put("tJDBCInput_42", false);
				start_Hash.put("tJDBCInput_42", System.currentTimeMillis());

				currentComponent = "tJDBCInput_42";

				int tos_count_tJDBCInput_42 = 0;

				int nb_line_tJDBCInput_42 = 0;
				java.sql.Connection conn_tJDBCInput_42 = null;
				conn_tJDBCInput_42 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_42 = conn_tJDBCInput_42
						.createStatement();

				String dbquery_tJDBCInput_42 = "SELECT history_id, upper(cast(cluster_id as char(36))) as cluster_join_id  FROM  v3_5_latest_configuration_clusters";

				globalMap.put("tJDBCInput_42_QUERY", dbquery_tJDBCInput_42);
				java.sql.ResultSet rs_tJDBCInput_42 = null;
				try {
					rs_tJDBCInput_42 = stmt_tJDBCInput_42
							.executeQuery(dbquery_tJDBCInput_42);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_42 = rs_tJDBCInput_42
							.getMetaData();
					int colQtyInRs_tJDBCInput_42 = rsmd_tJDBCInput_42
							.getColumnCount();

					String tmpContent_tJDBCInput_42 = null;
					int column_index_tJDBCInput_42 = 1;

					while (rs_tJDBCInput_42.next()) {
						nb_line_tJDBCInput_42++;

						column_index_tJDBCInput_42 = 1;

						if (colQtyInRs_tJDBCInput_42 < column_index_tJDBCInput_42) {
							row39.history_id = null;
						} else {

							if (rs_tJDBCInput_42
									.getObject(column_index_tJDBCInput_42) != null) {
								row39.history_id = rs_tJDBCInput_42
										.getInt(column_index_tJDBCInput_42);
							} else {
								row39.history_id = null;
							}

						}

						column_index_tJDBCInput_42 = 2;

						if (colQtyInRs_tJDBCInput_42 < column_index_tJDBCInput_42) {
							row39.cluster_join_id = null;
						} else {

							tmpContent_tJDBCInput_42 = rs_tJDBCInput_42
									.getString(column_index_tJDBCInput_42);
							if (tmpContent_tJDBCInput_42 != null) {
								row39.cluster_join_id = tmpContent_tJDBCInput_42;
							} else {
								row39.cluster_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_42 begin ] stop
						 */
						/**
						 * [tJDBCInput_42 main ] start
						 */

						currentComponent = "tJDBCInput_42";

						tos_count_tJDBCInput_42++;

						/**
						 * [tJDBCInput_42 main ] stop
						 */

						/**
						 * [tAdvancedHash_row39 main ] start
						 */

						currentComponent = "tAdvancedHash_row39";

						row39Struct row39_HashRow = new row39Struct();

						row39_HashRow.history_id = row39.history_id;

						row39_HashRow.cluster_join_id = row39.cluster_join_id;

						tHash_Lookup_row39.put(row39_HashRow);

						tos_count_tAdvancedHash_row39++;

						/**
						 * [tAdvancedHash_row39 main ] stop
						 */

						/**
						 * [tJDBCInput_42 end ] start
						 */

						currentComponent = "tJDBCInput_42";

					}
				} finally {
					rs_tJDBCInput_42.close();
					stmt_tJDBCInput_42.close();

				}
				globalMap.put("tJDBCInput_42_NB_LINE", nb_line_tJDBCInput_42);

				ok_Hash.put("tJDBCInput_42", true);
				end_Hash.put("tJDBCInput_42", System.currentTimeMillis());

				/**
				 * [tJDBCInput_42 end ] stop
				 */

				/**
				 * [tAdvancedHash_row39 end ] start
				 */

				currentComponent = "tAdvancedHash_row39";

				tHash_Lookup_row39.endPut();

				ok_Hash.put("tAdvancedHash_row39", true);
				end_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row39 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_42 finally ] start
				 */

				currentComponent = "tJDBCInput_42";

				/**
				 * [tJDBCInput_42 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row39 finally ] start
				 */

				currentComponent = "tAdvancedHash_row39";

				/**
				 * [tAdvancedHash_row39 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_42_SUBPROCESS_STATE", 1);
	}

	public static class row40Struct implements
			routines.system.IPersistableComparableLookupRow<row40Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.vm_join_id == null) ? 0 : this.vm_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row40Struct other = (row40Struct) obj;

			if (this.vm_join_id == null) {
				if (other.vm_join_id != null)
					return false;

			} else if (!this.vm_join_id.equals(other.vm_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row40Struct other) {

			other.history_id = this.history_id;
			other.vm_join_id = this.vm_join_id;

		}

		public void copyKeysDataTo(row40Struct other) {

			other.vm_join_id = this.vm_join_id;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.vm_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.history_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.history_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row40Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.vm_join_id,
					other.vm_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_44Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_44_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row40Struct row40 = new row40Struct();

				/**
				 * [tAdvancedHash_row40 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row40", false);
				start_Hash.put("tAdvancedHash_row40",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row40";

				int tos_count_tAdvancedHash_row40 = 0;

				// connection name:row40
				// source node:tJDBCInput_44 - inputs:(after_tJDBCInput_8)
				// outputs:(row40,row40) | target node:tAdvancedHash_row40 -
				// inputs:(row40) outputs:()
				// linked node: tMap_8 - inputs:(row8,row40)
				// outputs:(vm_interface_configuration)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row40 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row40Struct> getLookup(matchingModeEnum_row40);

				globalMap.put("tHash_Lookup_row40", tHash_Lookup_row40);

				/**
				 * [tAdvancedHash_row40 begin ] stop
				 */

				/**
				 * [tJDBCInput_44 begin ] start
				 */

				ok_Hash.put("tJDBCInput_44", false);
				start_Hash.put("tJDBCInput_44", System.currentTimeMillis());

				currentComponent = "tJDBCInput_44";

				int tos_count_tJDBCInput_44 = 0;

				int nb_line_tJDBCInput_44 = 0;
				java.sql.Connection conn_tJDBCInput_44 = null;
				conn_tJDBCInput_44 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_44 = conn_tJDBCInput_44
						.createStatement();

				String dbquery_tJDBCInput_44 = "SELECT history_id, upper(cast(vm_id as char(36))) as vm_join_id  FROM  v3_5_latest_configuration_vms";

				globalMap.put("tJDBCInput_44_QUERY", dbquery_tJDBCInput_44);
				java.sql.ResultSet rs_tJDBCInput_44 = null;
				try {
					rs_tJDBCInput_44 = stmt_tJDBCInput_44
							.executeQuery(dbquery_tJDBCInput_44);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_44 = rs_tJDBCInput_44
							.getMetaData();
					int colQtyInRs_tJDBCInput_44 = rsmd_tJDBCInput_44
							.getColumnCount();

					String tmpContent_tJDBCInput_44 = null;
					int column_index_tJDBCInput_44 = 1;

					while (rs_tJDBCInput_44.next()) {
						nb_line_tJDBCInput_44++;

						column_index_tJDBCInput_44 = 1;

						if (colQtyInRs_tJDBCInput_44 < column_index_tJDBCInput_44) {
							row40.history_id = null;
						} else {

							if (rs_tJDBCInput_44
									.getObject(column_index_tJDBCInput_44) != null) {
								row40.history_id = rs_tJDBCInput_44
										.getInt(column_index_tJDBCInput_44);
							} else {
								row40.history_id = null;
							}

						}

						column_index_tJDBCInput_44 = 2;

						if (colQtyInRs_tJDBCInput_44 < column_index_tJDBCInput_44) {
							row40.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_44 = rs_tJDBCInput_44
									.getString(column_index_tJDBCInput_44);
							if (tmpContent_tJDBCInput_44 != null) {
								row40.vm_join_id = tmpContent_tJDBCInput_44;
							} else {
								row40.vm_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_44 begin ] stop
						 */
						/**
						 * [tJDBCInput_44 main ] start
						 */

						currentComponent = "tJDBCInput_44";

						tos_count_tJDBCInput_44++;

						/**
						 * [tJDBCInput_44 main ] stop
						 */

						/**
						 * [tAdvancedHash_row40 main ] start
						 */

						currentComponent = "tAdvancedHash_row40";

						row40Struct row40_HashRow = new row40Struct();

						row40_HashRow.history_id = row40.history_id;

						row40_HashRow.vm_join_id = row40.vm_join_id;

						tHash_Lookup_row40.put(row40_HashRow);

						tos_count_tAdvancedHash_row40++;

						/**
						 * [tAdvancedHash_row40 main ] stop
						 */

						/**
						 * [tJDBCInput_44 end ] start
						 */

						currentComponent = "tJDBCInput_44";

					}
				} finally {
					rs_tJDBCInput_44.close();
					stmt_tJDBCInput_44.close();

				}
				globalMap.put("tJDBCInput_44_NB_LINE", nb_line_tJDBCInput_44);

				ok_Hash.put("tJDBCInput_44", true);
				end_Hash.put("tJDBCInput_44", System.currentTimeMillis());

				/**
				 * [tJDBCInput_44 end ] stop
				 */

				/**
				 * [tAdvancedHash_row40 end ] start
				 */

				currentComponent = "tAdvancedHash_row40";

				tHash_Lookup_row40.endPut();

				ok_Hash.put("tAdvancedHash_row40", true);
				end_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row40 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_44 finally ] start
				 */

				currentComponent = "tJDBCInput_44";

				/**
				 * [tJDBCInput_44 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row40 finally ] start
				 */

				currentComponent = "tAdvancedHash_row40";

				/**
				 * [tAdvancedHash_row40 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_44_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.datacenter_join_id == null) ? 0
								: this.datacenter_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.datacenter_join_id == null) {
				if (other.datacenter_join_id != null)
					return false;

			} else if (!this.datacenter_join_id
					.equals(other.datacenter_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.datacenter_join_id = this.datacenter_join_id;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.datacenter_join_id = this.datacenter_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.datacenter_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.datacenter_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("datacenter_join_id=" + datacenter_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.datacenter_join_id,
					other.datacenter_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row15";

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tJDBCInput_14 - inputs:(after_tJDBCInput_15)
				// outputs:(row15,row15) | target node:tAdvancedHash_row15 -
				// inputs:(row15) outputs:()
				// linked node: tMap_14 - inputs:(row14,row15)
				// outputs:(delete_datacenters)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct> getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tJDBCInput_14 begin ] start
				 */

				ok_Hash.put("tJDBCInput_14", false);
				start_Hash.put("tJDBCInput_14", System.currentTimeMillis());

				currentComponent = "tJDBCInput_14";

				int tos_count_tJDBCInput_14 = 0;

				int nb_line_tJDBCInput_14 = 0;
				java.sql.Connection conn_tJDBCInput_14 = null;
				conn_tJDBCInput_14 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_14 = conn_tJDBCInput_14
						.createStatement();

				String dbquery_tJDBCInput_14 = "SELECT upper(cast(id as char(36))) as datacenter_join_id  FROM  storage_pool";

				globalMap.put("tJDBCInput_14_QUERY", dbquery_tJDBCInput_14);
				java.sql.ResultSet rs_tJDBCInput_14 = null;
				try {
					rs_tJDBCInput_14 = stmt_tJDBCInput_14
							.executeQuery(dbquery_tJDBCInput_14);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_14 = rs_tJDBCInput_14
							.getMetaData();
					int colQtyInRs_tJDBCInput_14 = rsmd_tJDBCInput_14
							.getColumnCount();

					String tmpContent_tJDBCInput_14 = null;
					int column_index_tJDBCInput_14 = 1;

					while (rs_tJDBCInput_14.next()) {
						nb_line_tJDBCInput_14++;

						column_index_tJDBCInput_14 = 1;

						if (colQtyInRs_tJDBCInput_14 < column_index_tJDBCInput_14) {
							row15.datacenter_join_id = null;
						} else {

							tmpContent_tJDBCInput_14 = rs_tJDBCInput_14
									.getString(column_index_tJDBCInput_14);
							if (tmpContent_tJDBCInput_14 != null) {
								row15.datacenter_join_id = tmpContent_tJDBCInput_14;
							} else {
								row15.datacenter_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_14 begin ] stop
						 */
						/**
						 * [tJDBCInput_14 main ] start
						 */

						currentComponent = "tJDBCInput_14";

						tos_count_tJDBCInput_14++;

						/**
						 * [tJDBCInput_14 main ] stop
						 */

						/**
						 * [tAdvancedHash_row15 main ] start
						 */

						currentComponent = "tAdvancedHash_row15";

						row15Struct row15_HashRow = new row15Struct();

						row15_HashRow.datacenter_join_id = row15.datacenter_join_id;

						tHash_Lookup_row15.put(row15_HashRow);

						tos_count_tAdvancedHash_row15++;

						/**
						 * [tAdvancedHash_row15 main ] stop
						 */

						/**
						 * [tJDBCInput_14 end ] start
						 */

						currentComponent = "tJDBCInput_14";

					}
				} finally {
					rs_tJDBCInput_14.close();
					stmt_tJDBCInput_14.close();

				}
				globalMap.put("tJDBCInput_14_NB_LINE", nb_line_tJDBCInput_14);

				ok_Hash.put("tJDBCInput_14", true);
				end_Hash.put("tJDBCInput_14", System.currentTimeMillis());

				/**
				 * [tJDBCInput_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_14 finally ] start
				 */

				currentComponent = "tJDBCInput_14";

				/**
				 * [tJDBCInput_14 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row15 finally ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				/**
				 * [tAdvancedHash_row15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_14_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String cluster_join_id;

		public String getCluster_join_id() {
			return this.cluster_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cluster_join_id == null) ? 0
								: this.cluster_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.cluster_join_id == null) {
				if (other.cluster_join_id != null)
					return false;

			} else if (!this.cluster_join_id.equals(other.cluster_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.cluster_join_id = this.cluster_join_id;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.cluster_join_id = this.cluster_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.cluster_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cluster_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cluster_join_id=" + cluster_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cluster_join_id,
					other.cluster_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_17Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row16";

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tJDBCInput_17 - inputs:(after_tJDBCInput_18)
				// outputs:(row16,row16) | target node:tAdvancedHash_row16 -
				// inputs:(row16) outputs:()
				// linked node: tMap_15 - inputs:(row17,row16)
				// outputs:(delete_cluster)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct> getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tJDBCInput_17 begin ] start
				 */

				ok_Hash.put("tJDBCInput_17", false);
				start_Hash.put("tJDBCInput_17", System.currentTimeMillis());

				currentComponent = "tJDBCInput_17";

				int tos_count_tJDBCInput_17 = 0;

				int nb_line_tJDBCInput_17 = 0;
				java.sql.Connection conn_tJDBCInput_17 = null;
				conn_tJDBCInput_17 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_17 = conn_tJDBCInput_17
						.createStatement();

				String dbquery_tJDBCInput_17 = "SELECT upper(cast(vds_group_id as char(36))) as cluster_join_id  FROM  vds_groups";

				globalMap.put("tJDBCInput_17_QUERY", dbquery_tJDBCInput_17);
				java.sql.ResultSet rs_tJDBCInput_17 = null;
				try {
					rs_tJDBCInput_17 = stmt_tJDBCInput_17
							.executeQuery(dbquery_tJDBCInput_17);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_17 = rs_tJDBCInput_17
							.getMetaData();
					int colQtyInRs_tJDBCInput_17 = rsmd_tJDBCInput_17
							.getColumnCount();

					String tmpContent_tJDBCInput_17 = null;
					int column_index_tJDBCInput_17 = 1;

					while (rs_tJDBCInput_17.next()) {
						nb_line_tJDBCInput_17++;

						column_index_tJDBCInput_17 = 1;

						if (colQtyInRs_tJDBCInput_17 < column_index_tJDBCInput_17) {
							row16.cluster_join_id = null;
						} else {

							tmpContent_tJDBCInput_17 = rs_tJDBCInput_17
									.getString(column_index_tJDBCInput_17);
							if (tmpContent_tJDBCInput_17 != null) {
								row16.cluster_join_id = tmpContent_tJDBCInput_17;
							} else {
								row16.cluster_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_17 begin ] stop
						 */
						/**
						 * [tJDBCInput_17 main ] start
						 */

						currentComponent = "tJDBCInput_17";

						tos_count_tJDBCInput_17++;

						/**
						 * [tJDBCInput_17 main ] stop
						 */

						/**
						 * [tAdvancedHash_row16 main ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						row16Struct row16_HashRow = new row16Struct();

						row16_HashRow.cluster_join_id = row16.cluster_join_id;

						tHash_Lookup_row16.put(row16_HashRow);

						tos_count_tAdvancedHash_row16++;

						/**
						 * [tAdvancedHash_row16 main ] stop
						 */

						/**
						 * [tJDBCInput_17 end ] start
						 */

						currentComponent = "tJDBCInput_17";

					}
				} finally {
					rs_tJDBCInput_17.close();
					stmt_tJDBCInput_17.close();

				}
				globalMap.put("tJDBCInput_17_NB_LINE", nb_line_tJDBCInput_17);

				ok_Hash.put("tJDBCInput_17", true);
				end_Hash.put("tJDBCInput_17", System.currentTimeMillis());

				/**
				 * [tJDBCInput_17 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_17 finally ] start
				 */

				currentComponent = "tJDBCInput_17";

				/**
				 * [tJDBCInput_17 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row16 finally ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				/**
				 * [tAdvancedHash_row16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_17_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String storage_domain_join_id;

		public String getStorage_domain_join_id() {
			return this.storage_domain_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.storage_domain_join_id == null) ? 0
								: this.storage_domain_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.storage_domain_join_id == null) {
				if (other.storage_domain_join_id != null)
					return false;

			} else if (!this.storage_domain_join_id
					.equals(other.storage_domain_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.storage_domain_join_id = this.storage_domain_join_id;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.storage_domain_join_id = this.storage_domain_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_domain_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.storage_domain_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_domain_join_id=" + storage_domain_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.storage_domain_join_id,
					other.storage_domain_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_19Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row18";

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tJDBCInput_19 - inputs:(after_tJDBCInput_20)
				// outputs:(row18,row18) | target node:tAdvancedHash_row18 -
				// inputs:(row18) outputs:()
				// linked node: tMap_16 - inputs:(row19,row18)
				// outputs:(delete_storage)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row18Struct> getLookup(matchingModeEnum_row18);

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tJDBCInput_19 begin ] start
				 */

				ok_Hash.put("tJDBCInput_19", false);
				start_Hash.put("tJDBCInput_19", System.currentTimeMillis());

				currentComponent = "tJDBCInput_19";

				int tos_count_tJDBCInput_19 = 0;

				int nb_line_tJDBCInput_19 = 0;
				java.sql.Connection conn_tJDBCInput_19 = null;
				conn_tJDBCInput_19 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_19 = conn_tJDBCInput_19
						.createStatement();

				String dbquery_tJDBCInput_19 = "SELECT upper(cast(id as char(36))) as storage_domain_join_id  FROM  storage_domain_static";

				globalMap.put("tJDBCInput_19_QUERY", dbquery_tJDBCInput_19);
				java.sql.ResultSet rs_tJDBCInput_19 = null;
				try {
					rs_tJDBCInput_19 = stmt_tJDBCInput_19
							.executeQuery(dbquery_tJDBCInput_19);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_19 = rs_tJDBCInput_19
							.getMetaData();
					int colQtyInRs_tJDBCInput_19 = rsmd_tJDBCInput_19
							.getColumnCount();

					String tmpContent_tJDBCInput_19 = null;
					int column_index_tJDBCInput_19 = 1;

					while (rs_tJDBCInput_19.next()) {
						nb_line_tJDBCInput_19++;

						column_index_tJDBCInput_19 = 1;

						if (colQtyInRs_tJDBCInput_19 < column_index_tJDBCInput_19) {
							row18.storage_domain_join_id = null;
						} else {

							tmpContent_tJDBCInput_19 = rs_tJDBCInput_19
									.getString(column_index_tJDBCInput_19);
							if (tmpContent_tJDBCInput_19 != null) {
								row18.storage_domain_join_id = tmpContent_tJDBCInput_19;
							} else {
								row18.storage_domain_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_19 begin ] stop
						 */
						/**
						 * [tJDBCInput_19 main ] start
						 */

						currentComponent = "tJDBCInput_19";

						tos_count_tJDBCInput_19++;

						/**
						 * [tJDBCInput_19 main ] stop
						 */

						/**
						 * [tAdvancedHash_row18 main ] start
						 */

						currentComponent = "tAdvancedHash_row18";

						row18Struct row18_HashRow = new row18Struct();

						row18_HashRow.storage_domain_join_id = row18.storage_domain_join_id;

						tHash_Lookup_row18.put(row18_HashRow);

						tos_count_tAdvancedHash_row18++;

						/**
						 * [tAdvancedHash_row18 main ] stop
						 */

						/**
						 * [tJDBCInput_19 end ] start
						 */

						currentComponent = "tJDBCInput_19";

					}
				} finally {
					rs_tJDBCInput_19.close();
					stmt_tJDBCInput_19.close();

				}
				globalMap.put("tJDBCInput_19_NB_LINE", nb_line_tJDBCInput_19);

				ok_Hash.put("tJDBCInput_19", true);
				end_Hash.put("tJDBCInput_19", System.currentTimeMillis());

				/**
				 * [tJDBCInput_19 end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_19 finally ] start
				 */

				currentComponent = "tJDBCInput_19";

				/**
				 * [tJDBCInput_19 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row18 finally ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				/**
				 * [tAdvancedHash_row18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_19_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableComparableLookupRow<row20Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String host_join_id;

		public String getHost_join_id() {
			return this.host_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.host_join_id == null) ? 0 : this.host_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row20Struct other = (row20Struct) obj;

			if (this.host_join_id == null) {
				if (other.host_join_id != null)
					return false;

			} else if (!this.host_join_id.equals(other.host_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row20Struct other) {

			other.host_join_id = this.host_join_id;

		}

		public void copyKeysDataTo(row20Struct other) {

			other.host_join_id = this.host_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.host_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("host_join_id=" + host_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.host_join_id,
					other.host_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_21Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tAdvancedHash_row20 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row20", false);
				start_Hash.put("tAdvancedHash_row20",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row20";

				int tos_count_tAdvancedHash_row20 = 0;

				// connection name:row20
				// source node:tJDBCInput_21 - inputs:(after_tJDBCInput_22)
				// outputs:(row20,row20) | target node:tAdvancedHash_row20 -
				// inputs:(row20) outputs:()
				// linked node: tMap_17 - inputs:(row21,row20)
				// outputs:(delete_hosts)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row20Struct> getLookup(matchingModeEnum_row20);

				globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);

				/**
				 * [tAdvancedHash_row20 begin ] stop
				 */

				/**
				 * [tJDBCInput_21 begin ] start
				 */

				ok_Hash.put("tJDBCInput_21", false);
				start_Hash.put("tJDBCInput_21", System.currentTimeMillis());

				currentComponent = "tJDBCInput_21";

				int tos_count_tJDBCInput_21 = 0;

				int nb_line_tJDBCInput_21 = 0;
				java.sql.Connection conn_tJDBCInput_21 = null;
				conn_tJDBCInput_21 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_21 = conn_tJDBCInput_21
						.createStatement();

				String dbquery_tJDBCInput_21 = "SELECT upper(cast(vds_id as char(36))) as host_join_id  FROM  vds_static";

				globalMap.put("tJDBCInput_21_QUERY", dbquery_tJDBCInput_21);
				java.sql.ResultSet rs_tJDBCInput_21 = null;
				try {
					rs_tJDBCInput_21 = stmt_tJDBCInput_21
							.executeQuery(dbquery_tJDBCInput_21);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_21 = rs_tJDBCInput_21
							.getMetaData();
					int colQtyInRs_tJDBCInput_21 = rsmd_tJDBCInput_21
							.getColumnCount();

					String tmpContent_tJDBCInput_21 = null;
					int column_index_tJDBCInput_21 = 1;

					while (rs_tJDBCInput_21.next()) {
						nb_line_tJDBCInput_21++;

						column_index_tJDBCInput_21 = 1;

						if (colQtyInRs_tJDBCInput_21 < column_index_tJDBCInput_21) {
							row20.host_join_id = null;
						} else {

							tmpContent_tJDBCInput_21 = rs_tJDBCInput_21
									.getString(column_index_tJDBCInput_21);
							if (tmpContent_tJDBCInput_21 != null) {
								row20.host_join_id = tmpContent_tJDBCInput_21;
							} else {
								row20.host_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_21 begin ] stop
						 */
						/**
						 * [tJDBCInput_21 main ] start
						 */

						currentComponent = "tJDBCInput_21";

						tos_count_tJDBCInput_21++;

						/**
						 * [tJDBCInput_21 main ] stop
						 */

						/**
						 * [tAdvancedHash_row20 main ] start
						 */

						currentComponent = "tAdvancedHash_row20";

						row20Struct row20_HashRow = new row20Struct();

						row20_HashRow.host_join_id = row20.host_join_id;

						tHash_Lookup_row20.put(row20_HashRow);

						tos_count_tAdvancedHash_row20++;

						/**
						 * [tAdvancedHash_row20 main ] stop
						 */

						/**
						 * [tJDBCInput_21 end ] start
						 */

						currentComponent = "tJDBCInput_21";

					}
				} finally {
					rs_tJDBCInput_21.close();
					stmt_tJDBCInput_21.close();

				}
				globalMap.put("tJDBCInput_21_NB_LINE", nb_line_tJDBCInput_21);

				ok_Hash.put("tJDBCInput_21", true);
				end_Hash.put("tJDBCInput_21", System.currentTimeMillis());

				/**
				 * [tJDBCInput_21 end ] stop
				 */

				/**
				 * [tAdvancedHash_row20 end ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				tHash_Lookup_row20.endPut();

				ok_Hash.put("tAdvancedHash_row20", true);
				end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row20 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_21 finally ] start
				 */

				currentComponent = "tJDBCInput_21";

				/**
				 * [tJDBCInput_21 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row20 finally ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				/**
				 * [tAdvancedHash_row20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_21_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableComparableLookupRow<row22Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String host_interface_join_id;

		public String getHost_interface_join_id() {
			return this.host_interface_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.host_interface_join_id == null) ? 0
								: this.host_interface_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.host_interface_join_id == null) {
				if (other.host_interface_join_id != null)
					return false;

			} else if (!this.host_interface_join_id
					.equals(other.host_interface_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.host_interface_join_id = this.host_interface_join_id;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.host_interface_join_id = this.host_interface_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.host_interface_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.host_interface_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("host_interface_join_id=" + host_interface_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.host_interface_join_id,
					other.host_interface_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_23Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row22";

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tJDBCInput_23 - inputs:(after_tJDBCInput_24)
				// outputs:(row22,row22) | target node:tAdvancedHash_row22 -
				// inputs:(row22) outputs:()
				// linked node: tMap_18 - inputs:(row23,row22)
				// outputs:(delete_hinterface)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct> getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tJDBCInput_23 begin ] start
				 */

				ok_Hash.put("tJDBCInput_23", false);
				start_Hash.put("tJDBCInput_23", System.currentTimeMillis());

				currentComponent = "tJDBCInput_23";

				int tos_count_tJDBCInput_23 = 0;

				int nb_line_tJDBCInput_23 = 0;
				java.sql.Connection conn_tJDBCInput_23 = null;
				conn_tJDBCInput_23 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_23 = conn_tJDBCInput_23
						.createStatement();

				String dbquery_tJDBCInput_23 = "SELECT  upper(cast(id as char(36))) as host_interface_join_id  FROM  vds_interface";

				globalMap.put("tJDBCInput_23_QUERY", dbquery_tJDBCInput_23);
				java.sql.ResultSet rs_tJDBCInput_23 = null;
				try {
					rs_tJDBCInput_23 = stmt_tJDBCInput_23
							.executeQuery(dbquery_tJDBCInput_23);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_23 = rs_tJDBCInput_23
							.getMetaData();
					int colQtyInRs_tJDBCInput_23 = rsmd_tJDBCInput_23
							.getColumnCount();

					String tmpContent_tJDBCInput_23 = null;
					int column_index_tJDBCInput_23 = 1;

					while (rs_tJDBCInput_23.next()) {
						nb_line_tJDBCInput_23++;

						column_index_tJDBCInput_23 = 1;

						if (colQtyInRs_tJDBCInput_23 < column_index_tJDBCInput_23) {
							row22.host_interface_join_id = null;
						} else {

							tmpContent_tJDBCInput_23 = rs_tJDBCInput_23
									.getString(column_index_tJDBCInput_23);
							if (tmpContent_tJDBCInput_23 != null) {
								row22.host_interface_join_id = tmpContent_tJDBCInput_23;
							} else {
								row22.host_interface_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_23 begin ] stop
						 */
						/**
						 * [tJDBCInput_23 main ] start
						 */

						currentComponent = "tJDBCInput_23";

						tos_count_tJDBCInput_23++;

						/**
						 * [tJDBCInput_23 main ] stop
						 */

						/**
						 * [tAdvancedHash_row22 main ] start
						 */

						currentComponent = "tAdvancedHash_row22";

						row22Struct row22_HashRow = new row22Struct();

						row22_HashRow.host_interface_join_id = row22.host_interface_join_id;

						tHash_Lookup_row22.put(row22_HashRow);

						tos_count_tAdvancedHash_row22++;

						/**
						 * [tAdvancedHash_row22 main ] stop
						 */

						/**
						 * [tJDBCInput_23 end ] start
						 */

						currentComponent = "tJDBCInput_23";

					}
				} finally {
					rs_tJDBCInput_23.close();
					stmt_tJDBCInput_23.close();

				}
				globalMap.put("tJDBCInput_23_NB_LINE", nb_line_tJDBCInput_23);

				ok_Hash.put("tJDBCInput_23", true);
				end_Hash.put("tJDBCInput_23", System.currentTimeMillis());

				/**
				 * [tJDBCInput_23 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_23 finally ] start
				 */

				currentComponent = "tJDBCInput_23";

				/**
				 * [tJDBCInput_23 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row22 finally ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				/**
				 * [tAdvancedHash_row22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_23_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableComparableLookupRow<row24Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.vm_join_id == null) ? 0 : this.vm_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row24Struct other = (row24Struct) obj;

			if (this.vm_join_id == null) {
				if (other.vm_join_id != null)
					return false;

			} else if (!this.vm_join_id.equals(other.vm_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row24Struct other) {

			other.vm_join_id = this.vm_join_id;

		}

		public void copyKeysDataTo(row24Struct other) {

			other.vm_join_id = this.vm_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.vm_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_join_id=" + vm_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.vm_join_id,
					other.vm_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_25Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();

				/**
				 * [tAdvancedHash_row24 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row24", false);
				start_Hash.put("tAdvancedHash_row24",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row24";

				int tos_count_tAdvancedHash_row24 = 0;

				// connection name:row24
				// source node:tJDBCInput_25 - inputs:(after_tJDBCInput_26)
				// outputs:(row24,row24) | target node:tAdvancedHash_row24 -
				// inputs:(row24) outputs:()
				// linked node: tMap_19 - inputs:(row25,row24)
				// outputs:(delete_vms)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row24Struct> getLookup(matchingModeEnum_row24);

				globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);

				/**
				 * [tAdvancedHash_row24 begin ] stop
				 */

				/**
				 * [tJDBCInput_25 begin ] start
				 */

				ok_Hash.put("tJDBCInput_25", false);
				start_Hash.put("tJDBCInput_25", System.currentTimeMillis());

				currentComponent = "tJDBCInput_25";

				int tos_count_tJDBCInput_25 = 0;

				int nb_line_tJDBCInput_25 = 0;
				java.sql.Connection conn_tJDBCInput_25 = null;
				conn_tJDBCInput_25 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_25 = conn_tJDBCInput_25
						.createStatement();

				String dbquery_tJDBCInput_25 = "SELECT upper(cast(vm_guid as char(36))) as vm_join_id  FROM  vm_static";

				globalMap.put("tJDBCInput_25_QUERY", dbquery_tJDBCInput_25);
				java.sql.ResultSet rs_tJDBCInput_25 = null;
				try {
					rs_tJDBCInput_25 = stmt_tJDBCInput_25
							.executeQuery(dbquery_tJDBCInput_25);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_25 = rs_tJDBCInput_25
							.getMetaData();
					int colQtyInRs_tJDBCInput_25 = rsmd_tJDBCInput_25
							.getColumnCount();

					String tmpContent_tJDBCInput_25 = null;
					int column_index_tJDBCInput_25 = 1;

					while (rs_tJDBCInput_25.next()) {
						nb_line_tJDBCInput_25++;

						column_index_tJDBCInput_25 = 1;

						if (colQtyInRs_tJDBCInput_25 < column_index_tJDBCInput_25) {
							row24.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_25 = rs_tJDBCInput_25
									.getString(column_index_tJDBCInput_25);
							if (tmpContent_tJDBCInput_25 != null) {
								row24.vm_join_id = tmpContent_tJDBCInput_25;
							} else {
								row24.vm_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_25 begin ] stop
						 */
						/**
						 * [tJDBCInput_25 main ] start
						 */

						currentComponent = "tJDBCInput_25";

						tos_count_tJDBCInput_25++;

						/**
						 * [tJDBCInput_25 main ] stop
						 */

						/**
						 * [tAdvancedHash_row24 main ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						row24Struct row24_HashRow = new row24Struct();

						row24_HashRow.vm_join_id = row24.vm_join_id;

						tHash_Lookup_row24.put(row24_HashRow);

						tos_count_tAdvancedHash_row24++;

						/**
						 * [tAdvancedHash_row24 main ] stop
						 */

						/**
						 * [tJDBCInput_25 end ] start
						 */

						currentComponent = "tJDBCInput_25";

					}
				} finally {
					rs_tJDBCInput_25.close();
					stmt_tJDBCInput_25.close();

				}
				globalMap.put("tJDBCInput_25_NB_LINE", nb_line_tJDBCInput_25);

				ok_Hash.put("tJDBCInput_25", true);
				end_Hash.put("tJDBCInput_25", System.currentTimeMillis());

				/**
				 * [tJDBCInput_25 end ] stop
				 */

				/**
				 * [tAdvancedHash_row24 end ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				tHash_Lookup_row24.endPut();

				ok_Hash.put("tAdvancedHash_row24", true);
				end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row24 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_25 finally ] start
				 */

				currentComponent = "tJDBCInput_25";

				/**
				 * [tJDBCInput_25 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row24 finally ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				/**
				 * [tAdvancedHash_row24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_25_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements
			routines.system.IPersistableComparableLookupRow<row26Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String vm_disk_join_id;

		public String getVm_disk_join_id() {
			return this.vm_disk_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.vm_disk_join_id == null) ? 0
								: this.vm_disk_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row26Struct other = (row26Struct) obj;

			if (this.vm_disk_join_id == null) {
				if (other.vm_disk_join_id != null)
					return false;

			} else if (!this.vm_disk_join_id.equals(other.vm_disk_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row26Struct other) {

			other.vm_disk_join_id = this.vm_disk_join_id;

		}

		public void copyKeysDataTo(row26Struct other) {

			other.vm_disk_join_id = this.vm_disk_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_disk_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.vm_disk_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_disk_join_id=" + vm_disk_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.vm_disk_join_id,
					other.vm_disk_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_27Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_27_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();

				/**
				 * [tAdvancedHash_row26 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row26", false);
				start_Hash.put("tAdvancedHash_row26",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row26";

				int tos_count_tAdvancedHash_row26 = 0;

				// connection name:row26
				// source node:tJDBCInput_27 - inputs:(after_tJDBCInput_28)
				// outputs:(row26,row26) | target node:tAdvancedHash_row26 -
				// inputs:(row26) outputs:()
				// linked node: tMap_20 - inputs:(row27,row26)
				// outputs:(delete_disks)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row26Struct> getLookup(matchingModeEnum_row26);

				globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);

				/**
				 * [tAdvancedHash_row26 begin ] stop
				 */

				/**
				 * [tJDBCInput_27 begin ] start
				 */

				ok_Hash.put("tJDBCInput_27", false);
				start_Hash.put("tJDBCInput_27", System.currentTimeMillis());

				currentComponent = "tJDBCInput_27";

				int tos_count_tJDBCInput_27 = 0;

				int nb_line_tJDBCInput_27 = 0;
				java.sql.Connection conn_tJDBCInput_27 = null;
				conn_tJDBCInput_27 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_27 = conn_tJDBCInput_27
						.createStatement();

				String dbquery_tJDBCInput_27 = "SELECT upper(cast(disk_id as char(36))) as vm_disk_join_id  FROM  base_disks";

				globalMap.put("tJDBCInput_27_QUERY", dbquery_tJDBCInput_27);
				java.sql.ResultSet rs_tJDBCInput_27 = null;
				try {
					rs_tJDBCInput_27 = stmt_tJDBCInput_27
							.executeQuery(dbquery_tJDBCInput_27);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_27 = rs_tJDBCInput_27
							.getMetaData();
					int colQtyInRs_tJDBCInput_27 = rsmd_tJDBCInput_27
							.getColumnCount();

					String tmpContent_tJDBCInput_27 = null;
					int column_index_tJDBCInput_27 = 1;

					while (rs_tJDBCInput_27.next()) {
						nb_line_tJDBCInput_27++;

						column_index_tJDBCInput_27 = 1;

						if (colQtyInRs_tJDBCInput_27 < column_index_tJDBCInput_27) {
							row26.vm_disk_join_id = null;
						} else {

							tmpContent_tJDBCInput_27 = rs_tJDBCInput_27
									.getString(column_index_tJDBCInput_27);
							if (tmpContent_tJDBCInput_27 != null) {
								row26.vm_disk_join_id = tmpContent_tJDBCInput_27;
							} else {
								row26.vm_disk_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_27 begin ] stop
						 */
						/**
						 * [tJDBCInput_27 main ] start
						 */

						currentComponent = "tJDBCInput_27";

						tos_count_tJDBCInput_27++;

						/**
						 * [tJDBCInput_27 main ] stop
						 */

						/**
						 * [tAdvancedHash_row26 main ] start
						 */

						currentComponent = "tAdvancedHash_row26";

						row26Struct row26_HashRow = new row26Struct();

						row26_HashRow.vm_disk_join_id = row26.vm_disk_join_id;

						tHash_Lookup_row26.put(row26_HashRow);

						tos_count_tAdvancedHash_row26++;

						/**
						 * [tAdvancedHash_row26 main ] stop
						 */

						/**
						 * [tJDBCInput_27 end ] start
						 */

						currentComponent = "tJDBCInput_27";

					}
				} finally {
					rs_tJDBCInput_27.close();
					stmt_tJDBCInput_27.close();

				}
				globalMap.put("tJDBCInput_27_NB_LINE", nb_line_tJDBCInput_27);

				ok_Hash.put("tJDBCInput_27", true);
				end_Hash.put("tJDBCInput_27", System.currentTimeMillis());

				/**
				 * [tJDBCInput_27 end ] stop
				 */

				/**
				 * [tAdvancedHash_row26 end ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				tHash_Lookup_row26.endPut();

				ok_Hash.put("tAdvancedHash_row26", true);
				end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row26 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_27 finally ] start
				 */

				currentComponent = "tJDBCInput_27";

				/**
				 * [tJDBCInput_27 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row26 finally ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				/**
				 * [tAdvancedHash_row26 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_27_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements
			routines.system.IPersistableComparableLookupRow<row28Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String vm_interface_join_id;

		public String getVm_interface_join_id() {
			return this.vm_interface_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.vm_interface_join_id == null) ? 0
								: this.vm_interface_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row28Struct other = (row28Struct) obj;

			if (this.vm_interface_join_id == null) {
				if (other.vm_interface_join_id != null)
					return false;

			} else if (!this.vm_interface_join_id
					.equals(other.vm_interface_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row28Struct other) {

			other.vm_interface_join_id = this.vm_interface_join_id;

		}

		public void copyKeysDataTo(row28Struct other) {

			other.vm_interface_join_id = this.vm_interface_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_interface_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.vm_interface_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_interface_join_id=" + vm_interface_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.vm_interface_join_id,
					other.vm_interface_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_29Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_29_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();

				/**
				 * [tAdvancedHash_row28 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row28", false);
				start_Hash.put("tAdvancedHash_row28",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row28";

				int tos_count_tAdvancedHash_row28 = 0;

				// connection name:row28
				// source node:tJDBCInput_29 - inputs:(after_tJDBCInput_30)
				// outputs:(row28,row28) | target node:tAdvancedHash_row28 -
				// inputs:(row28) outputs:()
				// linked node: tMap_21 - inputs:(row29,row28)
				// outputs:(delete_vm_interface)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row28Struct> getLookup(matchingModeEnum_row28);

				globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);

				/**
				 * [tAdvancedHash_row28 begin ] stop
				 */

				/**
				 * [tJDBCInput_29 begin ] start
				 */

				ok_Hash.put("tJDBCInput_29", false);
				start_Hash.put("tJDBCInput_29", System.currentTimeMillis());

				currentComponent = "tJDBCInput_29";

				int tos_count_tJDBCInput_29 = 0;

				int nb_line_tJDBCInput_29 = 0;
				java.sql.Connection conn_tJDBCInput_29 = null;
				conn_tJDBCInput_29 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_29 = conn_tJDBCInput_29
						.createStatement();

				String dbquery_tJDBCInput_29 = "SELECT upper(cast(id as char(36))) as vm_interface_join_id  FROM  vm_interface";

				globalMap.put("tJDBCInput_29_QUERY", dbquery_tJDBCInput_29);
				java.sql.ResultSet rs_tJDBCInput_29 = null;
				try {
					rs_tJDBCInput_29 = stmt_tJDBCInput_29
							.executeQuery(dbquery_tJDBCInput_29);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_29 = rs_tJDBCInput_29
							.getMetaData();
					int colQtyInRs_tJDBCInput_29 = rsmd_tJDBCInput_29
							.getColumnCount();

					String tmpContent_tJDBCInput_29 = null;
					int column_index_tJDBCInput_29 = 1;

					while (rs_tJDBCInput_29.next()) {
						nb_line_tJDBCInput_29++;

						column_index_tJDBCInput_29 = 1;

						if (colQtyInRs_tJDBCInput_29 < column_index_tJDBCInput_29) {
							row28.vm_interface_join_id = null;
						} else {

							tmpContent_tJDBCInput_29 = rs_tJDBCInput_29
									.getString(column_index_tJDBCInput_29);
							if (tmpContent_tJDBCInput_29 != null) {
								row28.vm_interface_join_id = tmpContent_tJDBCInput_29;
							} else {
								row28.vm_interface_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_29 begin ] stop
						 */
						/**
						 * [tJDBCInput_29 main ] start
						 */

						currentComponent = "tJDBCInput_29";

						tos_count_tJDBCInput_29++;

						/**
						 * [tJDBCInput_29 main ] stop
						 */

						/**
						 * [tAdvancedHash_row28 main ] start
						 */

						currentComponent = "tAdvancedHash_row28";

						row28Struct row28_HashRow = new row28Struct();

						row28_HashRow.vm_interface_join_id = row28.vm_interface_join_id;

						tHash_Lookup_row28.put(row28_HashRow);

						tos_count_tAdvancedHash_row28++;

						/**
						 * [tAdvancedHash_row28 main ] stop
						 */

						/**
						 * [tJDBCInput_29 end ] start
						 */

						currentComponent = "tJDBCInput_29";

					}
				} finally {
					rs_tJDBCInput_29.close();
					stmt_tJDBCInput_29.close();

				}
				globalMap.put("tJDBCInput_29_NB_LINE", nb_line_tJDBCInput_29);

				ok_Hash.put("tJDBCInput_29", true);
				end_Hash.put("tJDBCInput_29", System.currentTimeMillis());

				/**
				 * [tJDBCInput_29 end ] stop
				 */

				/**
				 * [tAdvancedHash_row28 end ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				tHash_Lookup_row28.endPut();

				ok_Hash.put("tAdvancedHash_row28", true);
				end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row28 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_29 finally ] start
				 */

				currentComponent = "tJDBCInput_29";

				/**
				 * [tJDBCInput_29 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row28 finally ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				/**
				 * [tAdvancedHash_row28 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_29_SUBPROCESS_STATE", 1);
	}

	public static class row33Struct implements
			routines.system.IPersistableComparableLookupRow<row33Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String storage_domain_join_id;

		public String getStorage_domain_join_id() {
			return this.storage_domain_join_id;
		}

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.storage_domain_join_id == null) ? 0
								: this.storage_domain_join_id.hashCode());

				result = prime
						* result
						+ ((this.datacenter_join_id == null) ? 0
								: this.datacenter_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row33Struct other = (row33Struct) obj;

			if (this.storage_domain_join_id == null) {
				if (other.storage_domain_join_id != null)
					return false;

			} else if (!this.storage_domain_join_id
					.equals(other.storage_domain_join_id))

				return false;

			if (this.datacenter_join_id == null) {
				if (other.datacenter_join_id != null)
					return false;

			} else if (!this.datacenter_join_id
					.equals(other.datacenter_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row33Struct other) {

			other.storage_domain_join_id = this.storage_domain_join_id;
			other.datacenter_join_id = this.datacenter_join_id;

		}

		public void copyKeysDataTo(row33Struct other) {

			other.storage_domain_join_id = this.storage_domain_join_id;
			other.datacenter_join_id = this.datacenter_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_domain_join_id = readString(dis);

					this.datacenter_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.storage_domain_join_id, dos);

				// String

				writeString(this.datacenter_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_domain_join_id=" + storage_domain_join_id);
			sb.append(",datacenter_join_id=" + datacenter_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.storage_domain_join_id,
					other.storage_domain_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.datacenter_join_id,
					other.datacenter_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_35Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_35_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row33Struct row33 = new row33Struct();

				/**
				 * [tAdvancedHash_row33 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row33", false);
				start_Hash.put("tAdvancedHash_row33",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row33";

				int tos_count_tAdvancedHash_row33 = 0;

				// connection name:row33
				// source node:tJDBCInput_35 - inputs:(after_tJDBCInput_33)
				// outputs:(row33,row33) | target node:tAdvancedHash_row33 -
				// inputs:(row33) outputs:()
				// linked node: tMap_23 - inputs:(row31,row33)
				// outputs:(insert_new_dc_storage_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row33 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row33Struct> getLookup(matchingModeEnum_row33);

				globalMap.put("tHash_Lookup_row33", tHash_Lookup_row33);

				/**
				 * [tAdvancedHash_row33 begin ] stop
				 */

				/**
				 * [tJDBCInput_35 begin ] start
				 */

				ok_Hash.put("tJDBCInput_35", false);
				start_Hash.put("tJDBCInput_35", System.currentTimeMillis());

				currentComponent = "tJDBCInput_35";

				int tos_count_tJDBCInput_35 = 0;

				int nb_line_tJDBCInput_35 = 0;
				java.sql.Connection conn_tJDBCInput_35 = null;
				conn_tJDBCInput_35 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_35 = conn_tJDBCInput_35
						.createStatement();

				String dbquery_tJDBCInput_35 = "SELECT    	upper(cast(storage_domain_id as char(36))) as storage_domain_join_id,   	upper(cast(datacenter_id as char(36))) as datacenter_join_id FROM  v3_5_latest_map_datacenters_storage_domains";

				globalMap.put("tJDBCInput_35_QUERY", dbquery_tJDBCInput_35);
				java.sql.ResultSet rs_tJDBCInput_35 = null;
				try {
					rs_tJDBCInput_35 = stmt_tJDBCInput_35
							.executeQuery(dbquery_tJDBCInput_35);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_35 = rs_tJDBCInput_35
							.getMetaData();
					int colQtyInRs_tJDBCInput_35 = rsmd_tJDBCInput_35
							.getColumnCount();

					String tmpContent_tJDBCInput_35 = null;
					int column_index_tJDBCInput_35 = 1;

					while (rs_tJDBCInput_35.next()) {
						nb_line_tJDBCInput_35++;

						column_index_tJDBCInput_35 = 1;

						if (colQtyInRs_tJDBCInput_35 < column_index_tJDBCInput_35) {
							row33.storage_domain_join_id = null;
						} else {

							tmpContent_tJDBCInput_35 = rs_tJDBCInput_35
									.getString(column_index_tJDBCInput_35);
							if (tmpContent_tJDBCInput_35 != null) {
								row33.storage_domain_join_id = tmpContent_tJDBCInput_35;
							} else {
								row33.storage_domain_join_id = null;
							}

						}

						column_index_tJDBCInput_35 = 2;

						if (colQtyInRs_tJDBCInput_35 < column_index_tJDBCInput_35) {
							row33.datacenter_join_id = null;
						} else {

							tmpContent_tJDBCInput_35 = rs_tJDBCInput_35
									.getString(column_index_tJDBCInput_35);
							if (tmpContent_tJDBCInput_35 != null) {
								row33.datacenter_join_id = tmpContent_tJDBCInput_35;
							} else {
								row33.datacenter_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_35 begin ] stop
						 */
						/**
						 * [tJDBCInput_35 main ] start
						 */

						currentComponent = "tJDBCInput_35";

						tos_count_tJDBCInput_35++;

						/**
						 * [tJDBCInput_35 main ] stop
						 */

						/**
						 * [tAdvancedHash_row33 main ] start
						 */

						currentComponent = "tAdvancedHash_row33";

						row33Struct row33_HashRow = new row33Struct();

						row33_HashRow.storage_domain_join_id = row33.storage_domain_join_id;

						row33_HashRow.datacenter_join_id = row33.datacenter_join_id;

						tHash_Lookup_row33.put(row33_HashRow);

						tos_count_tAdvancedHash_row33++;

						/**
						 * [tAdvancedHash_row33 main ] stop
						 */

						/**
						 * [tJDBCInput_35 end ] start
						 */

						currentComponent = "tJDBCInput_35";

					}
				} finally {
					rs_tJDBCInput_35.close();
					stmt_tJDBCInput_35.close();

				}
				globalMap.put("tJDBCInput_35_NB_LINE", nb_line_tJDBCInput_35);

				ok_Hash.put("tJDBCInput_35", true);
				end_Hash.put("tJDBCInput_35", System.currentTimeMillis());

				/**
				 * [tJDBCInput_35 end ] stop
				 */

				/**
				 * [tAdvancedHash_row33 end ] start
				 */

				currentComponent = "tAdvancedHash_row33";

				tHash_Lookup_row33.endPut();

				ok_Hash.put("tAdvancedHash_row33", true);
				end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row33 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_35 finally ] start
				 */

				currentComponent = "tJDBCInput_35";

				/**
				 * [tJDBCInput_35 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row33 finally ] start
				 */

				currentComponent = "tAdvancedHash_row33";

				/**
				 * [tAdvancedHash_row33 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_35_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements
			routines.system.IPersistableComparableLookupRow<row32Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String storage_domain_join_id;

		public String getStorage_domain_join_id() {
			return this.storage_domain_join_id;
		}

		public String datacenter_join_id;

		public String getDatacenter_join_id() {
			return this.datacenter_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.storage_domain_join_id == null) ? 0
								: this.storage_domain_join_id.hashCode());

				result = prime
						* result
						+ ((this.datacenter_join_id == null) ? 0
								: this.datacenter_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row32Struct other = (row32Struct) obj;

			if (this.storage_domain_join_id == null) {
				if (other.storage_domain_join_id != null)
					return false;

			} else if (!this.storage_domain_join_id
					.equals(other.storage_domain_join_id))

				return false;

			if (this.datacenter_join_id == null) {
				if (other.datacenter_join_id != null)
					return false;

			} else if (!this.datacenter_join_id
					.equals(other.datacenter_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row32Struct other) {

			other.storage_domain_join_id = this.storage_domain_join_id;
			other.datacenter_join_id = this.datacenter_join_id;

		}

		public void copyKeysDataTo(row32Struct other) {

			other.storage_domain_join_id = this.storage_domain_join_id;
			other.datacenter_join_id = this.datacenter_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.storage_domain_join_id = readString(dis);

					this.datacenter_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.storage_domain_join_id, dos);

				// String

				writeString(this.datacenter_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("storage_domain_join_id=" + storage_domain_join_id);
			sb.append(",datacenter_join_id=" + datacenter_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.storage_domain_join_id,
					other.storage_domain_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.datacenter_join_id,
					other.datacenter_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_32Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_32_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row32Struct row32 = new row32Struct();

				/**
				 * [tAdvancedHash_row32 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row32", false);
				start_Hash.put("tAdvancedHash_row32",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row32";

				int tos_count_tAdvancedHash_row32 = 0;

				// connection name:row32
				// source node:tJDBCInput_32 - inputs:(after_tJDBCInput_34)
				// outputs:(row32,row32) | target node:tAdvancedHash_row32 -
				// inputs:(row32) outputs:()
				// linked node: tMap_22 - inputs:(row30,row32)
				// outputs:(delete_dc_storage_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row32Struct> getLookup(matchingModeEnum_row32);

				globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);

				/**
				 * [tAdvancedHash_row32 begin ] stop
				 */

				/**
				 * [tJDBCInput_32 begin ] start
				 */

				ok_Hash.put("tJDBCInput_32", false);
				start_Hash.put("tJDBCInput_32", System.currentTimeMillis());

				currentComponent = "tJDBCInput_32";

				int tos_count_tJDBCInput_32 = 0;

				int nb_line_tJDBCInput_32 = 0;
				java.sql.Connection conn_tJDBCInput_32 = null;
				conn_tJDBCInput_32 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_32 = conn_tJDBCInput_32
						.createStatement();

				String dbquery_tJDBCInput_32 = "SELECT upper(cast(storage_id as char(36))) as storage_domain_join_id,  		upper(cast(storage_pool_id as char(36))) as datacenter_join_id  FROM  storage_pool_iso_map";

				globalMap.put("tJDBCInput_32_QUERY", dbquery_tJDBCInput_32);
				java.sql.ResultSet rs_tJDBCInput_32 = null;
				try {
					rs_tJDBCInput_32 = stmt_tJDBCInput_32
							.executeQuery(dbquery_tJDBCInput_32);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_32 = rs_tJDBCInput_32
							.getMetaData();
					int colQtyInRs_tJDBCInput_32 = rsmd_tJDBCInput_32
							.getColumnCount();

					String tmpContent_tJDBCInput_32 = null;
					int column_index_tJDBCInput_32 = 1;

					while (rs_tJDBCInput_32.next()) {
						nb_line_tJDBCInput_32++;

						column_index_tJDBCInput_32 = 1;

						if (colQtyInRs_tJDBCInput_32 < column_index_tJDBCInput_32) {
							row32.storage_domain_join_id = null;
						} else {

							tmpContent_tJDBCInput_32 = rs_tJDBCInput_32
									.getString(column_index_tJDBCInput_32);
							if (tmpContent_tJDBCInput_32 != null) {
								row32.storage_domain_join_id = tmpContent_tJDBCInput_32;
							} else {
								row32.storage_domain_join_id = null;
							}

						}

						column_index_tJDBCInput_32 = 2;

						if (colQtyInRs_tJDBCInput_32 < column_index_tJDBCInput_32) {
							row32.datacenter_join_id = null;
						} else {

							tmpContent_tJDBCInput_32 = rs_tJDBCInput_32
									.getString(column_index_tJDBCInput_32);
							if (tmpContent_tJDBCInput_32 != null) {
								row32.datacenter_join_id = tmpContent_tJDBCInput_32;
							} else {
								row32.datacenter_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_32 begin ] stop
						 */
						/**
						 * [tJDBCInput_32 main ] start
						 */

						currentComponent = "tJDBCInput_32";

						tos_count_tJDBCInput_32++;

						/**
						 * [tJDBCInput_32 main ] stop
						 */

						/**
						 * [tAdvancedHash_row32 main ] start
						 */

						currentComponent = "tAdvancedHash_row32";

						row32Struct row32_HashRow = new row32Struct();

						row32_HashRow.storage_domain_join_id = row32.storage_domain_join_id;

						row32_HashRow.datacenter_join_id = row32.datacenter_join_id;

						tHash_Lookup_row32.put(row32_HashRow);

						tos_count_tAdvancedHash_row32++;

						/**
						 * [tAdvancedHash_row32 main ] stop
						 */

						/**
						 * [tJDBCInput_32 end ] start
						 */

						currentComponent = "tJDBCInput_32";

					}
				} finally {
					rs_tJDBCInput_32.close();
					stmt_tJDBCInput_32.close();

				}
				globalMap.put("tJDBCInput_32_NB_LINE", nb_line_tJDBCInput_32);

				ok_Hash.put("tJDBCInput_32", true);
				end_Hash.put("tJDBCInput_32", System.currentTimeMillis());

				/**
				 * [tJDBCInput_32 end ] stop
				 */

				/**
				 * [tAdvancedHash_row32 end ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				tHash_Lookup_row32.endPut();

				ok_Hash.put("tAdvancedHash_row32", true);
				end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row32 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_32 finally ] start
				 */

				currentComponent = "tJDBCInput_32";

				/**
				 * [tJDBCInput_32 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row32 finally ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				/**
				 * [tAdvancedHash_row32 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_32_SUBPROCESS_STATE", 1);
	}

	public static class row34Struct implements
			routines.system.IPersistableComparableLookupRow<row34Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String entity_join_id;

		public String getEntity_join_id() {
			return this.entity_join_id;
		}

		public String parent_join_id;

		public String getParent_join_id() {
			return this.parent_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.entity_join_id == null) ? 0
								: this.entity_join_id.hashCode());

				result = prime
						* result
						+ ((this.parent_join_id == null) ? 0
								: this.parent_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row34Struct other = (row34Struct) obj;

			if (this.entity_join_id == null) {
				if (other.entity_join_id != null)
					return false;

			} else if (!this.entity_join_id.equals(other.entity_join_id))

				return false;

			if (this.parent_join_id == null) {
				if (other.parent_join_id != null)
					return false;

			} else if (!this.parent_join_id.equals(other.parent_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row34Struct other) {

			other.entity_join_id = this.entity_join_id;
			other.parent_join_id = this.parent_join_id;

		}

		public void copyKeysDataTo(row34Struct other) {

			other.entity_join_id = this.entity_join_id;
			other.parent_join_id = this.parent_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.entity_join_id = readString(dis);

					this.parent_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entity_join_id, dos);

				// String

				writeString(this.parent_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entity_join_id=" + entity_join_id);
			sb.append(",parent_join_id=" + parent_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.entity_join_id,
					other.entity_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.parent_join_id,
					other.parent_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_58Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_58_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row34Struct row34 = new row34Struct();

				/**
				 * [tAdvancedHash_row34 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row34", false);
				start_Hash.put("tAdvancedHash_row34",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row34";

				int tos_count_tAdvancedHash_row34 = 0;

				// connection name:row34
				// source node:tJDBCInput_58 - inputs:(after_tJDBCInput_45)
				// outputs:(row34,row34) | target node:tAdvancedHash_row34 -
				// inputs:(row34) outputs:()
				// linked node: tMap_26 - inputs:(row9,row34)
				// outputs:(new_tag_relations)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row34 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row34Struct> getLookup(matchingModeEnum_row34);

				globalMap.put("tHash_Lookup_row34", tHash_Lookup_row34);

				/**
				 * [tAdvancedHash_row34 begin ] stop
				 */

				/**
				 * [tJDBCInput_58 begin ] start
				 */

				ok_Hash.put("tJDBCInput_58", false);
				start_Hash.put("tJDBCInput_58", System.currentTimeMillis());

				currentComponent = "tJDBCInput_58";

				int tos_count_tJDBCInput_58 = 0;

				int nb_line_tJDBCInput_58 = 0;
				java.sql.Connection conn_tJDBCInput_58 = null;
				conn_tJDBCInput_58 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_58 = conn_tJDBCInput_58
						.createStatement();

				String dbquery_tJDBCInput_58 = "SELECT upper(cast(entity_id as char(36))) as entity_join_id, 		upper(cast(parent_id as char(36))) as parent_join_id FROM v3_5_latest_tags_relations";

				globalMap.put("tJDBCInput_58_QUERY", dbquery_tJDBCInput_58);
				java.sql.ResultSet rs_tJDBCInput_58 = null;
				try {
					rs_tJDBCInput_58 = stmt_tJDBCInput_58
							.executeQuery(dbquery_tJDBCInput_58);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_58 = rs_tJDBCInput_58
							.getMetaData();
					int colQtyInRs_tJDBCInput_58 = rsmd_tJDBCInput_58
							.getColumnCount();

					String tmpContent_tJDBCInput_58 = null;
					int column_index_tJDBCInput_58 = 1;

					while (rs_tJDBCInput_58.next()) {
						nb_line_tJDBCInput_58++;

						column_index_tJDBCInput_58 = 1;

						if (colQtyInRs_tJDBCInput_58 < column_index_tJDBCInput_58) {
							row34.entity_join_id = null;
						} else {

							tmpContent_tJDBCInput_58 = rs_tJDBCInput_58
									.getString(column_index_tJDBCInput_58);
							if (tmpContent_tJDBCInput_58 != null) {
								row34.entity_join_id = tmpContent_tJDBCInput_58;
							} else {
								row34.entity_join_id = null;
							}

						}

						column_index_tJDBCInput_58 = 2;

						if (colQtyInRs_tJDBCInput_58 < column_index_tJDBCInput_58) {
							row34.parent_join_id = null;
						} else {

							tmpContent_tJDBCInput_58 = rs_tJDBCInput_58
									.getString(column_index_tJDBCInput_58);
							if (tmpContent_tJDBCInput_58 != null) {
								row34.parent_join_id = tmpContent_tJDBCInput_58;
							} else {
								row34.parent_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_58 begin ] stop
						 */
						/**
						 * [tJDBCInput_58 main ] start
						 */

						currentComponent = "tJDBCInput_58";

						tos_count_tJDBCInput_58++;

						/**
						 * [tJDBCInput_58 main ] stop
						 */

						/**
						 * [tAdvancedHash_row34 main ] start
						 */

						currentComponent = "tAdvancedHash_row34";

						row34Struct row34_HashRow = new row34Struct();

						row34_HashRow.entity_join_id = row34.entity_join_id;

						row34_HashRow.parent_join_id = row34.parent_join_id;

						tHash_Lookup_row34.put(row34_HashRow);

						tos_count_tAdvancedHash_row34++;

						/**
						 * [tAdvancedHash_row34 main ] stop
						 */

						/**
						 * [tJDBCInput_58 end ] start
						 */

						currentComponent = "tJDBCInput_58";

					}
				} finally {
					rs_tJDBCInput_58.close();
					stmt_tJDBCInput_58.close();

				}
				globalMap.put("tJDBCInput_58_NB_LINE", nb_line_tJDBCInput_58);

				ok_Hash.put("tJDBCInput_58", true);
				end_Hash.put("tJDBCInput_58", System.currentTimeMillis());

				/**
				 * [tJDBCInput_58 end ] stop
				 */

				/**
				 * [tAdvancedHash_row34 end ] start
				 */

				currentComponent = "tAdvancedHash_row34";

				tHash_Lookup_row34.endPut();

				ok_Hash.put("tAdvancedHash_row34", true);
				end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row34 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_58 finally ] start
				 */

				currentComponent = "tJDBCInput_58";

				/**
				 * [tJDBCInput_58 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row34 finally ] start
				 */

				currentComponent = "tAdvancedHash_row34";

				/**
				 * [tAdvancedHash_row34 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_58_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableComparableLookupRow<row11Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String entity_join_id;

		public String getEntity_join_id() {
			return this.entity_join_id;
		}

		public String parent_join_id;

		public String getParent_join_id() {
			return this.parent_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.entity_join_id == null) ? 0
								: this.entity_join_id.hashCode());

				result = prime
						* result
						+ ((this.parent_join_id == null) ? 0
								: this.parent_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.entity_join_id == null) {
				if (other.entity_join_id != null)
					return false;

			} else if (!this.entity_join_id.equals(other.entity_join_id))

				return false;

			if (this.parent_join_id == null) {
				if (other.parent_join_id != null)
					return false;

			} else if (!this.parent_join_id.equals(other.parent_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.entity_join_id = this.entity_join_id;
			other.parent_join_id = this.parent_join_id;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.entity_join_id = this.entity_join_id;
			other.parent_join_id = this.parent_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.entity_join_id = readString(dis);

					this.parent_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entity_join_id, dos);

				// String

				writeString(this.parent_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entity_join_id=" + entity_join_id);
			sb.append(",parent_join_id=" + parent_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.entity_join_id,
					other.entity_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.parent_join_id,
					other.parent_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_47Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_47_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tAdvancedHash_row11 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row11", false);
				start_Hash.put("tAdvancedHash_row11",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row11";

				int tos_count_tAdvancedHash_row11 = 0;

				// connection name:row11
				// source node:tJDBCInput_47 - inputs:(after_tJDBCInput_48)
				// outputs:(row11,row11) | target node:tAdvancedHash_row11 -
				// inputs:(row11) outputs:()
				// linked node: tMap_27 - inputs:(row12,row11)
				// outputs:(detach_tags)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row11Struct> getLookup(matchingModeEnum_row11);

				globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);

				/**
				 * [tAdvancedHash_row11 begin ] stop
				 */

				/**
				 * [tJDBCInput_47 begin ] start
				 */

				ok_Hash.put("tJDBCInput_47", false);
				start_Hash.put("tJDBCInput_47", System.currentTimeMillis());

				currentComponent = "tJDBCInput_47";

				int tos_count_tJDBCInput_47 = 0;

				int nb_line_tJDBCInput_47 = 0;
				java.sql.Connection conn_tJDBCInput_47 = null;
				conn_tJDBCInput_47 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_47 = conn_tJDBCInput_47
						.createStatement();

				String dbquery_tJDBCInput_47 = "SELECT upper(cast(entity_id as char(36))) as entity_join_id,  		upper(cast(parent_id as char(36))) as parent_join_id  FROM	dwh_remove_tags_relations_history_view";

				globalMap.put("tJDBCInput_47_QUERY", dbquery_tJDBCInput_47);
				java.sql.ResultSet rs_tJDBCInput_47 = null;
				try {
					rs_tJDBCInput_47 = stmt_tJDBCInput_47
							.executeQuery(dbquery_tJDBCInput_47);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_47 = rs_tJDBCInput_47
							.getMetaData();
					int colQtyInRs_tJDBCInput_47 = rsmd_tJDBCInput_47
							.getColumnCount();

					String tmpContent_tJDBCInput_47 = null;
					int column_index_tJDBCInput_47 = 1;

					while (rs_tJDBCInput_47.next()) {
						nb_line_tJDBCInput_47++;

						column_index_tJDBCInput_47 = 1;

						if (colQtyInRs_tJDBCInput_47 < column_index_tJDBCInput_47) {
							row11.entity_join_id = null;
						} else {

							tmpContent_tJDBCInput_47 = rs_tJDBCInput_47
									.getString(column_index_tJDBCInput_47);
							if (tmpContent_tJDBCInput_47 != null) {
								row11.entity_join_id = tmpContent_tJDBCInput_47;
							} else {
								row11.entity_join_id = null;
							}

						}

						column_index_tJDBCInput_47 = 2;

						if (colQtyInRs_tJDBCInput_47 < column_index_tJDBCInput_47) {
							row11.parent_join_id = null;
						} else {

							tmpContent_tJDBCInput_47 = rs_tJDBCInput_47
									.getString(column_index_tJDBCInput_47);
							if (tmpContent_tJDBCInput_47 != null) {
								row11.parent_join_id = tmpContent_tJDBCInput_47;
							} else {
								row11.parent_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_47 begin ] stop
						 */
						/**
						 * [tJDBCInput_47 main ] start
						 */

						currentComponent = "tJDBCInput_47";

						tos_count_tJDBCInput_47++;

						/**
						 * [tJDBCInput_47 main ] stop
						 */

						/**
						 * [tAdvancedHash_row11 main ] start
						 */

						currentComponent = "tAdvancedHash_row11";

						row11Struct row11_HashRow = new row11Struct();

						row11_HashRow.entity_join_id = row11.entity_join_id;

						row11_HashRow.parent_join_id = row11.parent_join_id;

						tHash_Lookup_row11.put(row11_HashRow);

						tos_count_tAdvancedHash_row11++;

						/**
						 * [tAdvancedHash_row11 main ] stop
						 */

						/**
						 * [tJDBCInput_47 end ] start
						 */

						currentComponent = "tJDBCInput_47";

					}
				} finally {
					rs_tJDBCInput_47.close();
					stmt_tJDBCInput_47.close();

				}
				globalMap.put("tJDBCInput_47_NB_LINE", nb_line_tJDBCInput_47);

				ok_Hash.put("tJDBCInput_47", true);
				end_Hash.put("tJDBCInput_47", System.currentTimeMillis());

				/**
				 * [tJDBCInput_47 end ] stop
				 */

				/**
				 * [tAdvancedHash_row11 end ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				tHash_Lookup_row11.endPut();

				ok_Hash.put("tAdvancedHash_row11", true);
				end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_47 finally ] start
				 */

				currentComponent = "tJDBCInput_47";

				/**
				 * [tJDBCInput_47 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row11 finally ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				/**
				 * [tAdvancedHash_row11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_47_SUBPROCESS_STATE", 1);
	}

	public static class row43Struct implements
			routines.system.IPersistableComparableLookupRow<row43Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String tag_join_id;

		public String getTag_join_id() {
			return this.tag_join_id;
		}

		public String tag_name;

		public String getTag_name() {
			return this.tag_name;
		}

		public String tag_description;

		public String getTag_description() {
			return this.tag_description;
		}

		public String tag_path;

		public String getTag_path() {
			return this.tag_path;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.tag_join_id == null) ? 0 : this.tag_join_id
								.hashCode());

				result = prime
						* result
						+ ((this.tag_name == null) ? 0 : this.tag_name
								.hashCode());

				result = prime
						* result
						+ ((this.tag_description == null) ? 0
								: this.tag_description.hashCode());

				result = prime
						* result
						+ ((this.tag_path == null) ? 0 : this.tag_path
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row43Struct other = (row43Struct) obj;

			if (this.tag_join_id == null) {
				if (other.tag_join_id != null)
					return false;

			} else if (!this.tag_join_id.equals(other.tag_join_id))

				return false;

			if (this.tag_name == null) {
				if (other.tag_name != null)
					return false;

			} else if (!this.tag_name.equals(other.tag_name))

				return false;

			if (this.tag_description == null) {
				if (other.tag_description != null)
					return false;

			} else if (!this.tag_description.equals(other.tag_description))

				return false;

			if (this.tag_path == null) {
				if (other.tag_path != null)
					return false;

			} else if (!this.tag_path.equals(other.tag_path))

				return false;

			return true;
		}

		public void copyDataTo(row43Struct other) {

			other.tag_join_id = this.tag_join_id;
			other.tag_name = this.tag_name;
			other.tag_description = this.tag_description;
			other.tag_path = this.tag_path;

		}

		public void copyKeysDataTo(row43Struct other) {

			other.tag_join_id = this.tag_join_id;
			other.tag_name = this.tag_name;
			other.tag_description = this.tag_description;
			other.tag_path = this.tag_path;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.tag_join_id = readString(dis);

					this.tag_name = readString(dis);

					this.tag_description = readString(dis);

					this.tag_path = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.tag_join_id, dos);

				// String

				writeString(this.tag_name, dos);

				// String

				writeString(this.tag_description, dos);

				// String

				writeString(this.tag_path, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("tag_join_id=" + tag_join_id);
			sb.append(",tag_name=" + tag_name);
			sb.append(",tag_description=" + tag_description);
			sb.append(",tag_path=" + tag_path);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row43Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.tag_join_id,
					other.tag_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.tag_name, other.tag_name);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.tag_description,
					other.tag_description);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.tag_path, other.tag_path);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_59Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_59_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row43Struct row43 = new row43Struct();

				/**
				 * [tAdvancedHash_row43 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row43", false);
				start_Hash.put("tAdvancedHash_row43",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row43";

				int tos_count_tAdvancedHash_row43 = 0;

				// connection name:row43
				// source node:tJDBCInput_59 - inputs:(after_tJDBCInput_46)
				// outputs:(row43,row43) | target node:tAdvancedHash_row43 -
				// inputs:(row43) outputs:()
				// linked node: tMap_28 - inputs:(row42,row43)
				// outputs:(tag_details_update)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row43 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct> tHash_Lookup_row43 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row43Struct> getLookup(matchingModeEnum_row43);

				globalMap.put("tHash_Lookup_row43", tHash_Lookup_row43);

				/**
				 * [tAdvancedHash_row43 begin ] stop
				 */

				/**
				 * [tJDBCInput_59 begin ] start
				 */

				ok_Hash.put("tJDBCInput_59", false);
				start_Hash.put("tJDBCInput_59", System.currentTimeMillis());

				currentComponent = "tJDBCInput_59";

				int tos_count_tJDBCInput_59 = 0;

				int nb_line_tJDBCInput_59 = 0;
				java.sql.Connection conn_tJDBCInput_59 = null;
				conn_tJDBCInput_59 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_59 = conn_tJDBCInput_59
						.createStatement();

				String dbquery_tJDBCInput_59 = "SELECT upper(cast(tag_id as char(36))) as tag_join_id, 		tag_name,  		tag_description, 		tag_path FROM v3_5_latest_tags_details";

				globalMap.put("tJDBCInput_59_QUERY", dbquery_tJDBCInput_59);
				java.sql.ResultSet rs_tJDBCInput_59 = null;
				try {
					rs_tJDBCInput_59 = stmt_tJDBCInput_59
							.executeQuery(dbquery_tJDBCInput_59);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_59 = rs_tJDBCInput_59
							.getMetaData();
					int colQtyInRs_tJDBCInput_59 = rsmd_tJDBCInput_59
							.getColumnCount();

					String tmpContent_tJDBCInput_59 = null;
					int column_index_tJDBCInput_59 = 1;

					while (rs_tJDBCInput_59.next()) {
						nb_line_tJDBCInput_59++;

						column_index_tJDBCInput_59 = 1;

						if (colQtyInRs_tJDBCInput_59 < column_index_tJDBCInput_59) {
							row43.tag_join_id = null;
						} else {

							tmpContent_tJDBCInput_59 = rs_tJDBCInput_59
									.getString(column_index_tJDBCInput_59);
							if (tmpContent_tJDBCInput_59 != null) {
								row43.tag_join_id = tmpContent_tJDBCInput_59;
							} else {
								row43.tag_join_id = null;
							}

						}

						column_index_tJDBCInput_59 = 2;

						if (colQtyInRs_tJDBCInput_59 < column_index_tJDBCInput_59) {
							row43.tag_name = null;
						} else {

							tmpContent_tJDBCInput_59 = rs_tJDBCInput_59
									.getString(column_index_tJDBCInput_59);
							if (tmpContent_tJDBCInput_59 != null) {
								row43.tag_name = tmpContent_tJDBCInput_59;
							} else {
								row43.tag_name = null;
							}

						}

						column_index_tJDBCInput_59 = 3;

						if (colQtyInRs_tJDBCInput_59 < column_index_tJDBCInput_59) {
							row43.tag_description = null;
						} else {

							tmpContent_tJDBCInput_59 = rs_tJDBCInput_59
									.getString(column_index_tJDBCInput_59);
							if (tmpContent_tJDBCInput_59 != null) {
								row43.tag_description = tmpContent_tJDBCInput_59;
							} else {
								row43.tag_description = null;
							}

						}

						column_index_tJDBCInput_59 = 4;

						if (colQtyInRs_tJDBCInput_59 < column_index_tJDBCInput_59) {
							row43.tag_path = null;
						} else {

							tmpContent_tJDBCInput_59 = rs_tJDBCInput_59
									.getString(column_index_tJDBCInput_59);
							if (tmpContent_tJDBCInput_59 != null) {
								row43.tag_path = tmpContent_tJDBCInput_59;
							} else {
								row43.tag_path = null;
							}

						}

						/**
						 * [tJDBCInput_59 begin ] stop
						 */
						/**
						 * [tJDBCInput_59 main ] start
						 */

						currentComponent = "tJDBCInput_59";

						tos_count_tJDBCInput_59++;

						/**
						 * [tJDBCInput_59 main ] stop
						 */

						/**
						 * [tAdvancedHash_row43 main ] start
						 */

						currentComponent = "tAdvancedHash_row43";

						row43Struct row43_HashRow = new row43Struct();

						row43_HashRow.tag_join_id = row43.tag_join_id;

						row43_HashRow.tag_name = row43.tag_name;

						row43_HashRow.tag_description = row43.tag_description;

						row43_HashRow.tag_path = row43.tag_path;

						tHash_Lookup_row43.put(row43_HashRow);

						tos_count_tAdvancedHash_row43++;

						/**
						 * [tAdvancedHash_row43 main ] stop
						 */

						/**
						 * [tJDBCInput_59 end ] start
						 */

						currentComponent = "tJDBCInput_59";

					}
				} finally {
					rs_tJDBCInput_59.close();
					stmt_tJDBCInput_59.close();

				}
				globalMap.put("tJDBCInput_59_NB_LINE", nb_line_tJDBCInput_59);

				ok_Hash.put("tJDBCInput_59", true);
				end_Hash.put("tJDBCInput_59", System.currentTimeMillis());

				/**
				 * [tJDBCInput_59 end ] stop
				 */

				/**
				 * [tAdvancedHash_row43 end ] start
				 */

				currentComponent = "tAdvancedHash_row43";

				tHash_Lookup_row43.endPut();

				ok_Hash.put("tAdvancedHash_row43", true);
				end_Hash.put("tAdvancedHash_row43", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row43 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_59 finally ] start
				 */

				currentComponent = "tJDBCInput_59";

				/**
				 * [tJDBCInput_59 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row43 finally ] start
				 */

				currentComponent = "tAdvancedHash_row43";

				/**
				 * [tAdvancedHash_row43 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_59_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableComparableLookupRow<row13Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String tag_join_id;

		public String getTag_join_id() {
			return this.tag_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.tag_join_id == null) ? 0 : this.tag_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.tag_join_id == null) {
				if (other.tag_join_id != null)
					return false;

			} else if (!this.tag_join_id.equals(other.tag_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.tag_join_id = this.tag_join_id;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.tag_join_id = this.tag_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.tag_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.tag_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("tag_join_id=" + tag_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.tag_join_id,
					other.tag_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_49Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_49_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tAdvancedHash_row13 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row13", false);
				start_Hash.put("tAdvancedHash_row13",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row13";

				int tos_count_tAdvancedHash_row13 = 0;

				// connection name:row13
				// source node:tJDBCInput_49 - inputs:(after_tJDBCInput_50)
				// outputs:(row13,row13) | target node:tAdvancedHash_row13 -
				// inputs:(row13) outputs:()
				// linked node: tMap_29 - inputs:(row41,row13)
				// outputs:(delete_tag_detalis)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row13Struct> getLookup(matchingModeEnum_row13);

				globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);

				/**
				 * [tAdvancedHash_row13 begin ] stop
				 */

				/**
				 * [tJDBCInput_49 begin ] start
				 */

				ok_Hash.put("tJDBCInput_49", false);
				start_Hash.put("tJDBCInput_49", System.currentTimeMillis());

				currentComponent = "tJDBCInput_49";

				int tos_count_tJDBCInput_49 = 0;

				int nb_line_tJDBCInput_49 = 0;
				java.sql.Connection conn_tJDBCInput_49 = null;
				conn_tJDBCInput_49 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_49 = conn_tJDBCInput_49
						.createStatement();

				String dbquery_tJDBCInput_49 = "SELECT upper(cast(tag_id as char(36))) as tag_join_id FROM	tags";

				globalMap.put("tJDBCInput_49_QUERY", dbquery_tJDBCInput_49);
				java.sql.ResultSet rs_tJDBCInput_49 = null;
				try {
					rs_tJDBCInput_49 = stmt_tJDBCInput_49
							.executeQuery(dbquery_tJDBCInput_49);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_49 = rs_tJDBCInput_49
							.getMetaData();
					int colQtyInRs_tJDBCInput_49 = rsmd_tJDBCInput_49
							.getColumnCount();

					String tmpContent_tJDBCInput_49 = null;
					int column_index_tJDBCInput_49 = 1;

					while (rs_tJDBCInput_49.next()) {
						nb_line_tJDBCInput_49++;

						column_index_tJDBCInput_49 = 1;

						if (colQtyInRs_tJDBCInput_49 < column_index_tJDBCInput_49) {
							row13.tag_join_id = null;
						} else {

							tmpContent_tJDBCInput_49 = rs_tJDBCInput_49
									.getString(column_index_tJDBCInput_49);
							if (tmpContent_tJDBCInput_49 != null) {
								row13.tag_join_id = tmpContent_tJDBCInput_49;
							} else {
								row13.tag_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_49 begin ] stop
						 */
						/**
						 * [tJDBCInput_49 main ] start
						 */

						currentComponent = "tJDBCInput_49";

						tos_count_tJDBCInput_49++;

						/**
						 * [tJDBCInput_49 main ] stop
						 */

						/**
						 * [tAdvancedHash_row13 main ] start
						 */

						currentComponent = "tAdvancedHash_row13";

						row13Struct row13_HashRow = new row13Struct();

						row13_HashRow.tag_join_id = row13.tag_join_id;

						tHash_Lookup_row13.put(row13_HashRow);

						tos_count_tAdvancedHash_row13++;

						/**
						 * [tAdvancedHash_row13 main ] stop
						 */

						/**
						 * [tJDBCInput_49 end ] start
						 */

						currentComponent = "tJDBCInput_49";

					}
				} finally {
					rs_tJDBCInput_49.close();
					stmt_tJDBCInput_49.close();

				}
				globalMap.put("tJDBCInput_49_NB_LINE", nb_line_tJDBCInput_49);

				ok_Hash.put("tJDBCInput_49", true);
				end_Hash.put("tJDBCInput_49", System.currentTimeMillis());

				/**
				 * [tJDBCInput_49 end ] stop
				 */

				/**
				 * [tAdvancedHash_row13 end ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				tHash_Lookup_row13.endPut();

				ok_Hash.put("tAdvancedHash_row13", true);
				end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_49 finally ] start
				 */

				currentComponent = "tJDBCInput_49";

				/**
				 * [tJDBCInput_49 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row13 finally ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				/**
				 * [tAdvancedHash_row13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_49_SUBPROCESS_STATE", 1);
	}

	public static class row47Struct implements
			routines.system.IPersistableComparableLookupRow<row47Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String device_join_id;

		public String getDevice_join_id() {
			return this.device_join_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.device_join_id == null) ? 0
								: this.device_join_id.hashCode());

				result = prime
						* result
						+ ((this.vm_join_id == null) ? 0 : this.vm_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row47Struct other = (row47Struct) obj;

			if (this.device_join_id == null) {
				if (other.device_join_id != null)
					return false;

			} else if (!this.device_join_id.equals(other.device_join_id))

				return false;

			if (this.vm_join_id == null) {
				if (other.vm_join_id != null)
					return false;

			} else if (!this.vm_join_id.equals(other.vm_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row47Struct other) {

			other.device_join_id = this.device_join_id;
			other.vm_join_id = this.vm_join_id;

		}

		public void copyKeysDataTo(row47Struct other) {

			other.device_join_id = this.device_join_id;
			other.vm_join_id = this.vm_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.device_join_id = readString(dis);

					this.vm_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.device_join_id, dos);

				// String

				writeString(this.vm_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("device_join_id=" + device_join_id);
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row47Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.device_join_id,
					other.device_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.vm_join_id,
					other.vm_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_55Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_55_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row47Struct row47 = new row47Struct();

				/**
				 * [tAdvancedHash_row47 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row47", false);
				start_Hash.put("tAdvancedHash_row47",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row47";

				int tos_count_tAdvancedHash_row47 = 0;

				// connection name:row47
				// source node:tJDBCInput_55 - inputs:(after_tJDBCInput_56)
				// outputs:(row47,row47) | target node:tAdvancedHash_row47 -
				// inputs:(row47) outputs:()
				// linked node: tMap_32 - inputs:(row48,row47)
				// outputs:(delete_vm_device_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row47 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct> tHash_Lookup_row47 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row47Struct> getLookup(matchingModeEnum_row47);

				globalMap.put("tHash_Lookup_row47", tHash_Lookup_row47);

				/**
				 * [tAdvancedHash_row47 begin ] stop
				 */

				/**
				 * [tJDBCInput_55 begin ] start
				 */

				ok_Hash.put("tJDBCInput_55", false);
				start_Hash.put("tJDBCInput_55", System.currentTimeMillis());

				currentComponent = "tJDBCInput_55";

				int tos_count_tJDBCInput_55 = 0;

				int nb_line_tJDBCInput_55 = 0;
				java.sql.Connection conn_tJDBCInput_55 = null;
				conn_tJDBCInput_55 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_55 = conn_tJDBCInput_55
						.createStatement();

				String dbquery_tJDBCInput_55 = "SELECT upper(cast(device_id as char(36))) as device_join_id,         upper(cast(vm_id as char(36))) as vm_join_id   FROM vm_device WHERE  (type = 'disk' AND        device = 'disk') OR        type = 'interface'";

				globalMap.put("tJDBCInput_55_QUERY", dbquery_tJDBCInput_55);
				java.sql.ResultSet rs_tJDBCInput_55 = null;
				try {
					rs_tJDBCInput_55 = stmt_tJDBCInput_55
							.executeQuery(dbquery_tJDBCInput_55);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_55 = rs_tJDBCInput_55
							.getMetaData();
					int colQtyInRs_tJDBCInput_55 = rsmd_tJDBCInput_55
							.getColumnCount();

					String tmpContent_tJDBCInput_55 = null;
					int column_index_tJDBCInput_55 = 1;

					while (rs_tJDBCInput_55.next()) {
						nb_line_tJDBCInput_55++;

						column_index_tJDBCInput_55 = 1;

						if (colQtyInRs_tJDBCInput_55 < column_index_tJDBCInput_55) {
							row47.device_join_id = null;
						} else {

							tmpContent_tJDBCInput_55 = rs_tJDBCInput_55
									.getString(column_index_tJDBCInput_55);
							if (tmpContent_tJDBCInput_55 != null) {
								row47.device_join_id = tmpContent_tJDBCInput_55;
							} else {
								row47.device_join_id = null;
							}

						}

						column_index_tJDBCInput_55 = 2;

						if (colQtyInRs_tJDBCInput_55 < column_index_tJDBCInput_55) {
							row47.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_55 = rs_tJDBCInput_55
									.getString(column_index_tJDBCInput_55);
							if (tmpContent_tJDBCInput_55 != null) {
								row47.vm_join_id = tmpContent_tJDBCInput_55;
							} else {
								row47.vm_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_55 begin ] stop
						 */
						/**
						 * [tJDBCInput_55 main ] start
						 */

						currentComponent = "tJDBCInput_55";

						tos_count_tJDBCInput_55++;

						/**
						 * [tJDBCInput_55 main ] stop
						 */

						/**
						 * [tAdvancedHash_row47 main ] start
						 */

						currentComponent = "tAdvancedHash_row47";

						row47Struct row47_HashRow = new row47Struct();

						row47_HashRow.device_join_id = row47.device_join_id;

						row47_HashRow.vm_join_id = row47.vm_join_id;

						tHash_Lookup_row47.put(row47_HashRow);

						tos_count_tAdvancedHash_row47++;

						/**
						 * [tAdvancedHash_row47 main ] stop
						 */

						/**
						 * [tJDBCInput_55 end ] start
						 */

						currentComponent = "tJDBCInput_55";

					}
				} finally {
					rs_tJDBCInput_55.close();
					stmt_tJDBCInput_55.close();

				}
				globalMap.put("tJDBCInput_55_NB_LINE", nb_line_tJDBCInput_55);

				ok_Hash.put("tJDBCInput_55", true);
				end_Hash.put("tJDBCInput_55", System.currentTimeMillis());

				/**
				 * [tJDBCInput_55 end ] stop
				 */

				/**
				 * [tAdvancedHash_row47 end ] start
				 */

				currentComponent = "tAdvancedHash_row47";

				tHash_Lookup_row47.endPut();

				ok_Hash.put("tAdvancedHash_row47", true);
				end_Hash.put("tAdvancedHash_row47", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row47 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_55 finally ] start
				 */

				currentComponent = "tJDBCInput_55";

				/**
				 * [tJDBCInput_55 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row47 finally ] start
				 */

				currentComponent = "tAdvancedHash_row47";

				/**
				 * [tAdvancedHash_row47 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_55_SUBPROCESS_STATE", 1);
	}

	public static class row51Struct implements
			routines.system.IPersistableComparableLookupRow<row51Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String vm_disk_join_id;

		public String getVm_disk_join_id() {
			return this.vm_disk_join_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.vm_disk_join_id == null) ? 0
								: this.vm_disk_join_id.hashCode());

				result = prime
						* result
						+ ((this.vm_join_id == null) ? 0 : this.vm_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row51Struct other = (row51Struct) obj;

			if (this.vm_disk_join_id == null) {
				if (other.vm_disk_join_id != null)
					return false;

			} else if (!this.vm_disk_join_id.equals(other.vm_disk_join_id))

				return false;

			if (this.vm_join_id == null) {
				if (other.vm_join_id != null)
					return false;

			} else if (!this.vm_join_id.equals(other.vm_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row51Struct other) {

			other.vm_disk_join_id = this.vm_disk_join_id;
			other.vm_join_id = this.vm_join_id;

		}

		public void copyKeysDataTo(row51Struct other) {

			other.vm_disk_join_id = this.vm_disk_join_id;
			other.vm_join_id = this.vm_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_disk_join_id = readString(dis);

					this.vm_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.vm_disk_join_id, dos);

				// String

				writeString(this.vm_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_disk_join_id=" + vm_disk_join_id);
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row51Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.vm_disk_join_id,
					other.vm_disk_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.vm_join_id,
					other.vm_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_63Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_63_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row51Struct row51 = new row51Struct();

				/**
				 * [tAdvancedHash_row51 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row51", false);
				start_Hash.put("tAdvancedHash_row51",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row51";

				int tos_count_tAdvancedHash_row51 = 0;

				// connection name:row51
				// source node:tJDBCInput_63 - inputs:(after_tJDBCInput_61)
				// outputs:(row51,row51) | target node:tAdvancedHash_row51 -
				// inputs:(row51) outputs:()
				// linked node: tMap_33 - inputs:(row49,row51)
				// outputs:(insert_new_vm_disk_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row51 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row51Struct> tHash_Lookup_row51 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row51Struct> getLookup(matchingModeEnum_row51);

				globalMap.put("tHash_Lookup_row51", tHash_Lookup_row51);

				/**
				 * [tAdvancedHash_row51 begin ] stop
				 */

				/**
				 * [tJDBCInput_63 begin ] start
				 */

				ok_Hash.put("tJDBCInput_63", false);
				start_Hash.put("tJDBCInput_63", System.currentTimeMillis());

				currentComponent = "tJDBCInput_63";

				int tos_count_tJDBCInput_63 = 0;

				int nb_line_tJDBCInput_63 = 0;
				java.sql.Connection conn_tJDBCInput_63 = null;
				conn_tJDBCInput_63 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_63 = conn_tJDBCInput_63
						.createStatement();

				String dbquery_tJDBCInput_63 = "SELECT    upper(cast(vm_disk_id as char(36))) as vm_disk_join_id,    upper(cast(vm_id as char(36))) as vm_join_id FROM v3_0_latest_disks_vm_map_view";

				globalMap.put("tJDBCInput_63_QUERY", dbquery_tJDBCInput_63);
				java.sql.ResultSet rs_tJDBCInput_63 = null;
				try {
					rs_tJDBCInput_63 = stmt_tJDBCInput_63
							.executeQuery(dbquery_tJDBCInput_63);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_63 = rs_tJDBCInput_63
							.getMetaData();
					int colQtyInRs_tJDBCInput_63 = rsmd_tJDBCInput_63
							.getColumnCount();

					String tmpContent_tJDBCInput_63 = null;
					int column_index_tJDBCInput_63 = 1;

					while (rs_tJDBCInput_63.next()) {
						nb_line_tJDBCInput_63++;

						column_index_tJDBCInput_63 = 1;

						if (colQtyInRs_tJDBCInput_63 < column_index_tJDBCInput_63) {
							row51.vm_disk_join_id = null;
						} else {

							tmpContent_tJDBCInput_63 = rs_tJDBCInput_63
									.getString(column_index_tJDBCInput_63);
							if (tmpContent_tJDBCInput_63 != null) {
								row51.vm_disk_join_id = tmpContent_tJDBCInput_63;
							} else {
								row51.vm_disk_join_id = null;
							}

						}

						column_index_tJDBCInput_63 = 2;

						if (colQtyInRs_tJDBCInput_63 < column_index_tJDBCInput_63) {
							row51.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_63 = rs_tJDBCInput_63
									.getString(column_index_tJDBCInput_63);
							if (tmpContent_tJDBCInput_63 != null) {
								row51.vm_join_id = tmpContent_tJDBCInput_63;
							} else {
								row51.vm_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_63 begin ] stop
						 */
						/**
						 * [tJDBCInput_63 main ] start
						 */

						currentComponent = "tJDBCInput_63";

						tos_count_tJDBCInput_63++;

						/**
						 * [tJDBCInput_63 main ] stop
						 */

						/**
						 * [tAdvancedHash_row51 main ] start
						 */

						currentComponent = "tAdvancedHash_row51";

						row51Struct row51_HashRow = new row51Struct();

						row51_HashRow.vm_disk_join_id = row51.vm_disk_join_id;

						row51_HashRow.vm_join_id = row51.vm_join_id;

						tHash_Lookup_row51.put(row51_HashRow);

						tos_count_tAdvancedHash_row51++;

						/**
						 * [tAdvancedHash_row51 main ] stop
						 */

						/**
						 * [tJDBCInput_63 end ] start
						 */

						currentComponent = "tJDBCInput_63";

					}
				} finally {
					rs_tJDBCInput_63.close();
					stmt_tJDBCInput_63.close();

				}
				globalMap.put("tJDBCInput_63_NB_LINE", nb_line_tJDBCInput_63);

				ok_Hash.put("tJDBCInput_63", true);
				end_Hash.put("tJDBCInput_63", System.currentTimeMillis());

				/**
				 * [tJDBCInput_63 end ] stop
				 */

				/**
				 * [tAdvancedHash_row51 end ] start
				 */

				currentComponent = "tAdvancedHash_row51";

				tHash_Lookup_row51.endPut();

				ok_Hash.put("tAdvancedHash_row51", true);
				end_Hash.put("tAdvancedHash_row51", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row51 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_63 finally ] start
				 */

				currentComponent = "tJDBCInput_63";

				/**
				 * [tJDBCInput_63 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row51 finally ] start
				 */

				currentComponent = "tAdvancedHash_row51";

				/**
				 * [tAdvancedHash_row51 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_63_SUBPROCESS_STATE", 1);
	}

	public static class row52Struct implements
			routines.system.IPersistableComparableLookupRow<row52Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String vm_disk_join_id;

		public String getVm_disk_join_id() {
			return this.vm_disk_join_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.vm_disk_join_id == null) ? 0
								: this.vm_disk_join_id.hashCode());

				result = prime
						* result
						+ ((this.vm_join_id == null) ? 0 : this.vm_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row52Struct other = (row52Struct) obj;

			if (this.vm_disk_join_id == null) {
				if (other.vm_disk_join_id != null)
					return false;

			} else if (!this.vm_disk_join_id.equals(other.vm_disk_join_id))

				return false;

			if (this.vm_join_id == null) {
				if (other.vm_join_id != null)
					return false;

			} else if (!this.vm_join_id.equals(other.vm_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row52Struct other) {

			other.vm_disk_join_id = this.vm_disk_join_id;
			other.vm_join_id = this.vm_join_id;

		}

		public void copyKeysDataTo(row52Struct other) {

			other.vm_disk_join_id = this.vm_disk_join_id;
			other.vm_join_id = this.vm_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_disk_join_id = readString(dis);

					this.vm_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.vm_disk_join_id, dos);

				// String

				writeString(this.vm_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("vm_disk_join_id=" + vm_disk_join_id);
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row52Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.vm_disk_join_id,
					other.vm_disk_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.vm_join_id,
					other.vm_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_64Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_64_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row52Struct row52 = new row52Struct();

				/**
				 * [tAdvancedHash_row52 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row52", false);
				start_Hash.put("tAdvancedHash_row52",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row52";

				int tos_count_tAdvancedHash_row52 = 0;

				// connection name:row52
				// source node:tJDBCInput_64 - inputs:(after_tJDBCInput_62)
				// outputs:(row52,row52) | target node:tAdvancedHash_row52 -
				// inputs:(row52) outputs:()
				// linked node: tMap_34 - inputs:(row50,row52)
				// outputs:(delete_vm_disk_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row52 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct> tHash_Lookup_row52 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row52Struct> getLookup(matchingModeEnum_row52);

				globalMap.put("tHash_Lookup_row52", tHash_Lookup_row52);

				/**
				 * [tAdvancedHash_row52 begin ] stop
				 */

				/**
				 * [tJDBCInput_64 begin ] start
				 */

				ok_Hash.put("tJDBCInput_64", false);
				start_Hash.put("tJDBCInput_64", System.currentTimeMillis());

				currentComponent = "tJDBCInput_64";

				int tos_count_tJDBCInput_64 = 0;

				int nb_line_tJDBCInput_64 = 0;
				java.sql.Connection conn_tJDBCInput_64 = null;
				conn_tJDBCInput_64 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_64 = conn_tJDBCInput_64
						.createStatement();

				String dbquery_tJDBCInput_64 = "SELECT    upper(cast(vm_disk_id as char(36))) as vm_disk_join_id,    upper(cast(vm_id as char(36))) as vm_join_id FROM dwh_disk_vm_map_history_view";

				globalMap.put("tJDBCInput_64_QUERY", dbquery_tJDBCInput_64);
				java.sql.ResultSet rs_tJDBCInput_64 = null;
				try {
					rs_tJDBCInput_64 = stmt_tJDBCInput_64
							.executeQuery(dbquery_tJDBCInput_64);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_64 = rs_tJDBCInput_64
							.getMetaData();
					int colQtyInRs_tJDBCInput_64 = rsmd_tJDBCInput_64
							.getColumnCount();

					String tmpContent_tJDBCInput_64 = null;
					int column_index_tJDBCInput_64 = 1;

					while (rs_tJDBCInput_64.next()) {
						nb_line_tJDBCInput_64++;

						column_index_tJDBCInput_64 = 1;

						if (colQtyInRs_tJDBCInput_64 < column_index_tJDBCInput_64) {
							row52.vm_disk_join_id = null;
						} else {

							tmpContent_tJDBCInput_64 = rs_tJDBCInput_64
									.getString(column_index_tJDBCInput_64);
							if (tmpContent_tJDBCInput_64 != null) {
								row52.vm_disk_join_id = tmpContent_tJDBCInput_64;
							} else {
								row52.vm_disk_join_id = null;
							}

						}

						column_index_tJDBCInput_64 = 2;

						if (colQtyInRs_tJDBCInput_64 < column_index_tJDBCInput_64) {
							row52.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_64 = rs_tJDBCInput_64
									.getString(column_index_tJDBCInput_64);
							if (tmpContent_tJDBCInput_64 != null) {
								row52.vm_join_id = tmpContent_tJDBCInput_64;
							} else {
								row52.vm_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_64 begin ] stop
						 */
						/**
						 * [tJDBCInput_64 main ] start
						 */

						currentComponent = "tJDBCInput_64";

						tos_count_tJDBCInput_64++;

						/**
						 * [tJDBCInput_64 main ] stop
						 */

						/**
						 * [tAdvancedHash_row52 main ] start
						 */

						currentComponent = "tAdvancedHash_row52";

						row52Struct row52_HashRow = new row52Struct();

						row52_HashRow.vm_disk_join_id = row52.vm_disk_join_id;

						row52_HashRow.vm_join_id = row52.vm_join_id;

						tHash_Lookup_row52.put(row52_HashRow);

						tos_count_tAdvancedHash_row52++;

						/**
						 * [tAdvancedHash_row52 main ] stop
						 */

						/**
						 * [tJDBCInput_64 end ] start
						 */

						currentComponent = "tJDBCInput_64";

					}
				} finally {
					rs_tJDBCInput_64.close();
					stmt_tJDBCInput_64.close();

				}
				globalMap.put("tJDBCInput_64_NB_LINE", nb_line_tJDBCInput_64);

				ok_Hash.put("tJDBCInput_64", true);
				end_Hash.put("tJDBCInput_64", System.currentTimeMillis());

				/**
				 * [tJDBCInput_64 end ] stop
				 */

				/**
				 * [tAdvancedHash_row52 end ] start
				 */

				currentComponent = "tAdvancedHash_row52";

				tHash_Lookup_row52.endPut();

				ok_Hash.put("tAdvancedHash_row52", true);
				end_Hash.put("tAdvancedHash_row52", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row52 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_64 finally ] start
				 */

				currentComponent = "tJDBCInput_64";

				/**
				 * [tJDBCInput_64 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row52 finally ] start
				 */

				currentComponent = "tAdvancedHash_row52";

				/**
				 * [tAdvancedHash_row52 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_64_SUBPROCESS_STATE", 1);
	}

	public static class row46Struct implements
			routines.system.IPersistableComparableLookupRow<row46Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public String vm_join_id;

		public String getVm_join_id() {
			return this.vm_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.vm_join_id == null) ? 0 : this.vm_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row46Struct other = (row46Struct) obj;

			if (this.vm_join_id == null) {
				if (other.vm_join_id != null)
					return false;

			} else if (!this.vm_join_id.equals(other.vm_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row46Struct other) {

			other.history_id = this.history_id;
			other.vm_join_id = this.vm_join_id;

		}

		public void copyKeysDataTo(row46Struct other) {

			other.vm_join_id = this.vm_join_id;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.vm_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.history_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.history_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_join_id=" + vm_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row46Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.vm_join_id,
					other.vm_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_54Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_54_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row46Struct row46 = new row46Struct();

				/**
				 * [tAdvancedHash_row46 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row46", false);
				start_Hash.put("tAdvancedHash_row46",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row46";

				int tos_count_tAdvancedHash_row46 = 0;

				// connection name:row46
				// source node:tJDBCInput_54 - inputs:(after_tJDBCInput_53)
				// outputs:(row46,row46) | target node:tAdvancedHash_row46 -
				// inputs:(row46) outputs:()
				// linked node: tMap_31 - inputs:(row45,row46,row53,row54)
				// outputs:(insert_new_vm_device_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row46 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row46Struct> getLookup(matchingModeEnum_row46);

				globalMap.put("tHash_Lookup_row46", tHash_Lookup_row46);

				/**
				 * [tAdvancedHash_row46 begin ] stop
				 */

				/**
				 * [tJDBCInput_54 begin ] start
				 */

				ok_Hash.put("tJDBCInput_54", false);
				start_Hash.put("tJDBCInput_54", System.currentTimeMillis());

				currentComponent = "tJDBCInput_54";

				int tos_count_tJDBCInput_54 = 0;

				int nb_line_tJDBCInput_54 = 0;
				java.sql.Connection conn_tJDBCInput_54 = null;
				conn_tJDBCInput_54 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_54 = conn_tJDBCInput_54
						.createStatement();

				String dbquery_tJDBCInput_54 = "SELECT history_id, upper(cast(vm_id as char(36))) as vm_join_id  FROM  v3_5_latest_configuration_vms";

				globalMap.put("tJDBCInput_54_QUERY", dbquery_tJDBCInput_54);
				java.sql.ResultSet rs_tJDBCInput_54 = null;
				try {
					rs_tJDBCInput_54 = stmt_tJDBCInput_54
							.executeQuery(dbquery_tJDBCInput_54);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_54 = rs_tJDBCInput_54
							.getMetaData();
					int colQtyInRs_tJDBCInput_54 = rsmd_tJDBCInput_54
							.getColumnCount();

					String tmpContent_tJDBCInput_54 = null;
					int column_index_tJDBCInput_54 = 1;

					while (rs_tJDBCInput_54.next()) {
						nb_line_tJDBCInput_54++;

						column_index_tJDBCInput_54 = 1;

						if (colQtyInRs_tJDBCInput_54 < column_index_tJDBCInput_54) {
							row46.history_id = null;
						} else {

							if (rs_tJDBCInput_54
									.getObject(column_index_tJDBCInput_54) != null) {
								row46.history_id = rs_tJDBCInput_54
										.getInt(column_index_tJDBCInput_54);
							} else {
								row46.history_id = null;
							}

						}

						column_index_tJDBCInput_54 = 2;

						if (colQtyInRs_tJDBCInput_54 < column_index_tJDBCInput_54) {
							row46.vm_join_id = null;
						} else {

							tmpContent_tJDBCInput_54 = rs_tJDBCInput_54
									.getString(column_index_tJDBCInput_54);
							if (tmpContent_tJDBCInput_54 != null) {
								row46.vm_join_id = tmpContent_tJDBCInput_54;
							} else {
								row46.vm_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_54 begin ] stop
						 */
						/**
						 * [tJDBCInput_54 main ] start
						 */

						currentComponent = "tJDBCInput_54";

						tos_count_tJDBCInput_54++;

						/**
						 * [tJDBCInput_54 main ] stop
						 */

						/**
						 * [tAdvancedHash_row46 main ] start
						 */

						currentComponent = "tAdvancedHash_row46";

						row46Struct row46_HashRow = new row46Struct();

						row46_HashRow.history_id = row46.history_id;

						row46_HashRow.vm_join_id = row46.vm_join_id;

						tHash_Lookup_row46.put(row46_HashRow);

						tos_count_tAdvancedHash_row46++;

						/**
						 * [tAdvancedHash_row46 main ] stop
						 */

						/**
						 * [tJDBCInput_54 end ] start
						 */

						currentComponent = "tJDBCInput_54";

					}
				} finally {
					rs_tJDBCInput_54.close();
					stmt_tJDBCInput_54.close();

				}
				globalMap.put("tJDBCInput_54_NB_LINE", nb_line_tJDBCInput_54);

				ok_Hash.put("tJDBCInput_54", true);
				end_Hash.put("tJDBCInput_54", System.currentTimeMillis());

				/**
				 * [tJDBCInput_54 end ] stop
				 */

				/**
				 * [tAdvancedHash_row46 end ] start
				 */

				currentComponent = "tAdvancedHash_row46";

				tHash_Lookup_row46.endPut();

				ok_Hash.put("tAdvancedHash_row46", true);
				end_Hash.put("tAdvancedHash_row46", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row46 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_54 finally ] start
				 */

				currentComponent = "tJDBCInput_54";

				/**
				 * [tJDBCInput_54 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row46 finally ] start
				 */

				currentComponent = "tAdvancedHash_row46";

				/**
				 * [tAdvancedHash_row46 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_54_SUBPROCESS_STATE", 1);
	}

	public static class row53Struct implements
			routines.system.IPersistableComparableLookupRow<row53Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public String vm_interface_join_id;

		public String getVm_interface_join_id() {
			return this.vm_interface_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.vm_interface_join_id == null) ? 0
								: this.vm_interface_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row53Struct other = (row53Struct) obj;

			if (this.vm_interface_join_id == null) {
				if (other.vm_interface_join_id != null)
					return false;

			} else if (!this.vm_interface_join_id
					.equals(other.vm_interface_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row53Struct other) {

			other.history_id = this.history_id;
			other.vm_interface_join_id = this.vm_interface_join_id;

		}

		public void copyKeysDataTo(row53Struct other) {

			other.vm_interface_join_id = this.vm_interface_join_id;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_interface_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.vm_interface_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.history_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.history_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_interface_join_id=" + vm_interface_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row53Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.vm_interface_join_id,
					other.vm_interface_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_65Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_65_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row53Struct row53 = new row53Struct();

				/**
				 * [tAdvancedHash_row53 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row53", false);
				start_Hash.put("tAdvancedHash_row53",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row53";

				int tos_count_tAdvancedHash_row53 = 0;

				// connection name:row53
				// source node:tJDBCInput_65 - inputs:(after_tJDBCInput_53)
				// outputs:(row53,row53) | target node:tAdvancedHash_row53 -
				// inputs:(row53) outputs:()
				// linked node: tMap_31 - inputs:(row45,row46,row53,row54)
				// outputs:(insert_new_vm_device_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row53 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct> tHash_Lookup_row53 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row53Struct> getLookup(matchingModeEnum_row53);

				globalMap.put("tHash_Lookup_row53", tHash_Lookup_row53);

				/**
				 * [tAdvancedHash_row53 begin ] stop
				 */

				/**
				 * [tJDBCInput_65 begin ] start
				 */

				ok_Hash.put("tJDBCInput_65", false);
				start_Hash.put("tJDBCInput_65", System.currentTimeMillis());

				currentComponent = "tJDBCInput_65";

				int tos_count_tJDBCInput_65 = 0;

				int nb_line_tJDBCInput_65 = 0;
				java.sql.Connection conn_tJDBCInput_65 = null;
				conn_tJDBCInput_65 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_65 = conn_tJDBCInput_65
						.createStatement();

				String dbquery_tJDBCInput_65 = "SELECT     history_id,     upper(cast(vm_interface_id as char(36))) as vm_interface_join_id  FROM v3_5_latest_configuration_vms_interfaces";

				globalMap.put("tJDBCInput_65_QUERY", dbquery_tJDBCInput_65);
				java.sql.ResultSet rs_tJDBCInput_65 = null;
				try {
					rs_tJDBCInput_65 = stmt_tJDBCInput_65
							.executeQuery(dbquery_tJDBCInput_65);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_65 = rs_tJDBCInput_65
							.getMetaData();
					int colQtyInRs_tJDBCInput_65 = rsmd_tJDBCInput_65
							.getColumnCount();

					String tmpContent_tJDBCInput_65 = null;
					int column_index_tJDBCInput_65 = 1;

					while (rs_tJDBCInput_65.next()) {
						nb_line_tJDBCInput_65++;

						column_index_tJDBCInput_65 = 1;

						if (colQtyInRs_tJDBCInput_65 < column_index_tJDBCInput_65) {
							row53.history_id = null;
						} else {

							if (rs_tJDBCInput_65
									.getObject(column_index_tJDBCInput_65) != null) {
								row53.history_id = rs_tJDBCInput_65
										.getInt(column_index_tJDBCInput_65);
							} else {
								row53.history_id = null;
							}

						}

						column_index_tJDBCInput_65 = 2;

						if (colQtyInRs_tJDBCInput_65 < column_index_tJDBCInput_65) {
							row53.vm_interface_join_id = null;
						} else {

							tmpContent_tJDBCInput_65 = rs_tJDBCInput_65
									.getString(column_index_tJDBCInput_65);
							if (tmpContent_tJDBCInput_65 != null) {
								row53.vm_interface_join_id = tmpContent_tJDBCInput_65;
							} else {
								row53.vm_interface_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_65 begin ] stop
						 */
						/**
						 * [tJDBCInput_65 main ] start
						 */

						currentComponent = "tJDBCInput_65";

						tos_count_tJDBCInput_65++;

						/**
						 * [tJDBCInput_65 main ] stop
						 */

						/**
						 * [tAdvancedHash_row53 main ] start
						 */

						currentComponent = "tAdvancedHash_row53";

						row53Struct row53_HashRow = new row53Struct();

						row53_HashRow.history_id = row53.history_id;

						row53_HashRow.vm_interface_join_id = row53.vm_interface_join_id;

						tHash_Lookup_row53.put(row53_HashRow);

						tos_count_tAdvancedHash_row53++;

						/**
						 * [tAdvancedHash_row53 main ] stop
						 */

						/**
						 * [tJDBCInput_65 end ] start
						 */

						currentComponent = "tJDBCInput_65";

					}
				} finally {
					rs_tJDBCInput_65.close();
					stmt_tJDBCInput_65.close();

				}
				globalMap.put("tJDBCInput_65_NB_LINE", nb_line_tJDBCInput_65);

				ok_Hash.put("tJDBCInput_65", true);
				end_Hash.put("tJDBCInput_65", System.currentTimeMillis());

				/**
				 * [tJDBCInput_65 end ] stop
				 */

				/**
				 * [tAdvancedHash_row53 end ] start
				 */

				currentComponent = "tAdvancedHash_row53";

				tHash_Lookup_row53.endPut();

				ok_Hash.put("tAdvancedHash_row53", true);
				end_Hash.put("tAdvancedHash_row53", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row53 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_65 finally ] start
				 */

				currentComponent = "tJDBCInput_65";

				/**
				 * [tJDBCInput_65 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row53 finally ] start
				 */

				currentComponent = "tAdvancedHash_row53";

				/**
				 * [tAdvancedHash_row53 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_65_SUBPROCESS_STATE", 1);
	}

	public static class row54Struct implements
			routines.system.IPersistableComparableLookupRow<row54Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer history_id;

		public Integer getHistory_id() {
			return this.history_id;
		}

		public String vm_disk_join_id;

		public String getVm_disk_join_id() {
			return this.vm_disk_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.vm_disk_join_id == null) ? 0
								: this.vm_disk_join_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row54Struct other = (row54Struct) obj;

			if (this.vm_disk_join_id == null) {
				if (other.vm_disk_join_id != null)
					return false;

			} else if (!this.vm_disk_join_id.equals(other.vm_disk_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row54Struct other) {

			other.history_id = this.history_id;
			other.vm_disk_join_id = this.vm_disk_join_id;

		}

		public void copyKeysDataTo(row54Struct other) {

			other.vm_disk_join_id = this.vm_disk_join_id;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.vm_disk_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.vm_disk_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.history_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.history_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("history_id=" + String.valueOf(history_id));
			sb.append(",vm_disk_join_id=" + vm_disk_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row54Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.vm_disk_join_id,
					other.vm_disk_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_66Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_66_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row54Struct row54 = new row54Struct();

				/**
				 * [tAdvancedHash_row54 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row54", false);
				start_Hash.put("tAdvancedHash_row54",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row54";

				int tos_count_tAdvancedHash_row54 = 0;

				// connection name:row54
				// source node:tJDBCInput_66 - inputs:(after_tJDBCInput_53)
				// outputs:(row54,row54) | target node:tAdvancedHash_row54 -
				// inputs:(row54) outputs:()
				// linked node: tMap_31 - inputs:(row45,row46,row53,row54)
				// outputs:(insert_new_vm_device_connection)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row54 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row54Struct> tHash_Lookup_row54 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row54Struct> getLookup(matchingModeEnum_row54);

				globalMap.put("tHash_Lookup_row54", tHash_Lookup_row54);

				/**
				 * [tAdvancedHash_row54 begin ] stop
				 */

				/**
				 * [tJDBCInput_66 begin ] start
				 */

				ok_Hash.put("tJDBCInput_66", false);
				start_Hash.put("tJDBCInput_66", System.currentTimeMillis());

				currentComponent = "tJDBCInput_66";

				int tos_count_tJDBCInput_66 = 0;

				int nb_line_tJDBCInput_66 = 0;
				java.sql.Connection conn_tJDBCInput_66 = null;
				conn_tJDBCInput_66 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_66 = conn_tJDBCInput_66
						.createStatement();

				String dbquery_tJDBCInput_66 = "SELECT	history_id,   		upper(cast(vm_disk_id as char(36))) as vm_disk_join_id  FROM v3_5_latest_configuration_vms_disks";

				globalMap.put("tJDBCInput_66_QUERY", dbquery_tJDBCInput_66);
				java.sql.ResultSet rs_tJDBCInput_66 = null;
				try {
					rs_tJDBCInput_66 = stmt_tJDBCInput_66
							.executeQuery(dbquery_tJDBCInput_66);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_66 = rs_tJDBCInput_66
							.getMetaData();
					int colQtyInRs_tJDBCInput_66 = rsmd_tJDBCInput_66
							.getColumnCount();

					String tmpContent_tJDBCInput_66 = null;
					int column_index_tJDBCInput_66 = 1;

					while (rs_tJDBCInput_66.next()) {
						nb_line_tJDBCInput_66++;

						column_index_tJDBCInput_66 = 1;

						if (colQtyInRs_tJDBCInput_66 < column_index_tJDBCInput_66) {
							row54.history_id = null;
						} else {

							if (rs_tJDBCInput_66
									.getObject(column_index_tJDBCInput_66) != null) {
								row54.history_id = rs_tJDBCInput_66
										.getInt(column_index_tJDBCInput_66);
							} else {
								row54.history_id = null;
							}

						}

						column_index_tJDBCInput_66 = 2;

						if (colQtyInRs_tJDBCInput_66 < column_index_tJDBCInput_66) {
							row54.vm_disk_join_id = null;
						} else {

							tmpContent_tJDBCInput_66 = rs_tJDBCInput_66
									.getString(column_index_tJDBCInput_66);
							if (tmpContent_tJDBCInput_66 != null) {
								row54.vm_disk_join_id = tmpContent_tJDBCInput_66;
							} else {
								row54.vm_disk_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_66 begin ] stop
						 */
						/**
						 * [tJDBCInput_66 main ] start
						 */

						currentComponent = "tJDBCInput_66";

						tos_count_tJDBCInput_66++;

						/**
						 * [tJDBCInput_66 main ] stop
						 */

						/**
						 * [tAdvancedHash_row54 main ] start
						 */

						currentComponent = "tAdvancedHash_row54";

						row54Struct row54_HashRow = new row54Struct();

						row54_HashRow.history_id = row54.history_id;

						row54_HashRow.vm_disk_join_id = row54.vm_disk_join_id;

						tHash_Lookup_row54.put(row54_HashRow);

						tos_count_tAdvancedHash_row54++;

						/**
						 * [tAdvancedHash_row54 main ] stop
						 */

						/**
						 * [tJDBCInput_66 end ] start
						 */

						currentComponent = "tJDBCInput_66";

					}
				} finally {
					rs_tJDBCInput_66.close();
					stmt_tJDBCInput_66.close();

				}
				globalMap.put("tJDBCInput_66_NB_LINE", nb_line_tJDBCInput_66);

				ok_Hash.put("tJDBCInput_66", true);
				end_Hash.put("tJDBCInput_66", System.currentTimeMillis());

				/**
				 * [tJDBCInput_66 end ] stop
				 */

				/**
				 * [tAdvancedHash_row54 end ] start
				 */

				currentComponent = "tAdvancedHash_row54";

				tHash_Lookup_row54.endPut();

				ok_Hash.put("tAdvancedHash_row54", true);
				end_Hash.put("tAdvancedHash_row54", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row54 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_66 finally ] start
				 */

				currentComponent = "tJDBCInput_66";

				/**
				 * [tJDBCInput_66 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row54 finally ] start
				 */

				currentComponent = "tAdvancedHash_row54";

				/**
				 * [tAdvancedHash_row54 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_66_SUBPROCESS_STATE", 1);
	}

	public static class row58Struct implements
			routines.system.IPersistableComparableLookupRow<row58Struct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String user_join_id;

		public String getUser_join_id() {
			return this.user_join_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.user_join_id == null) ? 0 : this.user_join_id
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row58Struct other = (row58Struct) obj;

			if (this.user_join_id == null) {
				if (other.user_join_id != null)
					return false;

			} else if (!this.user_join_id.equals(other.user_join_id))

				return false;

			return true;
		}

		public void copyDataTo(row58Struct other) {

			other.user_join_id = this.user_join_id;

		}

		public void copyKeysDataTo(row58Struct other) {

			other.user_join_id = this.user_join_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.user_join_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.user_join_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("user_join_id=" + user_join_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row58Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.user_join_id,
					other.user_join_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row58Struct row58 = new row58Struct();

				/**
				 * [tAdvancedHash_row58 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row58", false);
				start_Hash.put("tAdvancedHash_row58",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row58";

				int tos_count_tAdvancedHash_row58 = 0;

				// connection name:row58
				// source node:tJDBCInput_12 - inputs:(after_tJDBCInput_11)
				// outputs:(row58,row58) | target node:tAdvancedHash_row58 -
				// inputs:(row58) outputs:()
				// linked node: tMap_10 - inputs:(row57,row58)
				// outputs:(delete_users)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row58 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row58Struct> tHash_Lookup_row58 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row58Struct> getLookup(matchingModeEnum_row58);

				globalMap.put("tHash_Lookup_row58", tHash_Lookup_row58);

				/**
				 * [tAdvancedHash_row58 begin ] stop
				 */

				/**
				 * [tJDBCInput_12 begin ] start
				 */

				ok_Hash.put("tJDBCInput_12", false);
				start_Hash.put("tJDBCInput_12", System.currentTimeMillis());

				currentComponent = "tJDBCInput_12";

				int tos_count_tJDBCInput_12 = 0;

				int nb_line_tJDBCInput_12 = 0;
				java.sql.Connection conn_tJDBCInput_12 = null;
				conn_tJDBCInput_12 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");

				java.sql.Statement stmt_tJDBCInput_12 = conn_tJDBCInput_12
						.createStatement();

				String dbquery_tJDBCInput_12 = "SELECT upper(cast(user_id as char(36))) as user_join_id  FROM  users";

				globalMap.put("tJDBCInput_12_QUERY", dbquery_tJDBCInput_12);
				java.sql.ResultSet rs_tJDBCInput_12 = null;
				try {
					rs_tJDBCInput_12 = stmt_tJDBCInput_12
							.executeQuery(dbquery_tJDBCInput_12);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_12 = rs_tJDBCInput_12
							.getMetaData();
					int colQtyInRs_tJDBCInput_12 = rsmd_tJDBCInput_12
							.getColumnCount();

					String tmpContent_tJDBCInput_12 = null;
					int column_index_tJDBCInput_12 = 1;

					while (rs_tJDBCInput_12.next()) {
						nb_line_tJDBCInput_12++;

						column_index_tJDBCInput_12 = 1;

						if (colQtyInRs_tJDBCInput_12 < column_index_tJDBCInput_12) {
							row58.user_join_id = null;
						} else {

							tmpContent_tJDBCInput_12 = rs_tJDBCInput_12
									.getString(column_index_tJDBCInput_12);
							if (tmpContent_tJDBCInput_12 != null) {
								row58.user_join_id = tmpContent_tJDBCInput_12;
							} else {
								row58.user_join_id = null;
							}

						}

						/**
						 * [tJDBCInput_12 begin ] stop
						 */
						/**
						 * [tJDBCInput_12 main ] start
						 */

						currentComponent = "tJDBCInput_12";

						tos_count_tJDBCInput_12++;

						/**
						 * [tJDBCInput_12 main ] stop
						 */

						/**
						 * [tAdvancedHash_row58 main ] start
						 */

						currentComponent = "tAdvancedHash_row58";

						row58Struct row58_HashRow = new row58Struct();

						row58_HashRow.user_join_id = row58.user_join_id;

						tHash_Lookup_row58.put(row58_HashRow);

						tos_count_tAdvancedHash_row58++;

						/**
						 * [tAdvancedHash_row58 main ] stop
						 */

						/**
						 * [tJDBCInput_12 end ] start
						 */

						currentComponent = "tJDBCInput_12";

					}
				} finally {
					rs_tJDBCInput_12.close();
					stmt_tJDBCInput_12.close();

				}
				globalMap.put("tJDBCInput_12_NB_LINE", nb_line_tJDBCInput_12);

				ok_Hash.put("tJDBCInput_12", true);
				end_Hash.put("tJDBCInput_12", System.currentTimeMillis());

				/**
				 * [tJDBCInput_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row58 end ] start
				 */

				currentComponent = "tAdvancedHash_row58";

				tHash_Lookup_row58.endPut();

				ok_Hash.put("tAdvancedHash_row58", true);
				end_Hash.put("tAdvancedHash_row58", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row58 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_12 finally ] start
				 */

				currentComponent = "tJDBCInput_12";

				/**
				 * [tJDBCInput_12 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row58 finally ] start
				 */

				currentComponent = "tAdvancedHash_row58";

				/**
				 * [tAdvancedHash_row58 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_12_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct implements
			routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];
		static byte[] commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length) {
					if (length < 1024
							&& commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync.length == 0) {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[1024];
					} else {
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length);
				strReturn = new String(
						commonByteArray_OVIRT_ENGINE_DWH_ConfigurationSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_OVIRT_ENGINE_DWH_ConfigurationSync) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_CONSOLE begin ] start
				 */

				ok_Hash.put("talendLogs_CONSOLE", false);
				start_Hash
						.put("talendLogs_CONSOLE", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_CONSOLE";

				currentComponent = "talendLogs_CONSOLE";

				int tos_count_talendLogs_CONSOLE = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
				java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;

				StringBuilder strBuffer_talendLogs_CONSOLE = null;
				int nb_line_talendLogs_CONSOLE = 0;
				// /////////////////////

				/**
				 * [talendLogs_CONSOLE begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS
						.getMessages()) {
					row_talendLogs_LOGS.type = lcm.getType();
					row_talendLogs_LOGS.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row_talendLogs_LOGS.priority = lcm.getPriority();
					row_talendLogs_LOGS.message = lcm.getMessage();
					row_talendLogs_LOGS.code = lcm.getCode();

					row_talendLogs_LOGS.moment = java.util.Calendar
							.getInstance().getTime();

					row_talendLogs_LOGS.pid = pid;
					row_talendLogs_LOGS.root_pid = rootPid;
					row_talendLogs_LOGS.father_pid = fatherPid;

					row_talendLogs_LOGS.project = projectName;
					row_talendLogs_LOGS.job = jobName;
					row_talendLogs_LOGS.context = contextStr;

					/**
					 * [talendLogs_LOGS begin ] stop
					 */
					/**
					 * [talendLogs_LOGS main ] start
					 */

					currentVirtualComponent = "talendLogs_LOGS";

					currentComponent = "talendLogs_LOGS";

					tos_count_talendLogs_LOGS++;

					/**
					 * [talendLogs_LOGS main ] stop
					 */

					/**
					 * [talendLogs_CONSOLE main ] start
					 */

					currentVirtualComponent = "talendLogs_CONSOLE";

					currentComponent = "talendLogs_CONSOLE";

					// /////////////////////

					strBuffer_talendLogs_CONSOLE = new StringBuilder();

					if (row_talendLogs_LOGS.moment != null) { //

						strBuffer_talendLogs_CONSOLE.append(FormatterUtils
								.format_Date(row_talendLogs_LOGS.moment,
										"yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.pid != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.pid));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.root_pid != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.root_pid));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.father_pid != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.father_pid));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.project != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.project));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.job != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.job));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.context != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.context));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.priority != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.priority));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.type != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.type));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.origin != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.origin));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.message != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.message));

					} //

					strBuffer_talendLogs_CONSOLE.append("|");

					if (row_talendLogs_LOGS.code != null) { //

						strBuffer_talendLogs_CONSOLE.append(String
								.valueOf(row_talendLogs_LOGS.code));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE",
								consoleOut_talendLogs_CONSOLE);
					}

					consoleOut_talendLogs_CONSOLE
							.println(strBuffer_talendLogs_CONSOLE.toString());
					consoleOut_talendLogs_CONSOLE.flush();
					nb_line_talendLogs_CONSOLE++;
					// ////

					// ////

					// /////////////////////

					tos_count_talendLogs_CONSOLE++;

					/**
					 * [talendLogs_CONSOLE main ] stop
					 */

					/**
					 * [talendLogs_LOGS end ] start
					 */

					currentVirtualComponent = "talendLogs_LOGS";

					currentComponent = "talendLogs_LOGS";

				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_CONSOLE end ] start
				 */

				currentVirtualComponent = "talendLogs_CONSOLE";

				currentComponent = "talendLogs_CONSOLE";

				// ////
				// ////
				globalMap.put("talendLogs_CONSOLE_NB_LINE",
						nb_line_talendLogs_CONSOLE);

				// /////////////////////

				ok_Hash.put("talendLogs_CONSOLE", true);
				end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());

				/**
				 * [talendLogs_CONSOLE end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_CONSOLE finally ] start
				 */

				currentVirtualComponent = "talendLogs_CONSOLE";

				currentComponent = "talendLogs_CONSOLE";

				/**
				 * [talendLogs_CONSOLE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ConfigurationSync ConfigurationSyncClass = new ConfigurationSync();

		int exitCode = ConfigurationSyncClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ConfigurationSync.class
					.getClassLoader().getResourceAsStream(
							"ovirt_engine_dwh/configurationsync_3_5/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.ovirtEngineDbDriverClass = (String) context
					.getProperty("ovirtEngineDbDriverClass");
			context.ovirtEngineDbPassword = (java.lang.String) context
					.getProperty("ovirtEngineDbPassword");
			context.ovirtEngineDbUser = (String) context
					.getProperty("ovirtEngineDbUser");
			context.ovirtEngineDbJdbcConnection = (String) context
					.getProperty("ovirtEngineDbJdbcConnection");
			context.ovirtEngineHistoryDbJdbcConnection = (String) context
					.getProperty("ovirtEngineHistoryDbJdbcConnection");
			context.ovirtEngineHistoryDbDriverClass = (String) context
					.getProperty("ovirtEngineHistoryDbDriverClass");
			context.ovirtEngineHistoryDbPassword = (java.lang.String) context
					.getProperty("ovirtEngineHistoryDbPassword");
			context.ovirtEngineHistoryDbUser = (String) context
					.getProperty("ovirtEngineHistoryDbUser");
			try {
				String context_runTime_value = context.getProperty("runTime");
				if (context_runTime_value == null) {
					context_runTime_value = "";
				}
				int context_runTime_pos = context_runTime_value.indexOf(";");
				String context_runTime_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_runTime_pos > -1) {
					context_runTime_pattern = context_runTime_value.substring(
							0, context_runTime_pos);
					context_runTime_value = context_runTime_value
							.substring(context_runTime_pos + 1);
				}

				context.runTime = (java.util.Date) (new java.text.SimpleDateFormat(
						context_runTime_pattern).parse(context_runTime_value));

			} catch (ParseException e) {
				context.runTime = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ovirtEngineDbDriverClass")) {
				context.ovirtEngineDbDriverClass = (String) parentContextMap
						.get("ovirtEngineDbDriverClass");
			}
			if (parentContextMap.containsKey("ovirtEngineDbPassword")) {
				context.ovirtEngineDbPassword = (java.lang.String) parentContextMap
						.get("ovirtEngineDbPassword");
			}
			if (parentContextMap.containsKey("ovirtEngineDbUser")) {
				context.ovirtEngineDbUser = (String) parentContextMap
						.get("ovirtEngineDbUser");
			}
			if (parentContextMap.containsKey("ovirtEngineDbJdbcConnection")) {
				context.ovirtEngineDbJdbcConnection = (String) parentContextMap
						.get("ovirtEngineDbJdbcConnection");
			}
			if (parentContextMap
					.containsKey("ovirtEngineHistoryDbJdbcConnection")) {
				context.ovirtEngineHistoryDbJdbcConnection = (String) parentContextMap
						.get("ovirtEngineHistoryDbJdbcConnection");
			}
			if (parentContextMap.containsKey("ovirtEngineHistoryDbDriverClass")) {
				context.ovirtEngineHistoryDbDriverClass = (String) parentContextMap
						.get("ovirtEngineHistoryDbDriverClass");
			}
			if (parentContextMap.containsKey("ovirtEngineHistoryDbPassword")) {
				context.ovirtEngineHistoryDbPassword = (java.lang.String) parentContextMap
						.get("ovirtEngineHistoryDbPassword");
			}
			if (parentContextMap.containsKey("ovirtEngineHistoryDbUser")) {
				context.ovirtEngineHistoryDbUser = (String) parentContextMap
						.get("ovirtEngineHistoryDbUser");
			}
			if (parentContextMap.containsKey("runTime")) {
				context.runTime = (java.util.Date) parentContextMap
						.get("runTime");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tJDBCInput_9Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tJDBCInput_9) {
					globalMap.put("tJDBCInput_9_SUBPROCESS_STATE", -1);

					e_tJDBCInput_9.printStackTrace();

				} catch (Error e_tJDBCInput_9) {
					globalMap.put("tJDBCInput_9_SUBPROCESS_STATE", -1);

					e_tJDBCInput_9.printStackTrace();

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : ConfigurationSync");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1763773 characters generated by Talend Open Studio for Data Integration on
 * the February 4, 2015 5:10:52 PM IST
 ************************************************************************************************/
